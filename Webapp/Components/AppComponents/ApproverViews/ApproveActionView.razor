@using Domain.Authentication
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data
@using Webapp.Services.Authentication
<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content:left;
    }
</style>
<RadzenSplitter>
    <RadzenSplitterPane Size="45%" Collapsible="false">
        <RadzenCard class="rz-background-color-info-dark">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard class="rz-background-color-series-4">
                    <RadzenText Text="Approve/Reject Form"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.H5"/>
                    <RadzenText Text="Select action then press submit"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.Subtitle1"/>
                </RadzenCard>
                <RadzenCard>
                    <NeedsApprovalView @bind-PurchaseRequest="@PurchaseRequest" 
                                       @bind-ApproveRequestInput="@this._approveRequestInput"
                                       Submit="@this.SubmitHandler"
                                       Cancel="@this.CancelHandler"/>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="55%">
        <PurchaseRequestView @bind-PurchaseRequest="@this.PurchaseRequest"
                             Mode="EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>
@code {
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Parameter] public PurchaseRequest PurchaseRequest { get; set; }
    [Parameter] public EventCallback<string> ActionCompleted { get; set; }
    
    private List<string> _approvedActions=[PurchaseRequestAction.Cancel.Name];
    private List<string> _orderedActions=[PurchaseRequestAction.Cancel.Name];
    private List<string> _ccList = [];
    private List<string> _emailList = [];

    private ApproveRequestInput _approveRequestInput=new();
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }
    
    private async Task SubmitHandler() {
        var success = await this._purchaseRequestService.ApproveRejectPurchaseRequest(this._approveRequestInput, this.PurchaseRequest);
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
    
    private async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
}