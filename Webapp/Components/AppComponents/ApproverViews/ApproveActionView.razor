@using Domain.PurchaseRequests.TypeConstants
@using Webapp.Data
@inherits UserActionComponent
<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content:left;
    }
</style>
<RadzenSplitter>
    <RadzenSplitterPane Size="45%" Collapsible="false">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard class="area-header">
                    <RadzenText Text="Approve/Reject Form"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.H6"/>
                    <RadzenText Text="Select action then press submit"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.Subtitle1"/>
                </RadzenCard>
                <RadzenCard>
                    <NeedsApprovalView @bind-PurchaseRequest="@PurchaseRequest" 
                                       @bind-ApproveRequestInput="@this._approveRequestInput"
                                       Submit="@this.SubmitHandler"
                                       Cancel="@this.CancelHandler"/>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="55%">
        <PurchaseRequestView PurchaseRequest="@this.PurchaseRequest"
                             Mode="EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>
@code {
    private List<string> _approvedActions=[PurchaseRequestAction.Cancel.Name];
    private List<string> _orderedActions=[PurchaseRequestAction.Cancel.Name];

    private ApproveRequestInput _approveRequestInput=new();
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    protected override async Task SubmitHandler() {
        if (this.PurchaseRequest != null && this._approveRequestInput.Action != null) {
            if(this._approveRequestInput.Action.Name==PurchaseRequestAction.Approve.Name) {
                var message="Submitting Approval...";
                this._spinnerService.Show(message);

            } else if(this._approveRequestInput.Action.Name==PurchaseRequestAction.Reject.Name) {
                var message="Submitting Rejection...";
                this._spinnerService.Show(message);
            }
            var success = await this._purchaseRequestService.ApproveRejectPurchaseRequest(this._approveRequestInput, this.PurchaseRequest);
            if (success) {
                await this.SendRefresh();
                this.ShowNotification(NotificationSeverity.Success,"Success", $"Purchase Request has been successfully {this._approveRequestInput.Action.Name}");
            } else {
                this.ShowNotification(NotificationSeverity.Error,"Error", $" Error while performing action Action: {this._approveRequestInput.Action.Name}");
            }
            await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
            this._spinnerService.Hide();
        }
    }
    
    protected override async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest?._id.ToString());
    }
}