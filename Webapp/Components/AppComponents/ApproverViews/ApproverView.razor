@*@using System.Text.Json
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.Users
@using Infrastructure.Services
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@implements IAsyncDisposable


<RadzenTabs @bind-SelectedIndex="@this._selectedIndex">
    <Tabs>
        <RadzenTabsItem Icon="add_shopping_cart" Text="Overview" Style="background:#4a764a">
            <PurchaseRequestsTable PurchaseRequests="@this._purchaseRequests"
                                   ApproveRequest="@this.ApproveHandler"
                                   @bind-SelectedPurchaseRequest="@this._selectedRequest"/>
            <RequestQueueView PurchaseReqStatuses="@this._purchaseReqStatuses"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@this._templateTabText" 
                        Visible="@this._templateTabVisible" Style="background: #cc7119">
            <PurchaseRequestView PurchaseRequest="@this._actionRequest" 
                                 ActionCompleted="@this.ActionCompletedHandler" 
                                 Mode="EditMode.EDIT"/>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code {
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private PrEditingTracker EditingTracker { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    
    private List<PurchaseRequest> _purchaseRequests = [];
    private List<PurchaseRequestStatus> _purchaseReqStatuses = [];
    private PurchaseRequest? _actionRequest;
    private UserProfile? _userAccount = new();
    private int _selectedIndex = 0;
    private PurchaseRequest? _selectedRequest;
    private bool _templateTabVisible = false;
    private string _templateTabText="Template";

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this.EditingTracker.OnTimeout += this.PrEditTimeout;
        await this.Load();
    }

    private void PrEditTimeout(string Id) {
        if(this._actionRequest != null && this._actionRequest._id.ToString() == Id) {
            this._actionRequest = null;
            this._templateTabVisible = false;
            this._selectedIndex = 0;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task ApproveHandler() {
        if (this._selectedRequest != null) {
            if (this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString())) {
                this._actionRequest = this._selectedRequest;
                this._templateTabVisible = true;
                this._templateTabText = "Approve/Reject Request";
                this._selectedIndex = 1;
            }else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task CancelHandler() {
        this._templateTabVisible = false;
        this._selectedIndex = 0;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task EditHandler() {
        this._actionRequest = this._selectedRequest;
        this._templateTabVisible = true;
        this._templateTabText = "Modify Request";
        this._selectedIndex = 1;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveHandler() {
        this._templateTabVisible = false;
        this._selectedIndex = 0;
        await this.Load();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ActionCompletedHandler() {
        await this.Load();
        await InvokeAsync(StateHasChanged);
    }

    private Task CancelRequestHandler(PurchaseRequest request) {
        Console.WriteLine(JsonSerializer.Serialize(request, new JsonSerializerOptions { WriteIndented = true }));
        return Task.CompletedTask;
    }
    private async Task Load() {
        this._templateTabVisible = false;
        this._selectedIndex = 0;
        this._actionRequest = null;
        this._selectedRequest = null;
        this._userAccount = this._userService.GetSessionUserProfile();
        if (this._userAccount != null) {
            this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(e=>e.Approver.Username == this._userAccount._id);
            this._purchaseReqStatuses=this._purchaseRequests.Select(pr=>new PurchaseRequestStatus(pr._id.ToString(),pr.Title ?? "No Title", pr.Status)).ToList();
        }
    }

    public ValueTask DisposeAsync() {
        this.EditingTracker.OnTimeout -= this.PrEditTimeout;
        return ValueTask.CompletedTask;
    }

}*@