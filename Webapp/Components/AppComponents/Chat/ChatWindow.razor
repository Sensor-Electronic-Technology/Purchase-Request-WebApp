@using Domain.ChatModel
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Data
@using Webapp.Services.Authentication

<RadzenStack>
    <RadzenFieldset Text="Create Chat" AllowCollapse="true" Collapsed="true">
        <RadzenCard class="rz-p-1 rz-border-radius-6">
            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Center">
                <RadzenDropDown Data="@_users"
                                AllowFiltering="true"
                                FilterAsYouType="true"
                                TextProperty="Name"
                                ValueProperty="_id"
                                @bind-Value="@this._selectedUser"/>
                <RadzenButton Text="Create Chat" Click="@CreateChat"/>
            </RadzenStack>
        </RadzenCard>
    </RadzenFieldset>
    <RadzenStack>
        <RadzenFieldset>
            <RadzenDropDown Data="@this._chatRooms" 
                            TValue="ChatRoomDto"
                            AllowFiltering="true"
                            FilterOperator="StringFilterOperator.Contains"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            TextProperty="@nameof(ChatRoomDto.Name)"
                            Value="@this._selectedChatRoom"
                            ValueChanged="SelectedChatRoomChangedHandler"/>
        </RadzenFieldset>
    
    @if (this._loadedChatRooms.Any()) {
        <RadzenTabs>
            <Tabs>
                @foreach (var chatRoom in this._loadedChatRooms) {
                    var room = chatRoom;
                    <RadzenTabsItem Text="@room.Name">
                        <Template>
                            <RadzenStack Orientation="Orientation.Horizontal" 
                                         AlignItems="AlignItems.Center" 
                                         JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@room.Name" TextStyle="TextStyle.Caption"/>
                                <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Danger" 
                                              Size="ButtonSize.ExtraSmall"/>
                            </RadzenStack>
                        </Template>
                        <ChildContent>
                            <ChatRoomView ChatRoomId="@room.Id" CurrentUser="@this.UserProfile"/>
                        </ChildContent>
                        
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    } else {
        <RadzenCard class="area-header">
            <RadzenText Text="Select a chat room from the drop down menu" 
                        TextAlign="TextAlign.Center" 
                        TextStyle="TextStyle.H6"/>
        </RadzenCard>
    }
    </RadzenStack>
</RadzenStack>

@code {
    [Inject] private UserProfileService _userProfileService { get; set; }
    [Inject] private ChatRoomDataService _chatRoomDataService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Parameter] public UserProfile UserProfile { get; set; }
    
    private List<ChatRoomDto> _chatRooms { get; set; }
    private List<ChatRoomDto> _loadedChatRooms { get; set; }
    private ChatRoomDto _selectedChatRoom { get; set; }

    private IEnumerable<UserProfile> _users = [];
    private string? _selectedUser;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._users= await this._userProfileService.GetProfiles();
        this._chatRooms = await this._chatRoomDataService.GetUserChatRooms(this.UserProfile._id) ?? [];
    }
    
    private async Task CreateChat() {
        if (!string.IsNullOrEmpty(this._selectedUser)) {
            var chatRoom=await this._chatRoomDataService.CreateChatRoom(this.UserProfile._id, this._selectedUser);
            if (chatRoom != null) {
                this._loadedChatRooms.Add(chatRoom);
                this._notificationService.Notify(NotificationSeverity.Success,"Chat Room Created",
                    "Chat room created successfully");
            }
            
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,"Error: No User Selected",
                "Please select a user to create a chat room");
        }
        
 
    }

    private async Task SelectedChatRoomChangedHandler(ChatRoomDto chat) {
        if (this._loadedChatRooms.FirstOrDefault(e => e.Id == chat.Id) == null) {
            var chatRoom = await this._chatRoomDataService.GetChatRoomDto(chat.Id);
            if (chatRoom != null) {
                this._loadedChatRooms.Add(chatRoom);
            }
        }
    }

}