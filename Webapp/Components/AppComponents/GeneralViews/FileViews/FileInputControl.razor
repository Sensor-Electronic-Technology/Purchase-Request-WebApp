@using Webapp.Data
@if (this.File != null) {
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
        @*<RadzenFileInput TValue="byte[]" 
                         class="rz-w-50"
                         @bind-FileName="@this._fileName"
                         @bind-Value="@this._fileData"
                         @bind-FileSize="@this._fileSize"
                         Change="@(args => FileChangeHandler(this._fileData, this._fileName, this._fileSize))"
                         Accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"/>*@
        @if (!this._fileSelected) {
            <RadzenUpload @ref="@this._upload" 
                          Accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png" 
                          Change="@OnChangeHandler" 
                          Auto="false"
                          class="rz-w-50"
                          Multiple="false"/>
        } else {
            <RadzenText Text="@this._fileName" TextAlign="TextAlign.Center"/>
        }

        <RadzenButton Icon="close" Click="@(()=>this.RemoveFile.InvokeAsync(this.Index))"/>
    </RadzenStack>

}


@code {
    [Inject] public NotificationService _notifyService { get; set; }
    [Parameter] public TempFileData? File { get; set; }
    [Parameter] public int Index { get; set; }
    [Parameter] public EventCallback<(TempFileData file,int index)> AddFile { get; set; }
    [Parameter] public EventCallback<int> RemoveFile { get; set; }
    
    private string _fileName = string.Empty;
    private byte[]? _fileData = null;
    private long? _fileSize = 0;
    private RadzenUpload _upload = new();
    bool _fileSelected = false;

    protected override Task OnParametersSetAsync() {
        this._fileData = this.File?.Data;
        this._fileName = this.File?.Filename ?? string.Empty;
        this._fileSize = this.File?.Size ?? 0;
        if (this._fileData!=null && this._fileData.Any()) {
            this._fileSelected = true;
        }
        
        return base.OnParametersSetAsync();
    }

    private Task FileChangeHandler(byte[]? data, string? fileName, long? fileSize) {
        if(data==null || fileName==null || fileSize==null) {
             return this.RemoveFile.InvokeAsync(this.Index);
        } else {
            this.File.Data=data;
            this.File.Filename=fileName;
            this.File.Size=fileSize.Value;
            return this.AddFile.InvokeAsync(new ValueTuple<TempFileData, int>(this.File,this.Index));
        }
    }

    private async Task OnChangeHandler(UploadChangeEventArgs obj) {
        if (obj.Files.Any()) {
            var file=obj.Files.First();
            long maxSize = 10* 1024 * 1024;
            if(file.Size>maxSize) {
                this._notifyService.Notify(NotificationSeverity.Error,
                    "File too large",
                    $"The file({file.Name}) is too large." +
                    " Files must be less than or equal to 10MB." +
                    $"File size: {Math.Round(file.Size/1E6,2)}MB",duration:10000);
                await this._upload.RemoveFile(file.Name);
            } else {
                await using var stream=file.OpenReadStream(maxSize);
                using var streamContent = new StreamContent(stream);
                this.File.Filename = file.Name;
                this.File.Data=await streamContent.ReadAsByteArrayAsync();
                this.File.Size=file.Size;
                await this.AddFile.InvokeAsync(new ValueTuple<TempFileData, int>(this.File,this.Index));
                this._fileSelected = true;
            }
        } else {
            this._fileSelected=false;
            await this.RemoveFile.InvokeAsync(this.Index);
        }
    }

}