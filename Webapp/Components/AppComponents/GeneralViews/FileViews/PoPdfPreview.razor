@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.Pdf
@using QuestPDF.Fluent

@*@if (this._fileBytes != null) {
    <RadzenStack>
        <RadzenRow JustifyContent="JustifyContent.Start">
            <RadzenButton Text="Download" Click="DownloadHandler"
                          Size="ButtonSize.Small"
                          class="button-transparent"
                          Image="/images/download-icon.svg"/>
        </RadzenRow>
        <PdfPreview FileBytes="@this._fileBytes"/>
    </RadzenStack>
    
}*@
<PdfPreview FileBytes="@this._fileBytes" FileName="PurchaseOrder.pdf"/>

@code {
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private IBlazorDownloadFileService _downloadService { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    private bool _prNull = true;
    private byte[]? _fileBytes;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        if (this.PurchaseRequest != null) {
            if (this._prNull) {
                var document = new PurchaseOrderDocument(this.PurchaseRequest.ToPurchaseOrderDto(), Path.Combine($"{this._environment.WebRootPath}", "images/seti_logo.png"));
                this._fileBytes = document.GeneratePdf();
                this._prNull = false;
            }
        } else {
            this._prNull = true;
        }
    }
    
    /*private async Task DownloadHandler() {
        await this._downloadService.DownloadFile("PurchaseOrder.pdf", this._fileBytes, "application/pdf");
        
    }*/

}