@using SetiFileStore.FileClient
@using Webapp.Data
<RadzenCard class="info-area rz-p-2" >
    <RadzenStack>
        <RadzenCard class="area-header">
            <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
               Press the + button to add a quote
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
                ** Files cannot be encrypted **
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                Acceptable file types: .pdf, .doc, .docx, .xls, .xlsx, .jpg, .jpeg, .png
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                Maximum file size: 10MB
            </RadzenText>
        </RadzenCard>
        <RadzenCard>
            <RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.Center"
                             AlignItems="AlignItems.Center">
                    <RadzenButton Icon="Add"
                                  Click="@this.AddFile"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Size="ButtonSize.Medium" 
                                  @onclick:stopPropagation="true"/>
                    <RadzenLabel>Add Quote</RadzenLabel>
                </RadzenStack>
                <RadzenStack>
                    @{
                        int count = 0;
                        @foreach (var file in this._tempFiles) {
                            int index = count;
                            <RadzenStack>
                                <FileInputItem File="@file" Index="@index"
                                               RemoveFile="@this.RemoveFileHandler"
                                               AddFile="@this.AddFileHandler"/>
                            </RadzenStack>
                            count++;
                        }
                    }

                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>
@code {
    [Inject] public NotificationService _notifyService { get; set; }
    [Parameter] public List<FileData> Quotes { get; set; } = [];
    [Parameter] public EventCallback<List<FileData>> QuotesChanged { get; set; }
    
    private RadzenUpload _upload = new();
    private List<TempFileData> _tempFiles = [];
    
    protected override Task OnParametersSetAsync() {
        if (this.Quotes.Any()) {
            this._tempFiles=this.Quotes.Select(e => new TempFileData() { Data = e.Data, Filename = e.Name }).ToList();
        }
        return base.OnParametersSetAsync();
    }
    private void AddFile() {
        if (this._tempFiles.All(e=>e.Data!=null)) {
            this._tempFiles.Add(new TempFileData());
        } else {
            this._notifyService.Notify(NotificationSeverity.Error,"Error","Please complete the current quote before adding another");
            
        }
    }
    private Task RemoveFileHandler(int index){
        if (this._tempFiles.Count == 1) {
            this._tempFiles.Clear();
            this.Quotes.Clear();
        } else {
            /*Console.WriteLine($"Removing file at index {index}, " +
                              $"TempCount: {this._tempFiles.Count}," +
                              $"QuoteCountL {this.Quotes.Count}");*/
            if(this._tempFiles.Count==this.Quotes.Count) {
                this._tempFiles.RemoveAt(index);
                this.Quotes.RemoveAt(index);
            } else {
                this._tempFiles.RemoveAt(index);
            }
        }
        /*Console.WriteLine("Quotes:");
        Console.WriteLine(string.Join(",", this.Quotes.Select(q => q.Name)));
        Console.WriteLine("Files:");
        Console.WriteLine(string.Join(",", this._tempFiles.Select(q => q.Filename)));*/
        return this.QuotesChanged.InvokeAsync(this.Quotes);
    }

    private Task AddFileHandler((TempFileData file, int index) fileResult) {
        this._tempFiles[fileResult.index]=fileResult.file;
        this.Quotes.Add(new FileData(fileResult.file.Filename,fileResult.file.Data));
        /*Console.WriteLine("Quotes:");
        Console.WriteLine(string.Join(",", this.Quotes.Select(q => q.Name)));
        Console.WriteLine("Files:");
        Console.WriteLine(string.Join(",", this._tempFiles.Select(q => q.Filename)));*/
        return this.QuotesChanged.InvokeAsync(this.Quotes);
    }
}