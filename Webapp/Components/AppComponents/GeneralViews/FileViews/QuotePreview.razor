@using ButtonSize = Radzen.ButtonSize
@using Orientation = Radzen.Orientation
@using Webapp.Data
@using BlazorBootstrap

<style>
    .bg-body-tertiary {
        background-color: var(--rz-secondary) !important;
    }
</style>
@if (this.FileBytes != null) {
    var extension = Path.GetExtension(this.FileName);
    /*Console.WriteLine($"Extension: {extension}");*/
    @if (FileDisplayType.PDF.Extensions.Contains(extension)) {
        <RadzenStack>
            <RadzenRow JustifyContent="JustifyContent.Start">
                <RadzenButton Text="Download" Click="DownloadHandler"
                              Size="ButtonSize.Small"
                              class="button-transparent"
                              Image="/images/download-icon.svg"
                              @onclick:stopPropagation="true"/>
            </RadzenRow>
            <PdfViewer Url="@this._embeddedSrc" Class="rz-m-0 rz-p-1 rz-overflow-scroll" Style="@this.GetStyle()"/>
        </RadzenStack>
    }else if (FileDisplayType.DOC.Extensions.Contains(extension)) {
        <RadzenStack>
            <RadzenRow JustifyContent="JustifyContent.Start">
                <RadzenButton Text="Download" Click="DownloadHandler"
                              Size="ButtonSize.Small"
                              class="button-transparent"
                              Image="/images/download-icon.svg"/>
            </RadzenRow>
            <DxRichEdit DocumentFormat="DocumentFormat.OpenXml"
                        BarMode="BarMode.Ribbon"
                        ViewType="ViewType.Simple"
                        ReadOnly="true"
                        DocumentContent="@this.FileBytes"
                        style="width: 100%"/>
        </RadzenStack>
    }else if (FileDisplayType.IMAGE.Extensions.Contains(extension)) {
        <RadzenStack>
            <RadzenRow JustifyContent="JustifyContent.Start">
                <RadzenButton Text="Download" Click="DownloadHandler"
                              Size="ButtonSize.Small"
                              class="button-transparent"
                              Image="/images/download-icon.svg"
                              @onclick:stopPropagation="true"/>
            </RadzenRow>
            <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(this.FileBytes)}")" AlternateText="quote" />
        </RadzenStack>
    } else {
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenCard>
                <RadzenText Text="Preview is only available for images, pdfs, and docs.  Please download to view"/>
            </RadzenCard>
            <RadzenButton Text="Download" Click="DownloadHandler"
                          Size="ButtonSize.Small"
                          class="button-transparent"
                          Image="/images/download-icon.svg"
                          @onclick:stopPropagation="true"/>
        </RadzenStack>
    }
}


@code {
    [Inject] private IBlazorDownloadFileService _downloadService { get; set; }
    [Parameter] public byte[]? FileBytes { get; set; }
    [Parameter] public string FileName { get; set; } = string.Empty;
    [Parameter] public bool SetMaxHeight { get; set; } = true;
    private bool _prNull = true;
    private string _embeddedSrc = string.Empty;
    private FileDisplayType _fileDisplayType = FileDisplayType.OTHER;
    
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }

    public string GetStyle() {
        return this.SetMaxHeight ? "max-height:700px;" : string.Empty;
    }

    protected override async Task OnParametersSetAsync() {
        var extension = Path.GetExtension(this.FileName);
        if (FileBytes is { Length: > 0 }) {
            if (this._prNull) {
                this._embeddedSrc = "data:application/pdf;base64," + Convert.ToBase64String(this.FileBytes);
                this._prNull = false;
            }
        } else {
            this._prNull = true;
            this._embeddedSrc = string.Empty;
        }
        await base.OnParametersSetAsync();
    }
    
    private async Task DownloadHandler() {
        await this._downloadService.DownloadFile(this.FileName, this.FileBytes,contentType:"application/octet-stream");
    }
}