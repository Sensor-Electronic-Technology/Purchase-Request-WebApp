@using SetiFileStore.FileClient
@using Webapp.Data
<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>
@switch (this.Mode) {
    case EditMode.NEW: {
        <RadzenCard Variant="Variant.Outlined" class="info-area">
            <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
                        Drag and drop files to upload
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
                        ** Files cannot be encrypted **
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                        Acceptable file types: .pdf, .doc, .docx, .xls, .xlsx, .jpg, .jpeg, .png
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                        Maximum file size: 10MB
                    </RadzenText>
            </RadzenCard>
            <RadzenUpload id="ddUpload"
                          @ref="@this._upload"
                          ChooseText="Drag and drop here or click to choose files to upload"
                          Accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
                          Auto="false"
                          Multiple="true"
                          Change="@this.OnClientChange"
                          InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                          Style="width: 100%"/>
        </RadzenCard>
        break;
    }
    case EditMode.EDIT: {
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Add Additional Quotes">
                    <RadzenCard Variant="Variant.Outlined" class="info-area">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
                                Drag and drop files to upload
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle1" TextAlign="TextAlign.Center">
                                ** Files cannot be encrypted **
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                                Acceptable file types: .pdf, .doc, .docx, .xls, .xlsx, .jpg, .jpeg, .png
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TextAlign="TextAlign.Center">
                                Maximum file size: 10MB
                            </RadzenText>
                        </RadzenCard>
                        <RadzenUpload id="ddUpload"
                                      @ref="@this._upload"
                                      ChooseText="Drag and drop here or click to choose files to upload"
                                      Auto="false"
                                      Multiple="true"
                                      Accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
                                      Change="@this.OnClientChange"
                                      InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                                      Style="width: 100%"/>
                    </RadzenCard>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Current Quotes">
                    <QuotesView Quotes="@this.CurrentQuoteIds" DeleteFile="DeleteQuoteHandler" Mode="@this.Mode"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
        break;
    }
    case EditMode.VIEW: {
        <QuotesView Quotes="@this.CurrentQuoteIds" Mode="@this.Mode"/>
        break;
    }
}


@code {
    [Inject] public NotificationService _notifyService { get; set; }
    [Parameter] public List<FileData> Quotes { get; set; } = [];
    [Parameter] public EditMode Mode { get; set; }
    [Parameter] public List<string> CurrentQuoteIds { get; set; }
    [Parameter] public EventCallback<List<string>> CurrentQuoteIdsChanged { get; set; }
    [Parameter] public EventCallback<List<FileData>> QuotesChanged { get; set; }
    private RadzenUpload _upload = new();
    
    async Task OnClientChange(UploadChangeEventArgs args) {
        foreach (var file in args.Files.ToList()) {
            long maxSize = 10* 1024 * 1024;
            if(file.Size>maxSize) {
                this._notifyService.Notify(NotificationSeverity.Error,
                    "File too large",
                    $"The file({file.Name}) is too large." +
                    " Files must be less than or equal to 10MB." +
                    $"File size: {Math.Round(file.Size/1E6,2)}MB",duration:10000);
                await this._upload.RemoveFile(file.Name);
            } else {
                await using var stream=file.OpenReadStream(maxSize);
                using var streamContent = new StreamContent(stream);
                this.Quotes.Add(new FileData(file.Name,await streamContent.ReadAsByteArrayAsync()));
            }
        }
        await this.QuotesChanged.InvokeAsync(this.Quotes);
    }

    private Task DeleteQuoteHandler(string obj) {
        this.CurrentQuoteIds.Remove(obj);
        StateHasChanged();
        return this.CurrentQuoteIdsChanged.InvokeAsync(this.CurrentQuoteIds);
    }

}