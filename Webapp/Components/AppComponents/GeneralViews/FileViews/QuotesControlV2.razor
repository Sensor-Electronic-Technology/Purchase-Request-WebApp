@using SetiFileStore.FileClient
@using Webapp.Services
@using Webapp.Data
<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>
@switch (this.Mode) {
    case EditMode.NEW: {
        <QuoteInput Quotes="@this.Quotes" QuotesChanged="@QuotesChanged"/>
        break;
    }
    case EditMode.EDIT: {
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Add Additional Quotes">
                    <QuoteInput Quotes="@this.Quotes" QuotesChanged="@QuotesChanged"/>  
                </RadzenTabsItem>
                <RadzenTabsItem Text="Current Quotes">
                    <QuotesView Quotes="@this.CurrentQuoteIds" DeleteFile="@this.DeleteQuoteHandler" Mode="@this.Mode"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
        break;
    }
    case EditMode.VIEW: {
        <QuotesView Quotes="@this.CurrentQuoteIds" Mode="@this.Mode"/>
        break;
    }
}


@code {
    [Inject] public NotificationService _notifyService { get; set; }
    [Inject] private SpinnerService _spinner { get; set; }
    [Parameter] public List<FileData> Quotes { get; set; } = [];
    [Parameter] public EditMode Mode { get; set; }
    [Parameter] public List<string> CurrentQuoteIds { get; set; }
    [Parameter] public EventCallback<List<string>> CurrentQuoteIdsChanged { get; set; }
    [Parameter] public EventCallback<List<FileData>> QuotesChanged { get; set; }
    
    private RadzenUpload _upload = new();
    private List<TempFileData> _tempFiles = [];

    protected override Task OnParametersSetAsync() {
        if (this.Quotes.Any()) {
            this._tempFiles=this.Quotes.Select(e => new TempFileData() { Data = e.Data, Filename = e.Name }).ToList();
        }
        return base.OnParametersSetAsync();
    }

    private Task DeleteQuoteHandler(string obj) {
        this.CurrentQuoteIds.Remove(obj);
        StateHasChanged();
        return this.CurrentQuoteIdsChanged.InvokeAsync(this.CurrentQuoteIds);
    }

    private void AddFile() {
        if (this._tempFiles.All(e=>e.Data!=null)) {
            this._tempFiles.Add(new TempFileData());
        } else {
            this._notifyService.Notify(NotificationSeverity.Error,"Error","Please complete the current quote before adding another");
            
        }
    }
    
    private Task RemoveFileHandler(int index){
        if (this._tempFiles.Count == 1) {
            this._tempFiles.Clear();
            this.Quotes.Clear();
        } else {
            if(this._tempFiles.Count==this.Quotes.Count) {
                this._tempFiles.RemoveAt(index);
                this.Quotes.RemoveAt(index);
            } else {
                this._tempFiles.RemoveAt(index);
            }
        }
        return this.QuotesChanged.InvokeAsync(this.Quotes);
    }

    private Task AddFileHandler((TempFileData file, int index) fileResult) {
        this._tempFiles[fileResult.index]=fileResult.file;
        if (fileResult.file is { Filename: not null, Data: not null }) {
            this.Quotes.Add(new FileData(fileResult.file.Filename, fileResult.file.Data));
        } 
        return this.QuotesChanged.InvokeAsync(this.Quotes);
    }

}