@using SetiFileStore.FileClient
@using Webapp.Data
<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>
<RadzenStack Orientation="Orientation.Vertical">
    <RadzenFormField Text="Additional Comments">
        <RadzenTextArea Placeholder="Enter any additional message you would like appended to the email"
                        Value="@this.AdditionalComments"
                        ValueChanged="@this.AdditionalCommentsChanged"
                        Style="width: 200px; height:100px;"/>
    </RadzenFormField>

    <RadzenColumn Size="12">
    @if (this.Mode == EditMode.NEW) {
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
            <RadzenUpload id="ddUpload"
                          ChooseText="Drag and drop here or click to choose files"
                          Auto="false"
                          Multiple="true"
                          Change="@this.OnClientChange"
                          InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                          Style="width: 100%"/>
        </RadzenCard>
    } else {
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Add Additional Quotes">
                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
                        <RadzenUpload id="ddUpload"
                                      ChooseText="Drag and drop here or click to choose files"
                                      Auto="false"
                                      Multiple="true"
                                      Change="@this.OnClientChange"
                                      InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                                      Style="width: 100%"/>
                    </RadzenCard>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Current Quotes">
                    <QuotesView Quotes="@this.CurrentQuoteIds"></QuotesView>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    }

    </RadzenColumn>
</RadzenStack>

@code {
    [Parameter] public List<FileData> Quotes { get; set; } = [];
    [Parameter] public List<string> CurrentQuoteIds { get; set; }
    [Parameter] public EditMode Mode { get; set; }
    [Parameter] public string? AdditionalComments { get; set; }
    
    [Parameter] public EventCallback<List<FileData>> QuotesChanged { get; set; }
    [Parameter] public EventCallback<string?> AdditionalCommentsChanged { get; set; }
    
    async Task OnClientChange(UploadChangeEventArgs args) {
        foreach (var file in args.Files.ToList()) {
            await using var stream=file.OpenReadStream();
            using var streamContent = new StreamContent(stream);
            this.Quotes.Add(new FileData(file.Name,await streamContent.ReadAsByteArrayAsync()));
        }
        await this.QuotesChanged.InvokeAsync(this.Quotes);
    }
}