@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Infrastructure.Services
@using Webapp.Data

<RadzenFieldset Text="Department" Style="text-align: center">
    <RadzenDropDown TValue="Department"
                    Data="@this._departments"
                    Value="@this.Department"
                    ValueChanged="@this.DepartmentChangedHandler"
                    Placeholder="Select a department"
                    TextProperty="Name"
                    AllowClear="true"/>
</RadzenFieldset>

@if (Mode == EditMode.VIEW) {
    @*<AuthorizeView>
        <AuthorizeView Roles="@PurchaseRequestRole.Approver">

        </AuthorizeView>
    </AuthorizeView>
    <AuthorizeView>
        <AuthorizeView Roles="@PurchaseRequestRole.Approver,@PurchaseRequestRole.Requester">
            <RadzenFieldset Text="Department" Style="text-align: center">
                <RadzenDropDown TValue="Department"
                                Data="@this._departments"
                                Value="@this.Department"
                                ValueChanged="@this.DepartmentChanged"
                                Placeholder="Select a department"
                                TextProperty="Name"
                                AllowClear="true"/>
            </RadzenFieldset>
        </AuthorizeView>
    </AuthorizeView>*@
} else {
    
}





@code {
    [Inject] private DepartmentDataService _departmentDataService { get; set; }
    
    [Parameter] public Department? Department { get; set; }
    [Parameter] public EventCallback<Department?> DepartmentChanged { get; set; }
    [Parameter] public EditMode Mode { get; set; } = EditMode.VIEW;
    private List<Department> _departments { get; set; } = new();
    
    protected override async Task OnInitializedAsync() { 
        await base.OnInitializedAsync();
        this._departments = await this._departmentDataService.GetDepartments();
    }
    
    private async Task DepartmentChangedHandler(Department? department) {
        this.Department = department;
        await this.DepartmentChanged.InvokeAsync(department);
    }

}