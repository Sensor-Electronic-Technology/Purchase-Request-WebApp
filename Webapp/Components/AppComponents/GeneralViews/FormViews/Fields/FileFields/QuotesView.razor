@using SetiFileStore.FileClient
@using DevExpress.Blazor.PdfViewer;
@using SetiFileStore.Domain.Contracts
@using SetiFileStore.Domain.Contracts.Responses
@inject IJSRuntime JSRuntime;


@using Webapp.Data

@if(this.Quotes==null || !this.Quotes.Any()) {
    <RadzenText Text="Purchase request has no quotes"/>
} else {
    <RadzenCard class="info-area">
        <RadzenStack>
            <RadzenCard class="area-header" Style="background: #1861ac">
                <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6">Quotes</RadzenText>
                <RadzenText TextAlign="TextAlign.Center">Click file icon to preview quote</RadzenText>
            </RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal">
                @foreach (var fileInfo in this._fileInfos) {
                string fileName = fileInfo.Name;
                string fileId = fileInfo.FileId;
                string url = fileInfo.Url;
                <RadzenCard>
                    <RadzenStack AlignItems="AlignItems.Center">
                        <RadzenButton Image="/images/file-icon.svg"
                                      class="rz-ripple"
                                      Style="background-color:rgb(0,0,0,0); opacity: 100%;"
                                      Click="@(async Task () => await this.ViewFileHandler(fileName, fileId))">
                            <ChildContent>
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0">
                                    <RadzenImage Path="/images/file-icon.svg"
                                                 AlternateText="Click to view"
                                                 Style="width: 50px;height: 75px;"/>
                                    <RadzenLabel Text="@fileName"/>
                                </RadzenStack>
                            </ChildContent>
                        </RadzenButton>

                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenLink Path="@url"
                                        target="_blank">
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0">
                                    <RadzenImage Path="/images/download-icon.svg" Style="width: 30px;height: 50px;"/>
                                    <RadzenLabel>Download</RadzenLabel>
                                </RadzenStack>
                            </RadzenLink>
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center"
                                         Gap="0" Visible="@(this.Mode==EditMode.EDIT)">
                                <RadzenButton Style="background-color:rgb(0,0,0,0); opacity: 100%;"
                                              Click="@(async Task ()=>await this.DeleteFileHandler(fileName,fileId))"
                                              class="rz-ripple">
                                    <ChildContent>
                                        <RadzenImage Path="/images/delete-icon.svg"
                                                     Style="width: 30px;height: 50px;"/>
                                        <RadzenLabel Text="Delete"/>
                                    </ChildContent>
                                </RadzenButton>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                }
            </RadzenStack>
            @if (this._loading) {
            <RadzenStack>
                <RadzenProgressBarCircular ShowValue="false"
                                           Mode="ProgressBarMode.Indeterminate"
                                           Size="ProgressBarCircularSize.Large"
                                           Style="margin: auto; background: transparent; display: block;">
                </RadzenProgressBarCircular>
                <RadzenText Text="Loading Quotes"
                            Style="color: white;
                             font-size: 20px; 
                             font-weight: bold;"/>
            </RadzenStack>
            } else {
            <RadzenTabs>
                <Tabs>
                    @foreach (var file in this._files) {
                    <RadzenTabsItem Text="@file.Name">
                        <ChildContent>
                            <PdfPreview FileBytes="@file.Data"/>
                        </ChildContent>
                    </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
            }
        </RadzenStack>
    </RadzenCard>
    
}


@code {
    [Inject] private FileService _fileService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private IConfiguration _configuration { get; set; }
    [Parameter] public IEnumerable<string>? Quotes { get; set; } = [];
    [Parameter] public EditMode Mode { get; set; }
    [Parameter] public EventCallback<string> DeleteFile { get; set; } 
    bool _loading = true;
    private List<FileData> _files = [];
    private List<ViewFileInfo> _fileInfos = new();
    

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        if(this.Quotes!=null && this.Quotes.Any()) {
            foreach(var fileId in this.Quotes) {
                var fileInfo = await this._fileService.GetFileInfo(fileId,"purchase_request");
                var url = this._configuration["FileServiceUrl"];
                url+=HttpConstants.FileDownloadInlinePath
                .Replace("{appDomain}", "purchase_request")
                .Replace("{fileId}", fileId);
                if(fileInfo!=null) {
                    this._fileInfos.Add(new ViewFileInfo(fileInfo.Filename, fileId,url));
                }
            }
        }
        this._loading = false;
    }

    private async Task ViewFileHandler(string name,string fileId) {
        if(this._files.FirstOrDefault(e=>e.Name==name)!=null) {
            return;
        }
        this._loading = true;
        //await InvokeAsync(StateHasChanged);
        
        var fileData = await this._fileService.DownloadFileStream(fileId,"purchase_request");
        if(fileData!=null) {
            this._files.Add(fileData);
        }
        this._loading = false;
        //await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteFileHandler(string name,string fileId) {
        this._files.RemoveAll(e=>e.Name==name);
        this._fileInfos.RemoveAll(e=>e.FileId==fileId);
        await InvokeAsync(StateHasChanged);
        await this.DeleteFile.InvokeAsync(fileId);
    }

    private string GetText(string quote) {
        return quote;
    }
}