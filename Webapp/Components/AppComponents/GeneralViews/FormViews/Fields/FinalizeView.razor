@using Domain.PurchaseRequests.Dto
@using Infrastructure.Services
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data

@if (this.PurchaseRequestInput == null) {
    <p>Loading....</p>
} else {
    <RadzenStack Orientation="Orientation.Vertical" Gap="20">
        <RadzenStack Orientation="Orientation.Horizontal"
                     JustifyContent="JustifyContent.Center" Gap="20">
            <RadzenButton Text="@(this.Mode == EditMode.EDIT ? "Update" : "Submit")"
                          ButtonStyle="ButtonStyle.Success"
                          Icon="save"
                          Click="@this.SaveClicked"
                          Disabled="@(!this.CanSave)"
                          Style="width: 180px; height: 50px;"/>
            <RadzenButton Text="@(this.Mode == EditMode.EDIT ? "Cancel Update" : "Cancel Create")"
                          ButtonStyle="ButtonStyle.Danger"
                          Click="@this.CancelClicked"
                          Icon="cancel"
                          Style="width: 180px; height: 50px;"/>
        </RadzenStack>
        <AlertListView RequestAlerts="@this.RequestAlerts"/>
        <EmailPickList CcList="@this.PurchaseRequestInput.EmailCcList"
                       CcListChanged="@EmailListChangedHandler"
                       IsCollapsed="false"/>
        <RadzenRow RowGap="5">
            <RadzenColumn Size="6" SizeMD="6">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenText Text="Request Preview"
                                    TextStyle="TextStyle.H5"
                                    TextAlign="TextAlign.Center"/>
                    </RadzenCard>
                    <PrPdfPreview PurchaseRequestInput="@this.PurchaseRequestInput"/>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="6" SizeMD="6">
                <RadzenStack>
                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenText Text="Email Preview" TextStyle="TextStyle.H5" TextAlign="TextAlign.Center"/>
                    </RadzenCard>
                    <DxRichEdit @ref="@this._richEdit"
                                @bind-DocumentContent="@this.DocumentContent"
                                DocumentLoaded="@this.DocumentLoadedHandler"
                                DocumentFormat="DocumentFormat.OpenXml"
                                BarMode="BarMode.None"
                                ViewType="ViewType.Simple"
                                ReadOnly="false">
                        <MailMergeSettings>
                            <DxMailMergeSettings Data="@this.MailMerge"
                                                 ViewMergedData="true"
                                                 ActiveRecord="1"/>
                        </MailMergeSettings>
                    </DxRichEdit>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
    
}

@code {
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private AuthApiService _authService { get; set; }
    [Parameter] public PurchaseRequestInput? PurchaseRequestInput { get; set; }
    [Parameter] public EventCallback<PurchaseRequestInput?> PurchaseRequestInputChanged { get; set; }
    [Parameter] public bool DocLoaded { get; set; }
    [Parameter] public bool CanSave { get; set; }
    [Parameter] public List<RequestAlert> RequestAlerts { get; set; } = [];
    [Parameter] public byte[] DocumentContent { get; set; }
    [Parameter] public byte[] MailDocument { get; set; }
    [Parameter] public EditMode Mode { get; set; }
 
    [Parameter] public EventCallback<bool> DocLoadedChanged { get; set; }
    [Parameter] public EventCallback<byte[]> MailDocumentChanged { get; set; }
    
    [Parameter] public EventCallback SaveClicked { get; set; }
    [Parameter] public EventCallback CancelClicked { get; set; }
    
    DxRichEdit _richEdit;
    
    private List<RequestMailMerge> MailMerge { get; set; } = [];

    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this.DocumentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/RequestTemplate.docx");
    }

    protected override Task OnParametersSetAsync() {
        this.MailMerge = [new RequestMailMerge() {
            PrAction = "Approval Requested",
            Title = this.PurchaseRequestInput?.Title ?? "",
            Approver = this.PurchaseRequestInput?.ApproverName ?? "",
            Requester = this.PurchaseRequestInput?.RequesterName ?? "",
            PrLink = this.PurchaseRequestInput?.PrUrl ?? "",
            Description = this.PurchaseRequestInput?.Description ?? "",
            AdditionalComments = this.PurchaseRequestInput?.AdditionalComments ?? "",
        }];
        return base.OnParametersSetAsync();
    }

    private async Task DocumentLoadedHandler(Document obj) {
        if(this.PurchaseRequestInput == null) {
            return;
        }
        this.DocLoaded = true;
        this.PurchaseRequestInput.EmailTemplate=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        await this.PurchaseRequestInputChanged.InvokeAsync(this.PurchaseRequestInput);
        await this.DocLoadedChanged.InvokeAsync(this.DocLoaded);
    }

    private async Task EmailListChangedHandler(List<string> obj) {
        if(this.PurchaseRequestInput == null) {
            return;
        }
        this.PurchaseRequestInput.EmailCcList=obj;
        await this.PurchaseRequestInputChanged.InvokeAsync(this.PurchaseRequestInput);
    }

}