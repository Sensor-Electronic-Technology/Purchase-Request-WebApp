@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data

<RadzenCard class="step-card">
    @if (this.PurchaseRequestInput == null) {
    <p>Loading....</p>
    } else {
        <RadzenRow>
            <RadzenColumn Size="6">
                <RadzenStack Orientation="Orientation.Vertical" Gap="20">
                    <RadzenCard class="area-header">
                        <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">
                            <RadzenIcon Icon="attach_email"/><b>Finalize</b>
                        </RadzenText>
                        <RadzenText Text="Check the preview(s) before submitting"
                                    TextAlign="TextAlign.Center"
                                    TextStyle="TextStyle.Subtitle1"/>
                    </RadzenCard>
                    <RadzenRow JustifyContent="JustifyContent.Center">
                        <RadzenFieldset Text="Submit/Cancel" Style="width: fit-content;">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="10">
                                <RadzenButton Text="@this.GetSubmitButtonText()"
                                              ButtonStyle="ButtonStyle.Success"
                                              Icon="save"
                                              Click="@this.SaveClicked"
                                              Disabled="@(!this.CanSave || !this.DocLoaded)"
                                              Style="width: 180px; height: 50px;"/>
                                <RadzenButton Text="@(this.Mode == EditMode.EDIT ? "Cancel Update" : "Cancel Create")"
                                              ButtonStyle="ButtonStyle.Danger"
                                              Click="@this.CancelClicked"
                                              Icon="cancel"
                                              Style="width: 180px; height: 50px;"/>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenRow>
                    <AlertListView UserActionAlerts="@this.RequestAlerts"/>
                    @*<RadzenFieldset Text="Email Recipients">
                        <RadzenText TextStyle="TextStyle.H6" Text="Emails will be sent to the following users:"/>
                        <RadzenText Text="@String.Join(" , ", this._emailList)" TextStyle="TextStyle.Subtitle1"/>
                    </RadzenFieldset>*@
                    @*<EmailPickList CcList="@this.PurchaseRequestInput.EmailCcList"
                                   CcListChanged="@EmailListChangedHandler"
                                   IsCollapsed="false"/>*@
                    <EmailRecipientView EmailList="@this._emailList" @bind-EmailCcList="@this.PurchaseRequestInput.EmailCcList"/>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Email Preview" class="tab-color-1 rz-ripple">
                            <RadzenStack>
                                <RadzenCard class="area-header">
                                    <RadzenText Text="Email Preview"
                                                TextStyle="TextStyle.H6"
                                                TextAlign="TextAlign.Center"/>
                                </RadzenCard>
                                <DxRichEdit @ref="@this._richEdit"
                                            @bind-DocumentContent="@this.DocumentContent"
                                            DocumentLoaded="@this.DocumentLoadedHandler"
                                            DocumentFormat="DocumentFormat.OpenXml"
                                            BarMode="BarMode.None"
                                            ViewType="ViewType.Simple"
                                            ReadOnly="false"
                                            style="width: 100%">
                                    <MailMergeSettings>
                                        <DxMailMergeSettings Data="@this.MailMerge"
                                                             ViewMergedData="true"
                                                             ActiveRecord="1"/>
                                    </MailMergeSettings>
                                </DxRichEdit>
                            </RadzenStack>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Purchase Request Pdf" class="tab-color-2 rz-ripple">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenCard class="area-header">
                                    <RadzenText Text="Request Preview"
                                                TextStyle="TextStyle.H5"
                                                TextAlign="TextAlign.Center"/>
                                </RadzenCard>
                                <PrPdfPreview PurchaseRequestInput="@this.PurchaseRequestInput"/>
                            </RadzenStack>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenColumn>
        </RadzenRow>

    }
</RadzenCard>



@code {
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Parameter] public PurchaseRequestInput? PurchaseRequestInput { get; set; }
    [Parameter] public EventCallback<PurchaseRequestInput?> PurchaseRequestInputChanged { get; set; }
    [Parameter] public bool DocLoaded { get; set; }
    [Parameter] public bool CanSave { get; set; }
    [Parameter] public List<UserActionAlert> RequestAlerts { get; set; } = [];
    [Parameter] public byte[] DocumentContent { get; set; }
    [Parameter] public byte[] MailDocument { get; set; }
    [Parameter] public EditMode Mode { get; set; }
    [Parameter] public bool RepeatEdit { get; set; }
 
    [Parameter] public EventCallback<bool> DocLoadedChanged { get; set; }
    [Parameter] public EventCallback<byte[]> MailDocumentChanged { get; set; }
    
    [Parameter] public EventCallback SaveClicked { get; set; }
    [Parameter] public EventCallback CancelClicked { get; set; }
    
    DxRichEdit _richEdit;
    
    private List<RequestMailMerge> MailMerge { get; set; } = [];
    private List<string> _emailList = [];
    private List<string> _ccList = [];

    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this.DocumentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/RequestTemplate.docx");
        if(this.PurchaseRequestInput != null) {
            this._emailList.Add(this.PurchaseRequestInput.RequesterEmail ?? "Requester Email");
            this._emailList.Add(this.PurchaseRequestInput.ApproverEmail ?? "Approver Email");
        }
    }

    protected override Task OnParametersSetAsync() {
        this.MailMerge = [new RequestMailMerge() {
            PrAction = this.Mode!=EditMode.EDIT ? "Approval Requested - Modified":"Approved Requested",
            Title = this.PurchaseRequestInput?.Title ?? "",
            Approver = this.PurchaseRequestInput?.ApproverName ?? "",
            Requester = this.PurchaseRequestInput?.RequesterName ?? "",
            PrLink = this.PurchaseRequestInput?.PrUrl ?? "",
            Description = this.PurchaseRequestInput?.Description ?? "",
            AdditionalComments = this.PurchaseRequestInput?.AdditionalComments ?? "",
        }];
        return base.OnParametersSetAsync();
    }

    private string GetSubmitButtonText() {
        if (this.Mode == EditMode.NEW) {
            return "Submit";
        } else {
            return this.RepeatEdit ? "Submit New" : "Update";
        }
    }
    
    private string GetCancelButtonText() {
        if (this.Mode == EditMode.NEW) {
            return "Cancel Create";
        } else {
            return this.RepeatEdit ? "Cancel Repeat" : "Cancel Update";
        }
    }

    private async Task DocumentLoadedHandler(Document obj) {
        if(this.PurchaseRequestInput == null) {
            return;
        }
        this.DocLoaded = true;
        this.PurchaseRequestInput.EmailTemplate=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        await this.PurchaseRequestInputChanged.InvokeAsync(this.PurchaseRequestInput);
        await this.DocLoadedChanged.InvokeAsync(this.DocLoaded);
        await InvokeAsync(StateHasChanged);
    }

    private async Task EmailListChangedHandler(List<string> obj) {
        if(this.PurchaseRequestInput == null) {
            return;
        }
        this.PurchaseRequestInput.EmailCcList=obj;
        await this.PurchaseRequestInputChanged.InvokeAsync(this.PurchaseRequestInput);
    }

}