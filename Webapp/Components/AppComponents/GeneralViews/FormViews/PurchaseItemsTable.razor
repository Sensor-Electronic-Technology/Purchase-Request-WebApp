@using System.Globalization
@using Domain.PurchaseRequests.Model
@using Webapp.Data

<RadzenCard class="step-card">
    <RadzenStack Orientation="Orientation.Vertical" Gap="10">
        @if (this.ShowHeader) {
            @if (this.Mode != EditMode.VIEW) {
                <RadzenCard class="area-header">
                    <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" class="rz-m-0">
                        <RadzenIcon Icon="shopping_cart" class="rz-me-1"/><b>Purchase Items</b>
                    </RadzenText>
                    <RadzenText Text="Enter items to be purchases"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.Subtitle1"/>
                </RadzenCard>
            } else {
                <RadzenStack>
                    <RadzenCard class="area-header">
                        <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">
                            <RadzenIcon Icon="shopping_cart"/><b>Purchase Items</b>
                        </RadzenText>
                    </RadzenCard>
                </RadzenStack>
            }
        }
        <RadzenStack>
            <RadzenDataGrid @ref="_requestsGrid"
                            TItem="PurchaseItem"
                            AllowAlternatingRows="false" AllowFiltering="false"
                            AllowPaging="false" AllowSorting="false"
                            GridLines="DataGridGridLines.Both"
                            AllowColumnResize="true"
                            Density="Density.Compact"
                            ColumnWidth="400px"
                            EditMode="@editMode"
                            Data="@PurchaseItems" RowUpdate="@OnUpdateRow"
                            RowCreate="@OnCreateRow" Sort="@Reset"
                            Page="@Reset" Filter="@Reset">
                <HeaderTemplate>
                    @if (this.Mode != EditMode.VIEW) {
                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle"
                                      Text="Add New Purchase Item"
                                      Click="@InsertRow"
                                      Disabled="@(editMode == DataGridEditMode.Single && itemsToInsert.Any())"/>
                    }
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="Quantity" Title="Qty" Width="10%">
                        <EditTemplate Context="purchaseItem">
                            <RadzenNumeric Value="@purchaseItem.Quantity"
                                           Min="1"
                                           ShowUpDown="false"
                                           ValueChanged="@((int value) => { purchaseItem.Quantity = value; purchaseItem.TotalCost = purchaseItem.Quantity * purchaseItem.UnitCost; })"
                                           Style="width:100%" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Quantity" } })"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="ProductName" Title="ProductDescription/PartNumber" Width="30%">
                        <EditTemplate Context="purchaseItem">
                            <RadzenTextBox @bind-Value="purchaseItem.ProductName" Style="width:100%"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Hyperlink" Title="Hyperlink(Optional)" Width="10%">
                        <EditTemplate Context="purchaseItem">
                            <RadzenTextBox @bind-Value="purchaseItem.Hyperlink" Style="width:100%;font-size: 16px;"/>
                        </EditTemplate>
                        <Template Context="purchaseItem">
                            @if (!string.IsNullOrWhiteSpace(purchaseItem.Hyperlink)) {
                                <a href="@purchaseItem.Hyperlink" target="_blank" style="font-size: 16px;">Link to Item</a>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="UnitCost" Title="Unit Cost" Width="15%">
                        <Template Context="purchaseItem">
                            @String.Format(new CultureInfo("en-US"), "{0:C}", purchaseItem.UnitCost)
                        </Template>
                        <EditTemplate Context="purchaseItem">
                            <RadzenNumeric Value="purchaseItem.UnitCost"
                                           Format="c"
                                           ShowUpDown="false"
                                           Culture="@(new CultureInfo("en-us"))"
                                           ValueChanged="@((decimal value) => { purchaseItem.UnitCost = value; purchaseItem.TotalCost = purchaseItem.Quantity * purchaseItem.UnitCost; })"
                                           Style="width:100%" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Unit Cost" } })"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="TotalCost" Title="Total" Width="15%">
                        <Template Context="purchaseItem">
                            @String.Format(new CultureInfo("en-US"), "{0:C}", purchaseItem.TotalCost)
                        </Template>
                    </RadzenDataGridColumn>
                    @if (this.Mode != EditMode.VIEW) {
                        <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" Width="20%" FrozenPosition="FrozenColumnPosition.Right">
                            <Template Context="purchaseItem">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat" Size="ButtonSize.Medium"
                                              Click="@((_) => EditRow(purchaseItem))" @onclick:stopPropagation="true"/>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete"
                                              Variant="Variant.Flat" Shade="Shade.Lighter"
                                              Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                              Click="@((_) => DeleteRow(purchaseItem))" @onclick:stopPropagation="true"/>
                            </Template>
                            <EditTemplate Context="purchaseItem">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                              Variant="Variant.Flat" Size="ButtonSize.Medium"
                                              Click="@((_) => SaveRow(purchaseItem))" aria-label="Save">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                              Click="@((_) => CancelEdit(purchaseItem))" aria-label="Cancel"/>

                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete"
                                              Variant="Variant.Flat" Shade="Shade.Lighter"
                                              Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                                              Click="@(_ => DeleteRow(purchaseItem))" aria-label="Delete"/>

                            </EditTemplate>
                        </RadzenDataGridColumn>
                    }
                </Columns>
            </RadzenDataGrid>
            <RadzenStack AlignItems="AlignItems.End">
                <RadzenText TextStyle="TextStyle.H6"><strong>Total: @String.Format(new CultureInfo("en-US"), "{0:C}", this.PurchaseItems.Sum(e => e.TotalCost))</strong></RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>

</RadzenCard>



@code {
    [Parameter] public List<PurchaseItem> PurchaseItems { get; set; } = [];
    [Parameter] public EventCallback<List<PurchaseItem>> PurchaseItemsChanged { get; set; }
    [Parameter] public EditMode Mode { get; set; } = EditMode.VIEW;
    [Parameter] public bool ShowHeader { get; set; } = true;
    RadzenDataGrid<PurchaseItem> _requestsGrid;
    List<PurchaseItem> itemsToInsert = new List<PurchaseItem>();
    List<PurchaseItem> itemsToUpdate = new List<PurchaseItem>();
    DataGridEditMode editMode = DataGridEditMode.Single;
    
    void Reset() {
        itemsToInsert.Clear();
        itemsToUpdate.Clear();
    }

    void Reset(PurchaseItem purchaseItem) {
        itemsToInsert.Remove(purchaseItem);
        itemsToUpdate.Remove(purchaseItem);
        InvokeAsync(StateHasChanged);
    }
    
    async Task EditRow(PurchaseItem purchaseItem) {
        if (itemsToInsert.Count > 0) {
            Reset();
        }
        itemsToUpdate.Add(purchaseItem);
        await _requestsGrid.EditRow(purchaseItem);
    }

    void OnUpdateRow(PurchaseItem purchaseItem) {
        Reset(purchaseItem);
    }

    async Task SaveRow(PurchaseItem purchaseItem) {
        await _requestsGrid.UpdateRow(purchaseItem);
    }

    void CancelEdit(PurchaseItem purchaseItem) {
        Reset(purchaseItem);
        _requestsGrid.CancelEditRow(purchaseItem);
    }
    
    Task DeleteRow(PurchaseItem purchaseItem) {
        this.Reset(purchaseItem);
        if(this.PurchaseItems.Contains(purchaseItem)) {
            this.PurchaseItems.Remove(purchaseItem);
            this._requestsGrid.Reload();
        } else {
            this._requestsGrid.CancelEditRow(purchaseItem);
        }
        return Task.CompletedTask;
    }

    async Task InsertRow() {
        this.Reset();
        var purchaseItem = new PurchaseItem();
        itemsToInsert.Add(purchaseItem);
        await _requestsGrid.InsertRow(purchaseItem);
    }

    void OnCreateRow(PurchaseItem purchaseItem) {
        this.PurchaseItems.Add(purchaseItem);
        itemsToInsert.Remove(purchaseItem);
    }
}