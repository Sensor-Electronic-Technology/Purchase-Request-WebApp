@using SetiFileStore.FileClient
@using DevExpress.Blazor.PdfViewer;
@using SetiFileStore.Domain.Contracts
@using SetiFileStore.Domain.Contracts.Responses
@inject IJSRuntime JSRuntime;

@using Webapp.Data

@if(this.Quotes==null || !this.Quotes.Any()) {
    <RadzenText Text="Purchase request has no quotes"/>
} else {
    <RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            @foreach(var fileInfo in this._fileInfos) {
                string fileName = fileInfo.Name;
                string fileId = fileInfo.FileId;
                <RadzenStack>
                    <div class="rz-ripple align-content-center justify-content-center">
                        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0">
                            
                            <RadzenImage Path="/images/file-icon.svg" AlternateText="Click to view" Style="width: 50px;height: 75px;"
                                         Click="@(async Task()=>await this.ViewFileHandler(fileName,fileId))"/>
                            <RadzenLabel Text="@fileName"/>
                            
                        </RadzenStack>
                    </div>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        
                        <RadzenLink Path="@fileInfo.Url"
                                    target="_blank">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                <RadzenImage Path="/images/download-icon.svg" Style="width: 50px;height: 75px;"/>
                                <RadzenLabel>Download</RadzenLabel>
                            </RadzenStack>
                        </RadzenLink>

                    </RadzenStack>
                </RadzenStack>
            }
        </RadzenStack>
        @if(this._loading) {
            <RadzenStack>
                <RadzenProgressBarCircular ShowValue="false"
                                           Mode="ProgressBarMode.Indeterminate"
                                           Size="ProgressBarCircularSize.Large"
                                           Style="margin: auto; background: transparent; display: block;">
                </RadzenProgressBarCircular>
                <RadzenText Text="Loading Quotes"
                            Style="color: white;
                             font-size: 20px; 
                             font-weight: bold;"/>
            </RadzenStack>
        }else{
            <RadzenTabs>
                <Tabs>
                    @foreach(var file in this._files) {
                        <RadzenTabsItem>
                            <Template>
                                <RadzenStack>
                                    <RadzenButton Icon="delete"/>
                                </RadzenStack>
                            </Template>
                            <ChildContent>
                                <RadzenText Text="@file.Name"/>
                                <DxPdfViewer DocumentContent="@file.Data"/>
                            </ChildContent>
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
        }
    </RadzenStack>
}


@code {
    [Inject] private FileService _fileService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Parameter] public IEnumerable<string>? Quotes { get; set; } = [];
    bool _loading = true;
    private List<FileData> _files = [];
    private List<ViewFileInfo> _fileInfos = new();
    

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        if(this.Quotes!=null && this.Quotes.Any()) {
            foreach(var fileId in this.Quotes) {
                var fileInfo = await this._fileService.GetFileInfo(fileId);
                var url = "http://172.20.4.15:8080";
                url+=HttpConstants.FileDownloadInlinePath
                .Replace("{appDomain}", "purchase_request")
                .Replace("{fileId}", fileId);
                if(fileInfo!=null) {
                    this._fileInfos.Add(new ViewFileInfo(fileInfo.Filename, fileId,url));
                }
            }
        }
        this._loading = false;
    }

    public async Task ViewFileHandler(string name,string fileId) {
        if(this._files.FirstOrDefault(e=>e.Name==name)!=null) {
            return;
        }
        this._loading = true;
        await InvokeAsync(StateHasChanged);
        
        var fileData = await this._fileService.DownloadFileStream(fileId);
        if(fileData!=null) {
            this._files.Add(fileData);
        }
        this._loading = false;
        await InvokeAsync(StateHasChanged);
    }
    
    public async Task DownloadFileHandler(string fileId) {
        /*var url = "http://172.20.4.15:8080";*/
        var url = "http://localhost:5065";
        url+=HttpConstants.FileDownloadStreamPath
            .Replace("{appDomain}", "purchase_request")
            .Replace("{fileId}", fileId);
        Console.WriteLine(url);
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
    }

    private string GetText(string quote) {
        return quote;
    }
}