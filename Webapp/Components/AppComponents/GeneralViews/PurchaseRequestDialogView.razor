@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Webapp.Data
<RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" class="rz-w-100">
        @if (this.ShowActions) {
            <RadzenCard>
                <RadzenText TextAlign="TextAlign.Center">Request Actions</RadzenText>
            </RadzenCard>
            <RadzenCard Variant="Variant.Outlined">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                    @switch (this.UserProfile.Role) {
                        case nameof(PurchaseRequestRole.Requester): {
                            if (this.PurchaseRequest?.Status is PrStatus.NeedsApproval or PrStatus.Approved) {
                                <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                              Icon="autorenew" Text="Modify Request"
                                              Click="@(() => this.UserActionHandler(PrUserAction.MODIFY))"/>

                                <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                              Text="Cancel" Icon="highlight_off"
                                              Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                            } else if (this.PurchaseRequest?.Status is PrStatus.Ordered or PrStatus.Delivered or PrStatus.Rejected) {
                                <RadzenButton Text="Repeat Request" ButtonStyle="ButtonStyle.Info"
                                              Icon="repeat_one"
                                              Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                            }

                            break;
                        }
                        case nameof(PurchaseRequestRole.Approver): {
                            if (this.PurchaseRequest?.Requester.Username == this.UserProfile._id) {
                                if (this.PurchaseRequest?.Status is PrStatus.NeedsApproval or PrStatus.Approved) {
                                    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                  Text="Approve/Reject" Icon="done_all"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.APPROVE))"/>
                                    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                  Icon="autorenew" Text="Modify Request"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.MODIFY))"/>

                                    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                  Text="Cancel" Icon="highlight_off"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                                } else if (this.PurchaseRequest?.Status is PrStatus.Ordered or PrStatus.Delivered or PrStatus.Rejected) {
                                    <RadzenButton Text="Repeat Request" ButtonStyle="ButtonStyle.Info"
                                                  Icon="repeat_one"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                                }
                            } else if (this.PurchaseRequest?.Approver.Username == this.UserProfile._id) {
                                if (this.PurchaseRequest?.Status is PrStatus.NeedsApproval or PrStatus.Approved) {
                                    <RadzenButton Size="ButtonSize.Medium" 
                                                  ButtonStyle="ButtonStyle.Info" 
                                                  Text="Approve/Reject" Icon="done_all"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.APPROVE))"/>
                                } else if (this.PurchaseRequest?.Status is PrStatus.Ordered or PrStatus.Delivered or PrStatus.Rejected) {
                                    <RadzenButton Text="Repeat Request" ButtonStyle="ButtonStyle.Info"
                                                  Icon="repeat_one"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                                }
                            }

                            break;
                        }
                        case nameof(PurchaseRequestRole.Purchaser): {
                            if (this.PurchaseRequest?.Requester.Username == this.UserProfile._id) {
                                switch (this.PurchaseRequest?.Status) {
                                    case PrStatus.NeedsApproval: {
                                        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                      Icon="autorenew" Text="Modify Request"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.MODIFY))"/>

                                        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                      Text="Cancel" Icon="highlight_off"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                                        break;
                                    }
                                    case PrStatus.Approved: {
                                        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                      Icon="shopping_cart_checkout"
                                                      Text="Order Request"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.ORDER))"/>

                                        <RadzenButton Size="ButtonSize.Medium"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Icon="autorenew"
                                                      Text="Modify Request"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.MODIFY))"/>

                                        <RadzenButton Size="ButtonSize.Medium"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Text="Cancel"
                                                      Icon="highlight_off"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                                        break;
                                    }
                                    case PrStatus.Ordered: {
                                        <RadzenButton Size="ButtonSize.Medium"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Text="Check-in Order"
                                                      Icon="input"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.CHECKIN))"/>
                                        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                      Text="Cancel" Icon="highlight_off"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                                        break;
                                    }
                                    case PrStatus.Delivered: {
                                        <RadzenButton Text="Repeat Request"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Size="ButtonSize.Medium"
                                                      Icon="repeat_one"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                                        if (this.PurchaseRequest?.CheckInResult?.Complete == false) {
                                            <RadzenButton Size="ButtonSize.Medium"
                                                          ButtonStyle="ButtonStyle.Info"
                                                          Text="Check-in Order"
                                                          Icon="input"
                                                          Click="@(() => this.UserActionHandler(PrUserAction.CHECKIN))"/>
                                        }

                                        break;
                                    }
                                    case PrStatus.Rejected: {
                                        <RadzenButton Text="Repeat Request"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Size="ButtonSize.Medium"
                                                      Icon="repeat_one"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                                        break;
                                    }
                                }
                            } else {
                                if (this.PurchaseRequest?.Status == PrStatus.Approved) {
                                    <RadzenButton Size="ButtonSize.Medium"
                                                  ButtonStyle="ButtonStyle.Info"
                                                  Icon="shopping_cart_checkout"
                                                  Text="Order Request"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.ORDER))"/>
                                } else if (this.PurchaseRequest?.Status == PrStatus.Ordered) {
                                    <RadzenButton Size="ButtonSize.Medium"
                                                  ButtonStyle="ButtonStyle.Info"
                                                  Text="Check-in Order"
                                                  Icon="input"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.CHECKIN))"/>
                                } else if (this.PurchaseRequest is { Status: PrStatus.Delivered }) {
                                    <RadzenButton Text="Repeat Request"
                                                  ButtonStyle="ButtonStyle.Info"
                                                  Size="ButtonSize.Medium"
                                                  Icon="repeat_one"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.REPEAT))"/>
                                    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Info"
                                                  Text="Cancel" Icon="highlight_off"
                                                  Click="@(() => this.UserActionHandler(PrUserAction.CANCEL))"/>
                                    if (this.PurchaseRequest?.CheckInResult?.Complete == false) {
                                        <RadzenButton Size="ButtonSize.Medium"
                                                      ButtonStyle="ButtonStyle.Info"
                                                      Text="Check-in Order"
                                                      Icon="input"
                                                      Click="@(() => this.UserActionHandler(PrUserAction.CHECKIN))"/>
                                    }
                                }
                            }

                            break;
                        }
                    }
                </RadzenStack>
            </RadzenCard>
        }

    </RadzenStack>
    <PurchaseRequestView PurchaseRequest="@this.PurchaseRequest" Mode="@EditMode.VIEW"/>
    <RadzenButton Icon="close" 
                  Text="Close"
                  ButtonStyle="ButtonStyle.Danger" 
                  Size="ButtonSize.Medium"
                  Click="@(()=>this._dialogService.CloseSide())"/>
</RadzenStack>
    
    
@code {
    [Inject] DialogService _dialogService { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    [Parameter] public bool ShowActions { get; set; } = true;
    //[Parameter] public string Role { get; set; }
    //[Parameter] public PrStatus Status { get; set; }
    [Parameter] public UserProfile UserProfile { get; set; }
    [Parameter] public EventCallback<UserActionEventArg> UserAction { get; set; }


    private async Task UserActionHandler(PrUserAction action) {
        this._dialogService.CloseSide();
        await this.UserAction.InvokeAsync(new UserActionEventArg(action, this.PurchaseRequest._id.ToString()));
    }
}