@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using Webapp.Data
@if (this.PurchaseRequest == null) {
    <p class="text-center">No purchase request selected</p>
} else {
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenCard Style="@this._columnWidth">
            <RadzenCard>
                <RadzenFieldset Text="Purchase Request">
                    <RadzenText Text="@(this.PurchaseRequest.Title)"
                                TextStyle="TextStyle.H6"
                                TextAlign="TextAlign.Center"/>
                </RadzenFieldset>
            </RadzenCard>
            <RadzenCard>
                <RadzenFieldset Text="Status">
                    <RadzenAlert Text="@this.GetAlertText()"
                                 AlertStyle="@this.GetAlertStyle()"
                                 Size="AlertSize.Small"
                                 AllowClose="false"/>
                </RadzenFieldset>
            </RadzenCard>
            <RadzenCard>
                <RadzenTabs RenderMode="TabRenderMode.Server">
                    <Tabs>
                        <RadzenTabsItem Text="Request Information">
                            <RequestInformationView Description="@this.PurchaseRequest.Description"
                                                    Title="@this.PurchaseRequest.Title"
                                                    IsUrgent="@this.PurchaseRequest.Urgent"
                                                    SelectedApprover="@this.PurchaseRequest.Approver.Name"
                                                    Mode="EditMode.VIEW"/>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Purchase Information">
                            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    <DepartmentSelector @bind-Department="@this.PurchaseRequest.Department"/>
                                    <RadzenFieldset Text="Shipping">
                                        <RadzenText TextAlign="TextAlign.Center"
                                                    Text="@this.PurchaseRequest.ShippingType"
                                                    TextStyle="TextStyle.H6"
                                                    Style="width: 300px; height: fit-content;"/>
                                    </RadzenFieldset>
                                </RadzenStack>

                                <RadzenFieldset Text="Vendor">
                                    <VendorView Vendor="@this.PurchaseRequest.Vendor"
                                                Mode="@EditMode.VIEW"/>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Items">
                            <PurchaseItemsTable @bind-PurchaseItems="@this.PurchaseRequest.PurchaseItems"/>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Comments/Quotes">
                            <RadzenStack>
                                <CommentsQuotesView CurrentQuoteIds="@this.PurchaseRequest.Quotes"
                                                    AdditionalComments="@this.PurchaseRequest.AdditionalComments"
                                                    Mode="EditMode.VIEW"/>
                            </RadzenStack>
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenCard>
        </RadzenCard>
    </RadzenStack>
}

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    [Parameter] public EventCallback<PurchaseRequest?> PurchaseRequestChanged { get; set; }
    [Parameter] public EditMode Mode { get; set; }=EditMode.VIEW;
    [Parameter] public EventCallback ActionCompleted { get; set; }
    
    private List<Department> _departments = [];
    private string _columnWidth = "width: 100%";

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._departments = await this._purchaseRequestService.GetDepartments();
    }

    protected override Task OnParametersSetAsync() {
        this._columnWidth=(this.Mode == EditMode.VIEW) ? "width: 100%" : "width: 50%";
        return base.OnParametersSetAsync();
    }
    
    private string GetAlertText() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return "Approved,Pending Order";
            }
            case PrStatus.NeedsApproval: {
                return "Pending Approval";
            }
            case PrStatus.Ordered: {
                return "Ordered";
            }
            case PrStatus.Delivered: {
                return "Delivered";
            }
            default: {
                return "Unknown";
            }
        }
    }
    
    private AlertStyle GetAlertStyle() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return AlertStyle.Info;
            }
            case PrStatus.NeedsApproval: {
                return AlertStyle.Warning;
            }
            case PrStatus.Ordered: {
                return AlertStyle.Secondary;
            }
            case PrStatus.Delivered: {
                return AlertStyle.Success;
            }
            default: {
                return AlertStyle.Primary;
            }
        }
    }

}