@using Domain.Authentication
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Services.Authentication
@using Webapp.Data
@using Domain.Users
@inject TooltipService tooltipService
@if (this.PurchaseReqStatuses != null) {
    <RequestQueueView PurchaseReqStatuses="@this.PurchaseReqStatuses"
                      Collapsed="@this._queueCollapsed"
                      UserAction="QueueUserActionHandler"
                      SelectedIdChanged="@SelectedStatusChangedHandler"/>
} else {
    <RadzenStack>
        <RadzenProgressBarCircular ShowValue="false"
                                   Mode="ProgressBarMode.Indeterminate"
                                   Size="ProgressBarCircularSize.Large"
                                   Style="margin: auto; background: transparent; display: block;">
        </RadzenProgressBarCircular>
        <RadzenText Text="Loading" Style="color: white; font-size: 20px; font-weight: bold;"/>
    </RadzenStack>
}
<RadzenRow>
    <RadzenSplitter Orientation="Orientation.Horizontal">
        <RadzenSplitterPane Size="50%">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenCard Style="width: 100%">
                    <RadzenStack>
                        <RadzenCard class="area-header">
                            <RadzenText Text="Purchase Requests"
                                        TextStyle="TextStyle.H6"
                                        TextAlign="TextAlign.Center"/>
                            <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.Body1">
                                Hover mouse over colums with large text to view in popup
                            </RadzenText>
                        </RadzenCard>
                        <RadzenCard>
                            <RadzenDataGrid @ref="@this._dataGrid" 
                                            TItem="PurchaseRequest"
                                            Data="@this.PurchaseRequests"
                                            AllowRowSelectOnRowClick="true"
                                            CellContextMenu="@this.ContextMenuHandle"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            Value="@this._selectedPurchaseRequests"
                                            CellRender="@this.CellRender"
                                            Render="@this.OnRender"
                                            Density="Density.Compact"
                                            AllowFiltering="true"
                                            FilterMode="FilterMode.Advanced"
                                            AllowColumnPicking="true"
                                            AllowSorting="true"
                                            AllowColumnReorder="true"
                                            LogicalFilterOperator="LogicalFilterOperator.And"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            GridLines="DataGridGridLines.Both"
                                            ValueChanged="@this.SelectedChangedHandler">
                                <GroupHeaderTemplate>
                                    <RadzenAlert Text="@(context.GroupDescriptor.GetTitle() + ":" + context.Data.Key)"
                                                 AlertStyle="@(this.GetAlertStyle((PrStatus)Enum.Parse(typeof(PrStatus), context.Data.Key.ToString())))"
                                                 AllowClose="false"
                                                 Size="AlertSize.ExtraSmall"/>
                                </GroupHeaderTemplate>
                                <HeaderTemplate>
                                    <RadzenStack Orientation="Orientation.Horizontal">
                                        <RadzenButton Click="@this.ClearSelectionHandler" Text="Clear Selection" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Icon="tab_close"/>
                                        <RadzenButton Click="@this.ClearFilterHandler" Text="Clear Filter(s)" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Icon="clear_all"/>
                                    </RadzenStack>
                                </HeaderTemplate>
                                <Columns>
                                    <RadzenDataGridColumn Property="Created" Title="Created" Visible="true">
                                        <Template Context="request">
                                            @request.Created.ToString("MM/dd/yy")
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="Title" Title="Title" Visible="true"/>
                                    <RadzenDataGridColumn Property="Description" Title="Description" Visible="false"/>
                                    <RadzenDataGridColumn Property="Requester" FilterProperty="Requester.Name" Type="@typeof(string)" Title="Requester" Visible="true">
                                        <Template Context="request">
                                            @request.Requester.Name
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="Approver" FilterProperty="Approver.Name" Type="@typeof(string)" Title="Approver" Visible="true">
                                        <Template Context="request">
                                            @request.Approver.Name
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="Department" FilterProperty="Department.Name" Type="@typeof(string)" Title="Department" Visible="false">
                                        <Template Context="request">
                                            @request.Department?.Name
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="Vendor" FilterProperty="Vendor.Name" Type="@typeof(string)" Title="Vendor" Visible="false">
                                        <Template Context="request">
                                            @request.Vendor?.Name
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="AdditionalComments" Title="Comments" Visible="false"/>
                                    <RadzenDataGridColumn Property="ShippingType" Title="Freight" Visible="false"/>
                                    <RadzenDataGridColumn Property="Urgent" Title="Urgent?" Visible="false"/>
                                    <RadzenDataGridColumn Property="ApprovedDate" Title="Approved Date" Visible="true">
                                        <Template Context="request">
                                            @if (request.Status >= PrStatus.Approved && request.Status != PrStatus.Rejected) {
                                                @request.Created.ToString("MM/dd/yy")
                                            } else {
                                                <span></span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="OrderedDate" Title="Ordered Date" Visible="true">
                                        <Template Context="request">
                                            @if (request.Status >= PrStatus.Ordered && request.Status != PrStatus.Rejected) {
                                                @request.OrderedDate.ToString("MM/dd/yy")
                                            } else {
                                                <span></span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="ReceivedDate" Title="Received Date" Visible="true">
                                        <Template Context="request">
                                            @if (request.Status==PrStatus.Delivered) {
                                                @request.ReceivedDate.ToString("MM/dd/yy")
                                            } else {
                                                <span></span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="RejectedDate" Title="Rejected Date" Visible="true">
                                        <Template Context="request">
                                            @if (request.Status == PrStatus.Rejected) {
                                                @request.RejectedDate.ToString("MM/dd/yy")
                                            } else {
                                                <span></span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="Status" Title="Status">
                                        <Template Context="request">
                                            @switch (request.Status) {
                                                case PrStatus.NeedsApproval:
                                                    <span style='color: var(--rz-text-contrast-color)'>Pending</span>
                                                    break;
                                                case PrStatus.Approved:
                                                    <span style='color: var(--rz-text-contrast-color)'>Approved</span>
                                                    break;
                                                case PrStatus.Ordered:
                                                    <span style='color: var(--rz-text-contrast-color)'>Ordered</span>
                                                    break;
                                                case PrStatus.Delivered:
                                                    <span style='color: var(--rz-text-contrast-color)'>Delivered</span>
                                                    break;
                                                case PrStatus.Rejected:
                                                    <span style='color: var(--rz-text-contrast-color)'>Rejected</span>
                                                    break;
                                                default:
                                                    <span style='color: var(--rz-text-contrast-color)'>Unknown</span>
                                                    break;
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenCard>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenSplitterPane>
        <RadzenSplitterPane Size="50%" Collapsed="@this._viewPainCollapsed" class="rz-overflow-scroll" Style="max-height: 800px;">
            <RadzenColumn Size="12" SizeMD="6">
                <PurchaseRequestView PurchaseRequest="@this.SelectedPurchaseRequest" Mode="@EditMode.VIEW"/>
            </RadzenColumn>
        </RadzenSplitterPane>
    </RadzenSplitter>
</RadzenRow>

@code {
    [Inject] private ContextMenuService _contextMenuService { get; set; }
    /*[Inject] private UserService _userService { get; set; }*/
    [Inject] private NotificationService _notificationService { get; set; }
    [Parameter] public List<PurchaseRequest> PurchaseRequests { get; set; }
    [Parameter] public List<PurchaseRequestStatus>? PurchaseReqStatuses { get; set; }
    [Parameter] public PurchaseRequest? SelectedPurchaseRequest { get; set; }
    [Parameter] public EventCallback<PurchaseRequest> SelectedPurchaseRequestChanged { get; set; }
    [Parameter] public EventCallback<UserActionEventArg> UserAction { get; set; }
    [Parameter] public UserProfile UserProfile { get; set; }

    private IList<PurchaseRequest>? _selectedPurchaseRequests;
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private bool _viewPainCollapsed = true;
    private string _viewPaneSize = "50%";
    private bool _queueCollapsed = false;

    private async Task SelectedChangedHandler(IList<PurchaseRequest> obj) {
        if (obj.Count > 0) {
            this.SelectedPurchaseRequest = obj[0];
            this._selectedPurchaseRequests = obj;
            await SelectedPurchaseRequestChanged.InvokeAsync(obj[0]);
            this._viewPainCollapsed = false;
            this._queueCollapsed = true;
        }
    }

    AlertStyle GetAlertStyle(PrStatus status) {
        switch (status) {
            case PrStatus.NeedsApproval:
                return AlertStyle.Primary;
            case PrStatus.Approved:
                return AlertStyle.Secondary;
            case PrStatus.Ordered:
                return AlertStyle.Info;
            case PrStatus.Delivered:
                return AlertStyle.Success;
            case PrStatus.Rejected:
                return AlertStyle.Danger;
            default:
                return AlertStyle.Info;
        }
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Hello!", options);

    void OnRender(DataGridRenderEventArgs<PurchaseRequest> args) {
        if (args.FirstRender) {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "Status", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }

    void CellRender(DataGridCellRenderEventArgs<PurchaseRequest> args) {
        if (args.Column.Property == nameof(PurchaseRequest.Status)) {
            switch (args.Data.Status) {
                case PrStatus.Approved:
                    args.Attributes.Add("style", "background-color: var(--rz-series-1)");
                    break;
                case PrStatus.Delivered:
                    args.Attributes.Add("style", "background-color: var(--rz-success)");
                    break;
                case PrStatus.Ordered:
                    args.Attributes.Add("style", "background-color: var(--rz-series-4)");
                    break;
                case PrStatus.NeedsApproval:
                    args.Attributes.Add("style", "background-color: var(--rz-info)");
                    break;
                case PrStatus.Rejected:
                    args.Attributes.Add("style", "background-color: var(--rz-danger)");
                    break;
            }
        }
    }

    private async Task ClearSelectionHandler() {
        this._selectedPurchaseRequests = null;
        this.SelectedPurchaseRequest = null;
        await SelectedPurchaseRequestChanged.InvokeAsync(null);
        this._viewPainCollapsed = true;
        this._queueCollapsed = false;

    }
    
    private async Task ClearFilterHandler() {
        foreach (var col in this._dataGrid.ColumnsCollection) {
            await this._dataGrid.ClearFilter(col, true);
        }
    }

    private async Task ContextActionHandler(DataGridCellMouseEventArgs<PurchaseRequest> args, MenuItemEventArgs e) {
        await this._dataGrid.SelectRow(args.Data);
        this.UserAction.InvokeAsync(new UserActionEventArg((PrUserAction)e.Value, "")).Wait();
        this._contextMenuService.Close();
    }

    private void ContextMenuHandle(DataGridCellMouseEventArgs<PurchaseRequest> args) {
        if (PurchaseRequestRole.TryFromName(this.UserProfile.Role, out PurchaseRequestRole requestRole)) {
            switch (requestRole.Name) {
                case nameof(PurchaseRequestRole.Requester): {
                    if (args.Data.Status is PrStatus.NeedsApproval or PrStatus.Approved) {
                        List<ContextMenuItem> menuList = [
                            new ContextMenuItem() { Text = "Modify Request", Value = PrUserAction.MODIFY, Icon = "autorenew" },
                            new ContextMenuItem() { Text = "Cancel Request", Value = PrUserAction.CANCEL, Icon = "highlight_off" }
                        ];
                        this._contextMenuService.Open(args, menuList, (e) => {
                                this.ContextActionHandler(args, e).Wait();
                            }
                        );
                    }else if(args.Data.Status is PrStatus.Ordered or PrStatus.Delivered) {
                        List<ContextMenuItem> menuList = [
                            new ContextMenuItem() { Text = "Repeat Request", Value = PrUserAction.REPEAT, Icon = "repeat_one" }
                        ];
                            this._contextMenuService.Open(args, menuList, (e) => {
                                    this.ContextActionHandler(args, e).Wait();
                                }
                        );
                    }

                    break;
                }
                case nameof(PurchaseRequestRole.Approver): {
                    if (args.Data.Status is PrStatus.NeedsApproval or PrStatus.Approved) {
                        List<ContextMenuItem> menuList;
                        if (args.Data.Requester.Username == this.UserProfile._id) {
                             menuList= [
                                new ContextMenuItem() { Text = "Approve/Reject Request", Value = PrUserAction.APPROVE, Icon = "done_all" },
                                new ContextMenuItem() { Text = "Modify Request", Value = PrUserAction.MODIFY, Icon = "autorenew" },
                                new ContextMenuItem() { Text = "Cancel Request", Value = PrUserAction.CANCEL, Icon = "highlight_off" }
                            ];
                        } else {
                            menuList = [
                                new ContextMenuItem() { Text = "Approve/Reject Request", Value = PrUserAction.APPROVE, Icon = "done_all" }
                            ];
                        }
                        this._contextMenuService.Open(args, menuList, (e) => {
                                this.ContextActionHandler(args, e).Wait();
                            }
                        );
                    }

                    break;
                }
                case nameof(PurchaseRequestRole.Purchaser): {
                    if (args.Data.Status == PrStatus.Approved) {
                        List<ContextMenuItem> menuList;
                        if (args.Data.Requester.Username == this.UserProfile._id) {
                            menuList= [
                                new ContextMenuItem() { Text = "Order Request", Value = PrUserAction.ORDER, Icon = "open_in_new" },
                                new ContextMenuItem() { Text = "Modify Request", Value = PrUserAction.MODIFY, Icon = "autorenew" },
                                new ContextMenuItem() { Text = "Cancel Request", Value = PrUserAction.CANCEL, Icon = "highlight_off" }
                            ];
                        } else {
                            menuList = [
                                new ContextMenuItem() { Text = "Order Request", Value = PrUserAction.ORDER, Icon = "open_in_new" },
                                new ContextMenuItem() { Text = "Cancel Request", Value = PrUserAction.CANCEL, Icon = "highlight_off" }
                            ];
                        }

                        this._contextMenuService.Open(args, menuList, (e) => {
                                this.ContextActionHandler(args, e).Wait();
                            }
                        );
                    }else if (args.Data.Status == PrStatus.Ordered) {
                        List<ContextMenuItem> menuList = [
                            new ContextMenuItem() { Text = "Check-in Order", Value = PrUserAction.CHECKIN, Icon = "input" }
                        ];
                        this._contextMenuService.Open(args, menuList, (e) => {
                                this.ContextActionHandler(args, e).Wait();
                            }
                        );
                    }else if (args.Data.Status == PrStatus.Delivered) {
                        if(args.Data.CheckInResult is { Complete: false }) {
                            List<ContextMenuItem> menuList = [
                                new ContextMenuItem() { Text = "Check-in Order", Value = PrUserAction.CHECKIN, Icon = "input" }
                            ];
                            this._contextMenuService.Open(args, menuList, (e) => {
                                    this.ContextActionHandler(args, e).Wait();
                                }
                            );
                        }
                    }

                    break;
                }
            }
        }
    }

    private async Task SelectedStatusChangedHandler(string obj) {
        var pr = this.PurchaseRequests.FirstOrDefault(pr => pr._id.ToString() == obj);
        if (pr != null) {
            await this._dataGrid.SelectRow(pr, true);
        }

        await InvokeAsync(StateHasChanged);
        //return Task.CompletedTask;
    }

    private async Task QueueUserActionHandler(UserActionEventArg arg) {
        var pr = this.PurchaseRequests.FirstOrDefault(pr => pr._id.ToString() == arg.PrId);
        if (pr != null) {
            await this._dataGrid.SelectRow(pr, true);
            await this.UserAction.InvokeAsync(arg);
        }
    }
    void ShowColumnPicker(MouseEventArgs args) =>
        this._contextMenuService.Open(args, ds =>
            @<RadzenListBox TValue="object" Style="height:200px;background-color:#fff"
                            SelectAllText="@this._dataGrid.AllColumnsText" AllowSelectAll="@_dataGrid.AllowPickAllColumns"
                            MaxSelectedLabels="@this._dataGrid.ColumnsPickerMaxSelectedLabels"
                            SelectedItemsText="@this._dataGrid.ColumnsShowingText" FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive
                            Multiple="true" AllowFiltering="@this._dataGrid.ColumnsPickerAllowFiltering"
                            Placeholder="@this._dataGrid.AllColumnsText"
                            Data="@this._dataGrid.ColumnsCollection"
                            TextProperty="ColumnPickerTitle"
                            Value="@(this._dataGrid.ColumnsCollection.Where(c => c.GetVisible()))"
                            Change=@(args => { var checkedColumns = ((IEnumerable<object>)args).Cast<RadzenDataGridColumn<PurchaseRequest>>(); this._dataGrid.ColumnsCollection.ToList().ForEach(c => c.Visible = checkedColumns.Contains(c)); })/>
        );

}