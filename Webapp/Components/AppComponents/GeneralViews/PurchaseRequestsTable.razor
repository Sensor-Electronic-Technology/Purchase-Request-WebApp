@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Services.Authentication
@using Webapp.Data
@using Domain.Users
@inject TooltipService tooltipService

<RadzenRow>
    <RadzenSplitter Orientation="Orientation.Horizontal">
        <RadzenSplitterPane Size="50%">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenCard Style="width: 100%">
                    <RadzenStack>
                        <RadzenCard>
                            <RadzenText Text="Purchase Requests"/>
                        </RadzenCard>
                        <RadzenCard>
                            <RadzenButton Click="@this.ClearSelectionHandler" Text="Clear Selection" />
                            <RadzenDataGrid @ref="@this._dataGrid" TItem="PurchaseRequest"
                                            Data="@this.PurchaseRequests"
                                            AllowRowSelectOnRowClick="true"
                                            CellContextMenu="@this.ContextMenuHandle"
                                            SelectionMode="DataGridSelectionMode.Single"
                                            Value="@this._selectedPurchaseRequests"
                                            CellRender="@this.CellRender"
                                            Render="@this.OnRender"
                                            ValueChanged="@this.SelectedChangedHandler">
                                <Columns>
                                    <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Title)" Title="Title"/>
                                    <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Created)" Title="Created At">
                                        <Template Context="request">
                                            @request.Created.ToString("MM/dd/yy")
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Requester)" Title="Requester"/>
                                    <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Status)" Title="Status">
                                        <Template Context="request">
                                            @switch (request.Status) {
                                                case PrStatus.NeedsApproval:
                                                    <span style='color: var(--rz-text-contrast-color)'>Pending</span>
                                                    @*<RadzenText Text="Pending" Style="color: red"/>*@
                                                    break;
                                                case PrStatus.Approved:
                                                    <span style='color: var(--rz-text-contrast-color)'>Approved</span>
                                                    @*<RadzenText Text="Approved" Style="color: green"/>*@
                                                    break;
                                                case PrStatus.Ordered:
                                                    <span style='color: var(--rz-text-contrast-color)'>Ordered</span>
                                                    @*<RadzenText Text="Rejected" Style="color: mediumpurple"/>*@
                                                    break;
                                                case PrStatus.Delivered:
                                                    <span style='color: var(--rz-text-contrast-color)'>Delivered</span>
                                                    @*<RadzenText Text="Delivered" Style="color: green"/>*@
                                                    break;
                                                default:
                                                    <span style='color: var(--rz-text-contrast-color)'>Unknown</span>
                                                    @*<RadzenText Text="Unknown" Style="color: black"/>*@
                                                    break;
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenCard>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenSplitterPane>
        <RadzenSplitterPane Size="50%" Collapsed="@this._viewPainCollapsed">
            <RadzenColumn Size="12" SizeMD="6">
                <PurchaseRequestView PurchaseRequest="@this.SelectedPurchaseRequest" Mode="@EditMode.VIEW"/>
            </RadzenColumn>
        </RadzenSplitterPane>
    </RadzenSplitter>
</RadzenRow>


@code {
    [Inject] private ContextMenuService _contextMenuService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Parameter] public List<PurchaseRequest> PurchaseRequests { get; set; }
    [Parameter] public PurchaseRequest? SelectedPurchaseRequest { get; set; }
    [Parameter] public EventCallback<PurchaseRequest> SelectedPurchaseRequestChanged { get; set; }
    [Parameter] public EventCallback ModifyRequest { get; set; }
    [Parameter] public EventCallback RejectRequest { get; set; }
    [Parameter] public EventCallback ApproveRequest { get; set; }
    [Parameter] public EventCallback CancelRequest { get; set; }
    [Parameter] public EventCallback OrderRequest { get; set; }
    
    private IList<PurchaseRequest>? _selectedPurchaseRequests;
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private bool _viewPainCollapsed = true;
    private string _viewPaneSize = "50%";
    
    private void CancelRequestHandler(PurchaseRequest request) {
        Console.WriteLine("Cancel Request");
        
    }

    private async Task SelectedChangedHandler(IList<PurchaseRequest> obj) {
        if (obj.Count > 0) {
            this.SelectedPurchaseRequest = obj[0];
            this._selectedPurchaseRequests=obj;
            await SelectedPurchaseRequestChanged.InvokeAsync(obj[0]);
            this._viewPainCollapsed = false;
        }
    }
    
    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "Hello!", options);
    
    void OnRender(DataGridRenderEventArgs<PurchaseRequest> args) {
        if(args.FirstRender) {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "Status", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }
    
    void CellRender(DataGridCellRenderEventArgs<PurchaseRequest> args) {
        if (args.Column.Property == nameof(PurchaseRequest.Status)) {
            switch (args.Data.Status) {
                case PrStatus.Approved:
                    args.Attributes.Add("style", "background-color: var(--rz-warning)");
                    break;
                case PrStatus.Delivered:
                    args.Attributes.Add("style", "background-color: var(--rz-success)");
                    break;
                case PrStatus.Ordered:
                    args.Attributes.Add("style", "background-color: var(--rz-danger)");
                    break;
                case PrStatus.NeedsApproval:
                    args.Attributes.Add("style", "background-color: var(--rz-info)");
                    break;
            }
            //args.Attributes.Add("style", $"background-color: {(args.Data.Quantity > 20 ? "var(--rz-success)" : "var(--rz-base-background-color)")};");
            //args.Attributes.Add("class", args.Data.Quantity > 20 ? "my-class" : "my-other-class");
            
        }
    }

    private async Task ClearSelectionHandler() {
        this._selectedPurchaseRequests = null;
        this.SelectedPurchaseRequest = null;
        await SelectedPurchaseRequestChanged.InvokeAsync(null);
        this._viewPainCollapsed = true;
    }
    
    private void ContextMenuHandle(DataGridCellMouseEventArgs<PurchaseRequest> args) {
        var role = this._userService.GetUserRole();
        Console.WriteLine($"Role: {role}");
        if (PurchaseRequestRole.TryFromName(role, out PurchaseRequestRole requestRole)) {
            Console.WriteLine($"PrRole: {requestRole.Name}");
            switch (requestRole.Name) {
                case nameof(PurchaseRequestRole.Requester): {
                    Console.WriteLine("Creating Requester Context Menu");
                    this._contextMenuService.Open(args,
                        new List<ContextMenuItem> {
                            new ContextMenuItem(){ Text = "Modify Request", Value = 1, Icon = "cached" },
                            new ContextMenuItem(){ Text = "Cancel Request", Value = 2, Icon = "highlight_off" },
                        }, (e) => {
                            this._dataGrid.SelectRow(args.Data);
                            switch((int)e.Value){
                                case 1:
                                    this.ModifyRequest.InvokeAsync().Wait();
                                    break;
                                case 2:
                                    this.CancelRequest.InvokeAsync(args.Data);
                                    break;
                            }
                            this._contextMenuService.Close();
                        }
                    );
                    break;
                }
                case nameof(PurchaseRequestRole.Approver): {
                    this._contextMenuService.Open(args,
                        new List<ContextMenuItem> {
                            new ContextMenuItem(){ Text = "Approve/Reject Request", Value = 1, Icon = "done_all" },
                        }, (e) => {
                            this._dataGrid.SelectRow(args.Data);
                            this.ApproveRequest.InvokeAsync().Wait();
                            this._contextMenuService.Close();
                        }
                    );
                    break;
                }
                case nameof(PurchaseRequestRole.Purchaser): {
                    this._contextMenuService.Open(args,
                        new List<ContextMenuItem> {
                            new ContextMenuItem(){ Text = "Modify Request", Value = 1, Icon = "cached" },
                            new ContextMenuItem(){ Text = "Reject Request", Value = 2, Icon = "delete_forever" },
                            new ContextMenuItem(){ Text = "Order Request", Value = 5, Icon = "add_shopping_cart" },
                        }, (e) => {
                            switch((int)e.Value){
                                case 1:
                                    this.ModifyRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 2:
                                    this.RejectRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 5:
                                    this.OrderRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                            }
                            this._contextMenuService.Close();
                        }
                    );
                    break;
                }
                case nameof(PurchaseRequestRole.Admin): {
                    this._contextMenuService.Open(args,
                        new List<ContextMenuItem> {
                            new ContextMenuItem(){ Text = "Modify Request", Value = 1, Icon = "cached" },
                            new ContextMenuItem(){ Text = "Reject Request", Value = 2, Icon = "delete_forever" },
                            new ContextMenuItem(){ Text = "Approve Request", Value = 3, Icon = "done_all" },
                            new ContextMenuItem(){ Text = "Cancel Request", Value = 4, Icon = "highlight_off" },
                            new ContextMenuItem(){ Text = "Order Request", Value = 5, Icon = "add_shopping_cart" },
                        }, (e) => {
                            switch((int)e.Value){
                                case 1:
                                    this.ModifyRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 2:
                                    this.RejectRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 3:
                                    this.ApproveRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 4:
                                    this.CancelRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                                case 5:
                                    this.OrderRequest.InvokeAsync(this.SelectedPurchaseRequest);
                                    break;
                            }
                            this._contextMenuService.Close();
                        }
                    );
                    break;
                }
            }
        }
    }
}