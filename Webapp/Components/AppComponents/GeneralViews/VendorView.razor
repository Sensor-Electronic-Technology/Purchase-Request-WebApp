@using Domain.PurchaseRequests.Model
@using Infrastructure.Services
@using Webapp.Data

@if (this.Vendor == null) {
    <RadzenText Text="No Vendor Selected" TextStyle="TextStyle.H5"/>
} else {
    <RadzenStack Orientation="Orientation.Vertical" Gap="10" Style="width:600px;">
        <RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                <RadzenFormField Text="Name">
                    <RadzenTextBox @bind-Value="@this.Vendor.Name" ReadOnly="@this.IsReadOnly()"/>
                </RadzenFormField>
                <RadzenFormField Text="Contact">
                    <RadzenTextBox @bind-Value="@this.Vendor.Attention" ReadOnly="@this.IsReadOnly()"/>
                </RadzenFormField>
            </RadzenStack>
            <RadzenFormField Text="Street">
                <RadzenTextBox @bind-Value="@this.Vendor.StreetAddress" ReadOnly="@this.IsReadOnly()"/>
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="10">
                <RadzenFormField Text="City">
                    <RadzenTextBox @bind-Value="@this.Vendor.City" ReadOnly="@this.IsReadOnly()"/>
                </RadzenFormField>
                <RadzenFormField Text="State">
                    <RadzenTextBox @bind-Value="@this.Vendor.State" ReadOnly="@this.IsReadOnly()"/>
                </RadzenFormField>
                <RadzenFormField Text="Country">
                    <RadzenTextBox @bind-Value="@this.Vendor.Country" ReadOnly="@this.IsReadOnly()"/>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenFormField Text="Zip">
                    <RadzenTextBox @bind-Value="@this.Vendor.Zip" ReadOnly="@this.IsReadOnly()" Style="width: 150px;"/>
                </RadzenFormField>
                <RadzenFormField Text="Email">
                    <RadzenTextBox @bind-Value="@this.Vendor.Email" ReadOnly="@this.IsReadOnly()" Style="width: 450px"/>
                </RadzenFormField>
            </RadzenStack>
        </RadzenStack>
        <RadzenFieldset Text="Save/Cancel" Visible="@(!this.IsReadOnly())">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" 
                              Text="Save" 
                              Click="@this.SaveHandler" 
                              Disabled="@this.IsReadOnly()"
                              Style="width: 150px;height: 50px;"/>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" 
                              Text="Cancel" 
                              Click="@this.Cancel" 
                              Disabled="@this.IsReadOnly()"
                              Style="width: 150px;height: 50px;"/>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenStack>
}

@code {
    [Parameter] public Vendor? Vendor { get; set; } = new();
    /*[Parameter] public EventCallback<Vendor> VendorChanged { get; set; }*/
    [Parameter] public EventCallback<Vendor> VendorUpdated { get; set; }
    [Parameter] public EditMode Mode { get; set; }
    [Inject] private DialogService _dialogService { get; set; }

    [Inject] private ContactDataService _dataService { get; set; }
    
    private bool _switchValue=false;
    private string _label="Enable";

    protected override Task OnParametersSetAsync() {
        if(this.Mode == EditMode.NEW) {
            this.Vendor = this.Vendor ?? new Vendor();
        }
        return base.OnParametersSetAsync();
    }

    private bool IsReadOnly() {
        return this.Mode == EditMode.VIEW;
    }

    private async Task SaveHandler() {
        if(this.Vendor == null) {
            return;
        }
        switch (this.Mode) {
            case EditMode.NEW:
                this.Vendor=await this._dataService.InsertOneV2(this.Vendor);
                break;
            case EditMode.EDIT:
                await this._dataService.Update(this.Vendor);
                break;
        }

        await this.VendorUpdated.InvokeAsync(this.Vendor);
        this._dialogService.Close();
    }
    
    private async Task Cancel() {
        this._dialogService.Close();
    }
    void OnChange(bool? value, string name) {
        if (value.HasValue) {
            this._switchValue = value.Value;
            this._label = value.Value ? "Disable" : "Enable";
        }
    }
}