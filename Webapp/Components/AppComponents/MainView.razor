@using Domain.Authentication
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Infrastructure.Hubs
@using Infrastructure.Services
@using Microsoft.AspNetCore.SignalR.Client
@using MongoDB.Bson
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@using Webapp.Components.AppComponents.PurchaserViews

<RadzenTabs class="rz-p-0 rz-m-0" SelectedIndex="@this._selectedIndex" 
            SelectedIndexChanged="TabIndexChangedHandler">
    <Tabs>
        <RadzenTabsItem Icon="dashboard" Text="Overview" class="tab-color-1 rz-ripple">
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Requests" class="tab-color-4 rz-ripple">
                        <PurchaseRequestsTable PurchaseRequests="@this._purchaseRequests"
                                               @bind-SelectedPurchaseRequest="@this._selectedRequest"
                                               UserAction="@this.UserActionHandler"
                                               PurchaseReqStatuses="@this._purchaseReqStatuses"
                                               UserProfile="@this._userProfile"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Po Tracker" class="tab-color-5 rz-ripple">
                        <PoTrackerView PurchaseRequests="@this.GetTrackerRequests()"/>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>

        </RadzenTabsItem>
        <RadzenTabsItem Icon="account_balance_wallet" Text="Create New" class="tab-color-2 rz-ripple">
            @if (this._userProfile != null) {
                <PurchaseRequestForm ActionCompleted="@this.CompletedHandler"
                                     UserProfile="@this._userProfile"
                                     Mode="EditMode.NEW" RepeatEdit="false"/>
            } else {
                <RadzenCard class="area-header">
                    <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">
                        <RadzenIcon Icon="error"/><b>Error: UserProfile not loaded, please refresh page or re-log</b>
                    </RadzenText>
                </RadzenCard>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="@this._templateTabText" Visible="@this._isEditing" Icon="@this._tabIcon" class="tab-color-3 rz-ripple">
            @if (this._userProfile != null) {
                @switch (this._userAction) {
                    case PrUserAction.MODIFY:
                        <PurchaseRequestForm PurchaseRequest="@this._actionRequest"
                                             Mode="@EditMode.EDIT"
                                             RepeatEdit="false"
                                             UserProfile="@this._userProfile"
                                             ActionCompleted="@this.CompletedHandler"/>
                        break;
                    case PrUserAction.CANCEL:
                        <CancelRequestView PurchaseRequest="@this._actionRequest"
                                           UserProfile="@this._userProfile"
                                           ActionCompleted="@this.CompletedHandler"/>
                        break;
                    case PrUserAction.ORDER:
                        <OrderActionView PurchaseRequest="@this._actionRequest"
                                         UserProfile="@this._userProfile"
                                         ActionCompleted="@this.CompletedHandler"/>

                        break;
                    case PrUserAction.APPROVE:
                        <ApproveActionView PurchaseRequest="@this._actionRequest"
                                           UserProfile="@this._userProfile"
                                           ActionCompleted="@this.CompletedHandler"/>
                        break;
                    case PrUserAction.REPEAT:
                        <PurchaseRequestForm PurchaseRequest="@this._actionRequest"
                                             ActionCompleted="@this.CompletedHandler"
                                             UserProfile="@this._userProfile"
                                             RepeatEdit="true"
                                             Mode="EditMode.EDIT"/>
                        break;
                    case PrUserAction.CHECKIN:
                        <ReceiveActionView PurchaseRequest="@this._actionRequest"
                                           ActionCompleted="@this.CompletedHandler"
                                           UserProfile="@this._userProfile"/>
                        break;
                    default:
                        <p>Invalid action</p>
                        break;
                }
            } else {
                <RadzenCard class="area-header">
                    <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">
                        <RadzenIcon Icon="error"/><b>Error: UserProfile not loaded, please refresh page or re-log</b>
                    </RadzenText>
                </RadzenCard>
            }

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PrEditingTracker EditingTracker { get; set; }
    [Inject] private ILogger<MainView> _logger { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private MessagingClient _messagingClient { get; set; }
    
    [Parameter] public string? Id { get; set; }
    [Parameter] public int? Action { get; set; }
    
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private List<PurchaseRequest> _purchaseRequests = [];
    private List<PurchaseRequestStatus> _purchaseReqStatuses = [];
    private PurchaseRequest? _selectedRequest;
    private PurchaseRequest? _actionRequest;
    private UserProfile? _userProfile = new();
    private bool _isEditing = false;
    private string _templateTabText="Template";
    private string _tabIcon="autorenew";
    private int _selectedIndex = 0;
    private PrUserAction _userAction = PrUserAction.MODIFY;


    List<ChatMessage> messages;
    
    private Dictionary<PrUserAction, TabTemplate> _tabTemplates=new() { 
        { PrUserAction.MODIFY, new TabTemplate("Modify Request", "autorenew") }, 
        { PrUserAction.CANCEL, new TabTemplate("Cancel Request", "highlight_off") },
        { PrUserAction.APPROVE, new TabTemplate("Approve/Reject Request", "assignment_turned_in") }, 
        { PrUserAction.ORDER, new TabTemplate("Order Request", "paid") },
        { PrUserAction.CHECKIN, new TabTemplate("Check-in Order", "input") },
        { PrUserAction.REPEAT, new TabTemplate("Repeat Request", "content_copy") }
    };
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this.EditingTracker.OnTimeout += this.EditTrackerTimeout;
        await this.Load();
    }

    private async Task HubSetup() {
        this._messagingClient.HubConnection.On(HubConstants.Events.Connected,this.ConnectedHandler);
        this._messagingClient.HubConnection.On(HubConstants.Events.ReceiveRefresh,this.RefreshHandler);
        if (!this._messagingClient.IsConnected) {
            await this._messagingClient.StartAsync();
        }
    }

    private List<PurchaseRequest> GetTrackerRequests() {
        return this._purchaseRequests.Where(e => e.Status is  PrStatus.Ordered or PrStatus.Delivered).ToList();
    }

    private Task ConnectedHandler() {
        this._logger.LogInformation("Hub Connected");
        return Task.CompletedTask;
    }

    private async Task RefreshHandler() {
        if (!this._isEditing) {
            this._notificationService.Notify(NotificationSeverity.Info,"Refresh Requested","New data available, reloading data...",duration:5000);
            await this.Load();
        } else {
            this._notificationService.Notify(NotificationSeverity.Warning,"Refresh Requested",
                "Please refresh data once you are finished editing",
                duration:5000);
        }
        
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        var role=this._userService.GetUserRole();
        if (!string.IsNullOrWhiteSpace(this.Id) && this.Action.HasValue && this._userProfile != null) {
            this._selectedRequest = this._purchaseRequests.FirstOrDefault(e => e._id.ToString() == this.Id);
            if (this._selectedRequest != null) {
                this._userAction = (PrUserAction)this.Action.Value;
                switch(this._userAction) {
                    case PrUserAction.MODIFY:
                        if(role==nameof(PurchaseRequestRole.Requester) && this._selectedRequest.Requester.Username==this._userProfile?._id) {
                            await this.ModifyHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    case PrUserAction.APPROVE:
                        if(role==nameof(PurchaseRequestRole.Approver)) {
                            await this.ApproveRequestHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    case PrUserAction.ORDER:
                        if(role==nameof(PurchaseRequestRole.Purchaser)) {
                            await this.OrderRequestHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    case PrUserAction.REPEAT: {
                        if (PurchaseRequestRole.List.FirstOrDefault(e => e.Name == role) != null) {
                            await this.RepeatHandler();
                        }
                        break;
                    }
                    case PrUserAction.CHECKIN: {
                        if (role==nameof(PurchaseRequestRole.Purchaser) || role==nameof(PurchaseRequestRole.Requester)) {
                            await this.ReceiveHandler();
                        }
                        break;
                    }
                    default:
                        this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
                        break;
                }
            }
        }
    }

    private async Task UserActionHandler(UserActionEventArg arg) {
        this._userAction = arg.Action;
        switch(this._userAction) {
            case PrUserAction.MODIFY:
                await this.ModifyHandler();
                break;
            case PrUserAction.CANCEL:
                await this.CancelRequestHandler();
                break;
            case PrUserAction.APPROVE:
                await this.ApproveRequestHandler();
                break;
            case PrUserAction.ORDER:
                await this.OrderRequestHandler();
                break;
            case PrUserAction.REPEAT:
                await this.RepeatHandler();
                break;
            case PrUserAction.CHECKIN:
                await this.ReceiveHandler();
                break;
            default:
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
                break;
        }
        //await InvokeAsync(StateHasChanged);
    }

    private async Task ModifyHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.MODIFY);
                this.EditingTracker.StartEditing(this._userProfile._id,this._selectedRequest._id.ToString());
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task RepeatHandler() {
        if (this.Action.HasValue && !string.IsNullOrWhiteSpace(this.Id)) {
            if (ObjectId.TryParse(this.Id, out var id)) {
                this._actionRequest = await this._purchaseRequestService.GetPurchaseRequest(id);
                if (this._actionRequest != null) {
                    this._actionRequest._id = ObjectId.GenerateNewId(); 
                    this.TransitionTab(PrUserAction.REPEAT);
                } else {
                    this._notificationService.Notify(NotificationSeverity.Error,"Error","Request not found");
                }
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid request id");
            }
        } else {
            if (this._selectedRequest != null) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.REPEAT);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","No request selected");
            }
        }
    }
    
    private async Task ReceiveHandler() {
        if (this.Action.HasValue && !string.IsNullOrWhiteSpace(this.Id)) {
            if (ObjectId.TryParse(this.Id, out var id)) {
                this._actionRequest = await this._purchaseRequestService.GetPurchaseRequest(id);
                if (this._actionRequest != null) {
                    this._actionRequest._id = ObjectId.GenerateNewId(); 
                    this.TransitionTab(PrUserAction.CHECKIN);
                } else {
                    this._notificationService.Notify(NotificationSeverity.Error,"Error","Request not found");
                }
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid request id");
            }
        } else {
            if (this._selectedRequest != null) {
                var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
                if (string.IsNullOrEmpty(user)) {
                    this._actionRequest = this._selectedRequest;
                    this.TransitionTab(PrUserAction.CHECKIN);
                    this.EditingTracker.StartEditing(this._userProfile._id,this._selectedRequest._id.ToString());
                } else {
                    this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                        " editing this request. " +
                                                                                        "Please try again later.");
                }
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","No request selected");
            }
        }
    }
    
    private async Task CancelRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.CANCEL);
                this.EditingTracker.StartEditing(this._userProfile._id,this._selectedRequest._id.ToString());
                //await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task ApproveRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.APPROVE);
                this.EditingTracker.StartEditing(this._userProfile._id,this._selectedRequest._id.ToString());
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error",$"{user} is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task OrderRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                var order = new PurchaseOrder { ShipTo = this._actionRequest.Requester.Name };
                this._actionRequest.PurchaseOrder = order;
                this.TransitionTab(PrUserAction.ORDER);
                this.EditingTracker.StartEditing(this._userProfile._id,this._selectedRequest._id.ToString());
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error",$"{user} is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }

    private async Task CompletedHandler(string id) {
        this.EditingTracker.FinishEditing(id);
        if (this.Action.HasValue && !string.IsNullOrWhiteSpace(this.Id)) {
            this._notificationService.Notify(NotificationSeverity.Info,"Info","Action completed successfully, Navigating");
            this._navigationManager.NavigateTo("/");
        } else {
            await this.Load();
        }
    }
    
    private void EditTrackerTimeout(string username,string id) {
        if(this._userProfile._id == username) {
            if(this._actionRequest != null && this._actionRequest._id.ToString() == id) {
                this._selectedIndex = 0;
                this.Reset(false);
            }
        }
    }
    
    private void TabIndexChangedHandler(int tabIndex) {
        if(tabIndex == 0 || tabIndex == 1) {
            if (this.Action.HasValue && !string.IsNullOrWhiteSpace(this.Id)) {
                this._navigationManager.NavigateTo("/",true);
            } else {
                if (this._selectedIndex == 2) {
                    this.Reset(true);
                } else {
                    this.Reset();
                }
            }
        }
        this._selectedIndex = tabIndex;
    }
    
    private void Reset(bool invoke=false) {
        this._isEditing = false;
        if(this._selectedRequest != null) {
            if (invoke) {
                this.EditingTracker.FinishEditing(this._selectedRequest._id.ToString());
            }
            this._selectedRequest = null;
        }
        this._actionRequest = null;
    }
    
    private void TransitionTab(PrUserAction action) {
        this._userAction=action;
        if (this._tabTemplates.TryGetValue(action, out var template)) {
            this._selectedIndex = 2;
            this._templateTabText = template.Name;
            this._tabIcon = template.Icon;
            this._isEditing = true;
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
        }
    }

    private async Task Load() {
        this._selectedIndex = 0;
        this.Reset(true);
        this._userProfile = this._userService.GetSessionUserProfile();
        if(this._userProfile != null) {
            await this.HubSetup();
            this.EditingTracker.UserTryClear(this._userProfile._id);
            this._purchaseRequests=await this._purchaseRequestService.GetPurchaseRequests(this._userProfile._id,this._userService.GetUserRole());
            this._purchaseRequests = this._purchaseRequests.OrderByDescending(e => e.Status).ToList();
            this._purchaseReqStatuses=this._purchaseRequests.Select(pr => {
                var complete=pr is { Status: PrStatus.Delivered, CheckInResult.Complete: true };
                string dateStr = pr.Status switch {
                    PrStatus.NeedsApproval => pr.Created.ToString("MM/dd/yy"),
                    PrStatus.Approved => pr.ApprovedDate.ToString("MM/dd/yy"),
                    PrStatus.Ordered => pr.OrderedDate.ToString("MM/dd/yy"),
                    PrStatus.Delivered => pr.ReceivedDate.ToString("MM/dd/yy"),
                    PrStatus.Rejected => pr.RejectedDate.ToString("MM/dd/yy"),
                    _ => "00-00-00",
                };
                return new PurchaseRequestStatus(pr._id.ToString(), pr.Title ?? "No Title", pr.Status, complete, dateStr);
            }).ToList();
        }
    }
    
    public ValueTask DisposeAsync() {
        this.EditingTracker.OnTimeout -= this.EditTrackerTimeout;
        return this._messagingClient.DisposeAsync();
    }

}