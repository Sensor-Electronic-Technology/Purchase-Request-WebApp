@using Domain.Authentication
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Infrastructure.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@using Webapp.Components.AppComponents.PurchaserViews
@using Webapp.Components.AppComponents.Chat

<RadzenTabs SelectedIndex="@this._selectedIndex" SelectedIndexChanged="TabIndexChangedHandler">
    <Tabs>
        <RadzenTabsItem Icon="dashboard" Text="Overview" Style="background:#4a764a">
            <PurchaseRequestsTable PurchaseRequests="@this._purchaseRequests"
                                   @bind-SelectedPurchaseRequest="@this._selectedRequest"
                                   UserAction="@this.UserActionHandler"
                                   PurchaseReqStatuses="@this._purchaseReqStatuses"/>
        </RadzenTabsItem>
        <RadzenTabsItem Icon="account_balance_wallet" Text="Create New" Style="background: #0a53be">
            <PurchaseRequestForm ActionCompleted="@this.CompletedHandler" Mode="EditMode.NEW"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@this._templateTabText" Visible="@this._templateTabVisible" Icon="@this._tabIcon"
                        Style="background: #cc7119">
            @switch(this._userAction) {
                case PrUserAction.MODIFY:
                    <PurchaseRequestForm PurchaseRequest="@this._actionRequest"
                                         Mode="@EditMode.EDIT"
                                         ActionCompleted="@this.CompletedHandler"/>
                    break;
                case PrUserAction.CANCEL:
                    <CancelRequestView PurchaseRequest="@this._actionRequest"
                                       ActionCompleted="@this.CompletedHandler"/>
                    break;
                case PrUserAction.ORDER:
                    <OrderActionView PurchaseRequest="@this._actionRequest"
                                     ActionCompleted="@this.CompletedHandler"/>
                    break;
                case PrUserAction.APPROVE:
                    <ApproveActionView PurchaseRequest="@this._actionRequest" 
                                       ActionCompleted="@this.CompletedHandler"/>
                    break;
                default:
                    <p>Invalid action</p>
                    break;
            }
        </RadzenTabsItem>
    </Tabs>

</RadzenTabs>

@*<style>
    #chat2 .form-control {
        border-color: transparent;
    }

    #chat2 .form-control:focus {
        border-color: transparent;
        box-shadow: inset 0px 0px 0px 1px transparent;
    }

    .divider:after,
    .divider:before {
        content: "";
        flex: 1;
        height: 1px;
        background: #eee;
    }
</style>*@
<div>
    @if (this._userAccount != null) {
        <MessageBlock Messages="@this.messages" CurrentUser="@this._userAccount._id"/>
    }
    
    @*<section>
        <div class="container py-5">
            <div class="row d-flex justify-content-center">
                <div class="col-md-10 col-lg-8 col-xl-6">
                    <div class="card" id="chat2">
                        <div class="card-header d-flex justify-content-between align-items-center p-3">
                            <h5 class="mb-0">Chat</h5>
                        </div>
                        <div class="card-body" style="position: relative; height: 400px; overflow: scroll">
                            
                            <div class="d-flex flex-row justify-content-start">
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                                <div>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">Hi</p>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">How are you ...???
                                    </p>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">What are you doing tomorrow? Can we come up a bar?</p>
                                    <p class="small ms-3 mb-3 rounded-3 text-muted">23:58</p>
                                </div>
                            </div>

                            $1$<div class="divider d-flex align-items-center mb-4">
                                <p class="text-center mx-3 mb-0" style="color: #a2aab7;">Today</p>
                            </div>#1#

                            <div class="d-flex flex-row justify-content-end mb-4 pt-1">
                                <div>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">Hiii, I'm good.</p>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">How are you doing?</p>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">Long time no see! Tomorrow
                                        office. will
                                        be free on sunday.</p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">00:06</p>
                                </div>
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava4-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                            </div>

                            <div class="d-flex flex-row justify-content-start mb-4">
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                                <div>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">Okay</p>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">We will go on
                                        Sunday?</p>
                                    <p class="small ms-3 mb-3 rounded-3 text-muted">00:07</p>
                                </div>
                            </div>

                            <div class="d-flex flex-row justify-content-end mb-4">
                                <div>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">That's awesome!</p>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">I will meet you Sandon Square
                                        sharp at
                                        10 AM</p>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">Is that okay?</p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">00:09</p>
                                </div>
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava4-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                            </div>

                            <div class="d-flex flex-row justify-content-start mb-4">
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                                <div>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">Okay i will meet
                                        you on
                                        Sandon Square</p>
                                    <p class="small ms-3 mb-3 rounded-3 text-muted">00:11</p>
                                </div>
                            </div>

                            <div class="d-flex flex-row justify-content-end mb-4">
                                <div>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">Do you have pictures of Matley
                                        Marriage?</p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">00:11</p>
                                </div>
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava4-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                            </div>

                            <div class="d-flex flex-row justify-content-start mb-4">
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                                <div>
                                    <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">Sorry I don't
                                        have. i
                                        changed my phone.</p>
                                    <p class="small ms-3 mb-3 rounded-3 text-muted">00:13</p>
                                </div>
                            </div>

                            <div class="d-flex flex-row justify-content-end">
                                <div>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">Okay then see you on sunday!!
                                    </p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">00:15</p>
                                </div>
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava4-bg.webp"
                                     alt="avatar 1" style="width: 45px; height: 100%;">
                            </div>

                        </div>
                        <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3-bg.webp"
                                 alt="avatar 3" style="width: 40px; height: 100%;">
                            <input type="text" class="form-control form-control-lg" id="exampleFormControlInput1"
                                   placeholder="Type message">
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </section>*@
</div>

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PrEditingTracker EditingTracker { get; set; }
    [Inject] private ILogger<MainView> _logger { get; set; }
    [Inject] private SessionStorageService _localStorage { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    [Inject] private MessagingClient _messagingClient { get; set; }
    
    [Parameter] public string? Id { get; set; }
    [Parameter] public int? Action { get; set; }
    
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private List<PurchaseRequest> _purchaseRequests = [];
    private List<PurchaseRequestStatus> _purchaseReqStatuses = [];
    private PurchaseRequest? _selectedRequest;
    private PurchaseRequest? _actionRequest;
    private UserProfile? _userAccount = new();
    private bool _templateTabVisible = false;
    private string _templateTabText="Template";
    private string _tabIcon="autorenew";
    private int _selectedIndex = 0;
    private PrUserAction _userAction = PrUserAction.MODIFY;


    List<ChatMessage> messages;
    
    private Dictionary<PrUserAction, TabTemplate> _tabTemplates=new() { 
        { PrUserAction.MODIFY, new TabTemplate("Modify Request", "autorenew") }, 
        { PrUserAction.CANCEL, new TabTemplate("Cancel Request", "highlight_off") },
        { PrUserAction.APPROVE, new TabTemplate("Approve/Reject Request", "assignment_turned_in") }, 
        { PrUserAction.ORDER, new TabTemplate("Order Request", "add_shopping_cart") }
    };
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this.EditingTracker.OnTimeout += this.EditTrackerTimeout;
        this._logger.LogInformation("MainView Initialized");
        var now = DateTime.Now;
        this.messages= new() {
            new ChatMessage(now, "aelmendo", "Hello"),
            new ChatMessage(now.AddSeconds(5), "aelmendo", "How are you?"),
            new ChatMessage(now.AddSeconds(10), "aelmendo", "I am fine"),
            new ChatMessage(now.AddSeconds(15), "rjain", "What are you doing?"),
            new ChatMessage(now.AddSeconds(20), "rjain", "I am working on a project"),
            new ChatMessage(now.AddSeconds(25), "aelmendo", "What are you doing?"),
            new ChatMessage(now.AddSeconds(30), "rjain", "I am working on a project"),
            new ChatMessage(now.AddSeconds(35), "jdoe", "Hello everyone"),
            new ChatMessage(now.AddSeconds(40), "jdoe", "How's it going?")
        };
        await this.Load();
    }

    private async Task HubSetup() {
        this._messagingClient.HubConnection.On("Connected",this.ConnectedHandler);
        await this._messagingClient.StartAsync();
        if (this._messagingClient.IsConnected) {
            await this._messagingClient.Register(this._userAccount._id);
        }
    }

    private Task ConnectedHandler() {
        this._notificationService.Notify(NotificationSeverity.Success,"Success","Connected to server",duration:10000,closeOnClick:true);
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();
        var role=this._userService.GetUserRole();
        if (!string.IsNullOrWhiteSpace(this.Id) && this.Action.HasValue && this._userAccount != null) {
            this._selectedRequest = this._purchaseRequests.FirstOrDefault(e => e._id.ToString() == this.Id);
            if (this._selectedRequest != null) {
                this._userAction = (PrUserAction)this.Action.Value;
                switch(this._userAction) {
                    case PrUserAction.MODIFY:
                        if(role==nameof(PurchaseRequestRole.Requester) && this._selectedRequest.Requester.Username==this._userAccount?._id) {
                            await this.ModifyHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    case PrUserAction.APPROVE:
                        if(role==nameof(PurchaseRequestRole.Approver)) {
                            await this.ApproveRequestHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    case PrUserAction.ORDER:
                        if(role==nameof(PurchaseRequestRole.Purchaser)) {
                            await this.OrderRequestHandler();
                        } else {
                            this._notificationService.Notify(NotificationSeverity.Error,"Error","You are not authorized to perform this action");
                        }
                        break;
                    default:
                        this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
                        break;
                }
            }
        }
    }

    private async Task UserActionHandler(UserActionEventArg arg) {
        this._userAction = arg.Action;
        switch(this._userAction) {
            case PrUserAction.MODIFY:
                await this.ModifyHandler();
                break;
            case PrUserAction.CANCEL:
                await this.CancelRequestHandler();
                break;
            case PrUserAction.APPROVE:
                await this.ApproveRequestHandler();
                break;
            case PrUserAction.ORDER:
                await this.OrderRequestHandler();
                break;
            default:
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task ModifyHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.MODIFY);
                this.EditingTracker.StartEditing(this._userAccount._id,this._selectedRequest._id.ToString());
                //this._localStorage.SetItem(this._userAccount._id,this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task CancelRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.CANCEL);
                this.EditingTracker.StartEditing(this._userAccount._id,this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task ApproveRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.APPROVE);
                this.EditingTracker.StartEditing(this._userAccount._id,this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error",$"{user} is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task OrderRequestHandler() {
        if (this._selectedRequest != null) {
            var user = this.EditingTracker.IsAvailable(this._selectedRequest._id.ToString());
            if (string.IsNullOrEmpty(user)) {
                this._actionRequest = this._selectedRequest;
                this.TransitionTab(PrUserAction.ORDER);
                this.EditingTracker.StartEditing(this._userAccount._id,this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error",$"{user} is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }

    private async Task CompletedHandler(string id) {
        this.EditingTracker.FinishEditing(id);
        if (this.Action.HasValue && !string.IsNullOrWhiteSpace(this.Id)) {
            this._notificationService.Notify(NotificationSeverity.Info,"Info","Action completed successfully, Navigating");
            await Task.Delay(2000);
            this._navigationManager.NavigateTo("/");
        } else {
            await this.Load();
        }
    }
    
    private void EditTrackerTimeout(string username,string id) {
        if(this._userAccount._id == username) {
            if(this._actionRequest != null && this._actionRequest._id.ToString() == id) {
                this._selectedIndex = 0;
                this.Reset();
                InvokeAsync(StateHasChanged);
            }
        }
    }
    
    private void TabIndexChangedHandler(int tabIndex) {
        this._selectedIndex = tabIndex;
        if(tabIndex == 0 || tabIndex == 1) {
            this.Reset();
        }
    }
    
    private void Reset() {
        this._templateTabVisible = false;
        if(this._selectedRequest != null) {
            this.EditingTracker.FinishEditing(this._selectedRequest._id.ToString());
            this._selectedRequest = null;
        }
        this._actionRequest = null;
    }
    
    private void TransitionTab(PrUserAction action) {
        this._userAction=action;
        if (this._tabTemplates.TryGetValue(action, out var template)) {
            this._selectedIndex = 2;
            this._templateTabText = template.Name;
            this._tabIcon = template.Icon;
            this._templateTabVisible = true;
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,"Error","Invalid action");
        }
    }

    private async Task Load() {
        this._selectedIndex = 0;
        this.Reset();
        this._userAccount = this._userService.GetSessionUserProfile();
        if(this._userAccount != null) {
            await this.HubSetup();
            this.EditingTracker.UserTryClear(this._userAccount._id);
            this._purchaseRequests=await this._purchaseRequestService.GetPurchaseRequests(this._userAccount._id,this._userService.GetUserRole());
            this._purchaseRequests = this._purchaseRequests.OrderByDescending(e => e.Status).ToList();
            this._purchaseReqStatuses=this._purchaseRequests.Select(pr=>new PurchaseRequestStatus(pr._id.ToString(),pr.Title ?? "No Title", pr.Status)).ToList();
            Console.WriteLine($"User: {this._userAccount._id} has {_purchaseRequests.Count} requests");
        }
        await InvokeAsync(StateHasChanged);
    }
    
    public ValueTask DisposeAsync() {
        this.EditingTracker.OnTimeout -= this.EditTrackerTimeout;
        return ValueTask.CompletedTask;
    }

}