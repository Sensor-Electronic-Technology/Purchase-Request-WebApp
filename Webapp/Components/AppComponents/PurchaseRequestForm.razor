@using Domain.PurchaseRequests
@using Infrastructure.Services
@using SETiAuth.Domain.Shared.Authentication
<AuthorizeView>
    <Authorized>
        

        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenCard Style="width: 40%;">
                <RadzenStack>
                    <RadzenCard class="rz-background-color-series-4">
                        <RadzenText Text="Purchase Request Form" TextStyle="TextStyle.H6"/>
                        <RadzenText Text="Please fill out the form below to submit a purchase request."
                                    TextStyle="TextStyle.Body1"/>
                    </RadzenCard>
                    <RadzenCard class="rz-background-color-info">
                        <RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenFieldset Text="Approver">

                                    <RadzenDropDown Data="@_approvers"
                                                    @bind-Value="@this._selectedApprover"
                                                    TextProperty="FirstName" ValueProperty="Username"
                                                    Placeholder="Select an approver" AllowClear="true"/>

                                </RadzenFieldset>
                                <div class="rz-p-12 rz-text-align-center">
                                    <RadzenCheckBox TriState=false @bind-Value="@this._isUrgent" Name="IsUrgent"/>
                                    <RadzenLabel Text="Urgent" Component="IsUrgent" class="rz-ms-2"/>
                                </div>
                            </RadzenStack>
                            <RadzenFieldset Text="Purchase Request Title" Style="align-self:start;width: 100%">
                                <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                               @bind-Value="@this._purchaseReqInput.Title" 
                                               Style="width: 100%"/>
                            </RadzenFieldset>
                            <RadzenFieldset Text="Purchase Request Description">
                                <RadzenTextArea Placeholder="Enter a brief description of the purchase request" @bind-Value="@this._purchaseReqInput.Description"
                                                Style="width: 100%; height:100px;"
                                                oninput="event.target.style.height = Math.max(event.target.clientHeight, event.target.scrollHeight) + 'px';"/>
                            </RadzenFieldset>
                            <RadzenFieldset Text="Additional Email Message">
                                <RadzenTextArea Placeholder="Enter any additional message you would like appended to the email"
                                                @bind-Value="@this._purchaseReqInput.EmailMessage"
                                                oninput="event.target.style.height = Math.max(event.target.clientHeight, event.target.scrollHeight) + 'px';"
                                                Style="width: 100%; height:100px;"/>
                            </RadzenFieldset>
                            <RadzenFieldset Text="Update Purchase Request Form">
                                <RadzenUpload Multiple="false" Progress=@(args => OnProgress(args, "Single file upload")) Change="@this.OnClientChange"/>
                            </RadzenFieldset>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenStack>
            </RadzenCard>
            <RadzenCard Style="width: 50%">
                <RadzenStack>
                    <RadzenCard>
                        <RadzenText Text="Message Preview"/>
                        <RadzenButton Text="Refresh" Icon="cached" Click="OnPreviewRefresh"/>
                    </RadzenCard>
                    <RadzenCard>
                        <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 450px;" ShowToolbar="false" Mode="HtmlEditorMode.Design" />
                    </RadzenCard>
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    </Authorized>
</AuthorizeView>
@code {
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private IWebHostEnvironment environment { get; set; }
    private PurchaseRequestInput _purchaseReqInput = new();
    private string? _selectedApprover;
    private bool _isUrgent = false;
    private string _messagePreview = "";
    private List<UserAccountDto> _approvers = [];
    private string htmlValue = "<p>Enter your message here</p>";
    private string emailTemplate="";
    

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._approvers = await this._authApiService.GetApprovers();
        await this.LoadEmailTemplate();
    }
    
    void OnProgress(UploadProgressArgs args, string name) {
        Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");
        if (args.Progress == 100) {
            
            foreach (var file in args.Files) {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }
    
    async Task OnClientChange(UploadChangeEventArgs args) {
        Console.WriteLine($"Client-side upload changed");

        foreach (var file in args.Files) {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");
            
            try {
                long maxFileSize = 10 * 1024 * 1024;
                // read file
                var stream = file.OpenReadStream(maxFileSize);
                string filePath = Path.Combine(environment.WebRootPath, "AndrewFiles");
                DirectoryInfo info = new DirectoryInfo(filePath);
                if (!info.Exists) {
                    info.Create();
                }
                string path = Path.Combine(filePath, file.Name);
                await using FileStream outputFileStream = new FileStream(path, FileMode.Create);
                await stream.CopyToAsync(outputFileStream);
                stream.Close();
            } catch (Exception ex) {
                Console.WriteLine($"Client-side file read error: {ex.Message}");
            }
        }
    }

    private async Task LoadEmailTemplate() {
        using StreamReader reader = new StreamReader(@"wwwroot\EmailTemplate\EmailTemplate.htm");
        emailTemplate = await reader.ReadToEndAsync();
    }
    
    private async Task OnPreviewRefresh() {
        this.htmlValue=emailTemplate.Replace("{approver}",this._selectedApprover)
                                    .Replace("{requester}","Andrew Elmendorf")
                                    .Replace("{title}", this._purchaseReqInput.Title)
                                    .Replace("{description}", this._purchaseReqInput.Description)
                                    .Replace("{additional}", this._purchaseReqInput.EmailMessage);
        await InvokeAsync(StateHasChanged);
    }

}