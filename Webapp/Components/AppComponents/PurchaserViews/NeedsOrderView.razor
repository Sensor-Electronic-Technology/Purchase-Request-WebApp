@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Webapp.Data
@using TimeProvider = Infrastructure.Services.TimeProvider
@using Webapp.Services.Authentication
@using Infrastructure.Services

@if (this.PurchaseRequest == null && this._canPerformAction) {
    <p>Loading...</p>
} else {
    <RadzenSteps SelectedIndex="@this._selectedStep"
                 SelectedIndexChanged="SelectedStepChangedHandler">
        <Steps>
            <RadzenStepsItem Text="Order Form" NextText="Internal Email">
                <RadzenCard class="info-area" Style="max-height: 600px; overflow: scroll">
                    <RadzenStack Gap="15">
                        <RadzenCard class="area-header">
                            <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" class="rz-m-0">
                                <RadzenIcon Icon="package_2" class="rz-me-1"/><b>Purchasing Input</b>
                            </RadzenText>
                            <RadzenText Text="Enter payment terms, verify purchase items and verify shipping"
                                        TextAlign="TextAlign.Center"
                                        TextStyle="TextStyle.Subtitle1"/>
                        </RadzenCard>
                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenStack Orientation="Orientation.Horizontal"
                                         JustifyContent="JustifyContent.Center">
                                <RadzenFieldset Text="Select Payment">
                                    <RadzenFormField Text="Payment Term">
                                        <RadzenDropDown TValue="PaymentTerm"
                                                        Data="@PaymentTerm.List"
                                                        TextProperty="Name"
                                                        AllowClear="true"
                                                        Value="@this._selectedPaymentTerm"
                                                        ValueChanged="@this.PaymentTermChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Verify Shipping">
                                    <ShippingSelector @bind-ShippingType="@this.PurchaseOrderDto.ShippingMethod"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Verify or Change Ship To">
                                    <RadzenFormField Text="Ship To">
                                        <RadzenTextBox Placeholder="Ship To(Attention)" @bind-Value="@this.PurchaseOrderDto.ShipTo"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                                <RadzenFieldset Text="Purchase Type">
                                    <RadzenFormField Text="Select Purchase Type">
                                        <RadzenDropDown TValue="PurchaseType"
                                                        Data="@PurchaseType.List"
                                                        TextProperty="Value"
                                                        AllowClear="true"
                                                        Value="@this._selectedPurchaseType"
                                                        ValueChanged="@this.PurchaseTypeChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Item Type">
                                    <RadzenFormField Text="Select Item Type">
                                        <RadzenDropDown TValue="ItemType"
                                                        Data="@ItemType.List"
                                                        TextProperty="Value"
                                                        AllowClear="true"
                                                        Value="@this._selectedItemType"
                                                        ValueChanged="@this.ItemTypeChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenStack>
                        
                        <PurchaseItemsTable Mode="EditMode.EDIT"
                                            ShowHeader="false"
                                            @bind-PurchaseItems="@this.PurchaseOrderDto.Items"/>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Internal Email" PreviousText="Order Form" NextText="Vendor">
                <RadzenStack>
                    <RadzenCard class="area-header">
                        <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" class="rz-m-0">
                            <RadzenIcon Icon="mail" class="rz-me-1"/><b>Internal Email Settings</b>
                        </RadzenText>
                        <RadzenText Text="Check recipients and add any additional emails needed"
                                    TextAlign="TextAlign.Center"
                                    TextStyle="TextStyle.Subtitle1"/>
                    </RadzenCard>
                    <RadzenFieldset Text="Email Recipients">
                        <RadzenText TextStyle="TextStyle.H6" Text="Emails will be sent to the following users:"/>
                        <RadzenText Text="@String.Join(" , ", this._emailList)" TextStyle="TextStyle.Subtitle1"/>
                    </RadzenFieldset>
                    <EmailPickList CcList="@this._ccList"
                                   CcListChanged="EmailListChangedHandler"
                                   TextStyle="TextStyle.Body1"
                                   IsCollapsed="true"/>
                </RadzenStack>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Vendor" NextText="Finalize">
                <VendorSelector @bind-Vendor="@this.PurchaseOrderDto.Vendor" Mode="EditMode.EDIT"/>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Finalize" PreviousText="Internal Email">
                <RadzenCard Variant="Variant.Outlined" Style="max-height: 700px; overflow: scroll;">
                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <RadzenStack>
                                <AlertListView UserActionAlerts="@this._orderAlerts"/>
                                <RadzenFieldset Text="Email Vendor">
                                    <RadzenStack Orientation="Orientation.Vertical">
                                        <div class="rz-p-1 rz-text-align-center">
                                            <RadzenCheckBox TValue="bool"
                                                            Value="@this._sendExternalEmail"
                                                            ValueChanged="SendEmailChangedHandler"
                                                            Name="SendExternal"/>
                                            <RadzenLabel Text="Send Vendor Email?"
                                                         Component="SendExternal" class="rz-ms-2"/>
                                        </div>
                                        @if (this._sendExternalEmail) {
                                            <RadzenFieldset Text="Email Setup">
                                                <RadzenStack>
                                                    <div class="rz-p-1 rz-text-align-center">
                                                        <RadzenCheckBox TValue="bool"
                                                                        Value="@this._includeInternalEmails"
                                                                        ValueChanged="@IncludeInternalsChangedHandler"
                                                                        Name="IncludeInternal"/>
                                                        <RadzenLabel Text="Include Internal Emails?"
                                                                     Component="IncludeInternal" class="rz-ms-2"/>
                                                    </div>
                                                    <RadzenLabel Text="Enter emails with comma separation" Component="ToEmails"/>
                                                    <RadzenTextBox Value="@this._toEmails" ValueChanged="@ToEmailChangedHandler" Placeholder="one@email.com,two@email.com" Name="ToEmails" Style="width: 100%"/>
                                                    <RadzenLabel Text="Enter CC emails with coma separation" Component="CCEmails"></RadzenLabel>
                                                    <RadzenTextBox @bind-Value="@this._ccEmails" Placeholder="one@email.com,two@email.com" Name="CCEmails" Style="width: 100%"/>
                                                    <RadzenLabel Text="Enter Subject" Component="EmailSubject"></RadzenLabel>
                                                    <RadzenTextBox @bind-Value="@this._subject" Placeholder="Purchase Order" Name="EmailSubject" Style="width: 100%"/>
                                                    <RadzenLink Path="@($"mailto:{this._toEmails}?cc={this._ccEmails}&subject={Uri.EscapeDataString(this._subject)}")"
                                                                class="align-self-center"
                                                                Style="width: fit-content;">
                                                        <RadzenStack Orientation="Orientation.Vertical" Gap="0" AlignItems="AlignItems.Center">
                                                            <RadzenImage Path="images/mail-to.svg" Style="width: 48px;height: 48px;"/>
                                                            <RadzenText>Click to open Outlook</RadzenText>
                                                        </RadzenStack>
                                                    </RadzenLink>
                                                </RadzenStack>
                                            </RadzenFieldset>
                                        }
                                    </RadzenStack>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Submit/Cancel">
                                    <RadzenStack Orientation="Orientation.Horizontal"
                                                 AlignItems="AlignItems.Center"
                                                 JustifyContent="JustifyContent.Center">
                                        <RadzenButton Text="Submit"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Click="@this.SubmitHandler"
                                                      Disabled="@(!this._docLoaded)"
                                                      Style="width: 150px; height: 60px;"/>
                                        <RadzenButton Text="Cancel"
                                                      ButtonStyle="ButtonStyle.Danger"
                                                      Click="@this.Cancel"
                                                      Style="width: 150px; height: 60px;"/>
                                    </RadzenStack>
                                </RadzenFieldset>
                                <RadzenFormField Text="Comments">
                                    <RadzenTextArea Value="@this.PurchaseOrderDto.Comments"
                                                    ValueChanged="@CommentsChangedHandler"
                                                    Rows="5"/>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenTabs class="rz-w-100">
                                <Tabs>
                                    <RadzenTabsItem Text="EmailPreview" class="tab-color-1">
                                        <DxRichEdit @ref="@this._richEdit"
                                                    @bind-DocumentContent="@this._documentContent"
                                                    DocumentLoaded="@this.DocumentLoadedHandler"
                                                    DocumentFormat="DocumentFormat.OpenXml"
                                                    BarMode="BarMode.None"
                                                    ViewType="ViewType.Simple"
                                                    ReadOnly="false" CssClass="w-100">
                                            <MailMergeSettings>
                                                <DxMailMergeSettings Data="@this.MailMerge"
                                                                     ViewMergedData="true"
                                                                     ActiveRecord="1"/>
                                            </MailMergeSettings>
                                        </DxRichEdit>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Text="PO Preview" class="tab-color-2">
                                        <PoPdfPreview PurchaseOrderDto="@this.PurchaseOrderDto"/>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>
}

@code {
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private IBlazorDownloadFileService _downloadService { get; set; }
    [Inject] private PoNumberService _poNumberService { get; set; }
    //[Inject] private UserService _userService { get; set; }

    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; } = new();
    [Parameter] public PurchaseOrderDto? PurchaseOrderDto { get; set; }
    [Parameter] public EventCallback<PurchaseOrderDto?> PurchaseOrderDtoChanged { get; set; }
    [Parameter] public UserProfile UserProfile { get; set; }
    
    [Parameter] public EventCallback FinalView { get; set; }
    [Parameter] public EventCallback ResetView { get; set; }
    [Parameter] public EventCallback<byte[]> Submit { get; set; }
    [Parameter] public EventCallback Cancel { get; set; }
    
    private DxRichEdit _richEdit;
    private string _toEmails="";
    private string _ccEmails="";
    private string _subject="";
    private List<ApproveMailMerge> MailMerge { get; set; } = [];
    private List<string> _ccList = [];
    private List<string> _emailList = [];
    private bool _docLoaded;
    private int _lastStep = 3;
    private byte[]? _documentContent;
    private int _selectedStep = 0;
    private bool _sendExternalEmail = false;
    private bool _includeInternalEmails = false;
    private PaymentTerm? _selectedPaymentTerm;
    private bool _poNumberGenerated = false;
    private List<UserActionAlert> _orderAlerts = [];
    private byte[]? _emailDocument;
    private bool _canPerformAction = true;
    private PurchaseType? _selectedPurchaseType;
    private ItemType? _selectedItemType;
    

    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._docLoaded = false;
        await this.Load();
    }
    
    private async Task SubmitHandler() {
        this.UpdateMailMerge();
        this._emailDocument=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
        /*await Task.Delay(500);*/
        await this.Submit.InvokeAsync(this._emailDocument);
    }

    private void UpdateMailMerge() {
        this.MailMerge = [new ApproveMailMerge() {
            PrAction = "Request Ordered",
            Title = this.PurchaseRequest.Title ?? "",
            Approver = this.PurchaseRequest.Approver.Name ?? "",
            Requester = this.PurchaseOrderDto.Requester.Name ?? "",
            ApprovalComments = this.PurchaseOrderDto.Comments ?? "",
            CommentsTitle = "Comments",
        }];
    }
    
    private Task PaymentTermChangedHandler(PaymentTerm payment) {
        this._selectedPaymentTerm=payment;
        this.PurchaseOrderDto.PaymentTerms = payment;
        return Task.CompletedTask;
    }
    
    private Task PurchaseTypeChangedHandler(PurchaseType purchaseType) {
        this._selectedPurchaseType = purchaseType;
        this.PurchaseOrderDto.PurchaseType = purchaseType;
        return Task.CompletedTask;
    }
    
    private Task ItemTypeChangedHandler(ItemType itemType) {
        this._selectedItemType = itemType;
        this.PurchaseOrderDto.ItemType = itemType;
        return Task.CompletedTask;
    }
    
    private async Task DocumentLoadedHandler(Document obj) {
        this.UpdateMailMerge();
        this._docLoaded = true;
        this._emailDocument=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
    }
    
    private async Task EmailListChangedHandler(List<string> ccList) {
        this._ccList = ccList;
        this.PurchaseOrderDto.EmailCopyList = ccList;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
    }

    private async Task CommentsChangedHandler(string comment) {
        this.PurchaseOrderDto.Comments=comment;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
    }
    
    private async Task Load() {
        this._documentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/ApproveRejectTemplate.docx");
        this.MailMerge = [new ApproveMailMerge() {
            PrAction = $"Request Ordered",
            Title = this.PurchaseRequest?.Title ?? "",
            Approver = this.PurchaseRequest?.Approver.Name ?? "",
            Requester = this.PurchaseOrderDto?.Requester.Name ?? "",
            ApprovalComments = this.PurchaseOrderDto?.Comments ?? "",
            CommentsTitle = "Order Comments",
        }];

        if (this.PurchaseOrderDto != null) {
            this._emailList.Add(UserProfile.Email);
            this.PurchaseOrderDto.Purchaser = new PrPurchaser() {
                Username = UserProfile._id,
                Name = $"{UserProfile.FirstName} {UserProfile.LastName}",
                Email = UserProfile.Email
            };
            this._emailList.Add(this.PurchaseOrderDto.Requester?.Email ?? "");
            this._emailList.Add(this.PurchaseRequest.Approver?.Email ?? "");
            this._ccList.AddRange(this.PurchaseOrderDto.EmailCopyList);
            this._canPerformAction = true;
        } else {
            this._canPerformAction = false;
        }
    }

    private Task ToEmailChanged(string toEmails) {
        return Task.CompletedTask;
    }

    private Task SendEmailChangedHandler(bool value) {
        this._toEmails=this.PurchaseOrderDto?.Vendor?.Email ?? "";
        this._ccEmails = "";
        this._sendExternalEmail=value;
        this.GenerateOrderAlerts();
        return Task.CompletedTask;
    }
    
    private Task IncludeInternalsChangedHandler(bool value) {
        if(value==false) {
            this._toEmails=this.PurchaseOrderDto?.Vendor?.Email ?? "";
            this._ccEmails="";
        } else {
            this._toEmails=this.PurchaseOrderDto?.Vendor?.Email ?? "";
            this._ccEmails=this.PurchaseOrderDto?.Requester?.Email ?? "";
            this._ccEmails += ",";
            this._ccEmails+=this.PurchaseRequest?.Approver?.Email ?? "";
            this._ccEmails+=this.PurchaseOrderDto?.EmailCopyList.Aggregate("", (current, next) => current + "," + next);
        }
        this._includeInternalEmails=value;
        return Task.CompletedTask;
    }

    private void GenerateOrderAlerts() {
        bool okay = true;
        this._orderAlerts.Clear();
        if (this._sendExternalEmail) {
            if(string.IsNullOrWhiteSpace(this._toEmails)) {
                this._orderAlerts.Add(new UserActionAlert() {
                    Item = "Email Vendor",
                    Message = "No email address provided for vendor",
                    Okay = false
                });
                okay = false;
            }
        }
        if (okay) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item="Purchase Request",
                Message = "Purchase Request is ready for submission",
                Okay = true,
                Style = AlertStyle.Success
            });
        }
    }
    
    private void ToEmailChangedHandler(string obj) {
        this._toEmails=obj;
        this.GenerateOrderAlerts();
    }
    
    private async Task SelectedStepChangedHandler(int step) {
        if (this._selectedStep==0 && step != 0) {
            if(this._selectedPaymentTerm==null) {
                this._notificationService.Notify(NotificationSeverity.Error,
                    "Missing Data","Payment Term must be selected before continuing", 5000, closeOnClick:true);
                this._selectedStep = 0;
            } else {
                this._selectedStep=step;
                if(step==this._lastStep) {
                    this.GenerateOrderAlerts();
                    if (!this._poNumberGenerated) {
                        var poNumber = await this._poNumberService.GetNextPoNumber(this.PurchaseOrderDto.Requester.Initials,TimeProvider.Now().Year, this.PurchaseRequest._id);
                        if (!string.IsNullOrEmpty(poNumber._id)) {
                            this.PurchaseOrderDto.PoNumber = poNumber._id;
                            this._poNumberGenerated = true;
                        }
                    }
                    await this.FinalView.InvokeAsync();
                }
            }
        } else {
            if (step == this._lastStep && this._selectedStep != this._lastStep) {
                this.GenerateOrderAlerts();
                if (!this._poNumberGenerated) {
                    var poNumber = await this._poNumberService.GetNextPoNumber(this.PurchaseOrderDto.Requester.Initials,TimeProvider.Now().Year, this.PurchaseRequest._id);
                    if (!string.IsNullOrEmpty(poNumber._id)) {
                        this.PurchaseOrderDto.PoNumber = poNumber._id;
                        this._poNumberGenerated = true;
                    }
                }
                await this.FinalView.InvokeAsync();
                this._selectedStep = step;
                return;
            }
            if(step!=this._lastStep && this._selectedStep==this._lastStep) {
                await this.ResetView.InvokeAsync();
                this._selectedStep = step;
                return;
            }
            this._selectedStep = step;
        }
    }
}