@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Webapp.Data
@using Infrastructure.Services
<style>
    .rz-formfield-content {
        padding: 0.6em !important;
    }
</style>
@if (this.PurchaseRequest == null && this._canPerformAction && this.PurchaseOrderDto != null) {
    <p>Loading...</p>
} else {
    <RadzenSteps SelectedIndex="@this._selectedStep"
                 SelectedIndexChanged="SelectedStepChangedHandler">
        <Steps>
            <RadzenStepsItem Text="Order Form" NextText="Internal Email">
                <RadzenCard class="info-area" Style="max-height: 900px; overflow: scroll">
                    <RadzenStack Gap="15">
                        <RadzenCard class="area-header">
                            <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" class="rz-m-0">
                                <RadzenIcon Icon="package_2" class="rz-me-1"/><b>Order Form</b>
                            </RadzenText>
                            <RadzenText Text="Enter payment terms, purchase type, item type,verify purchase items and verify shipping"
                                        TextAlign="TextAlign.Center"
                                        TextStyle="TextStyle.Subtitle1"/>
                        </RadzenCard>
                        <RadzenStack Orientation="Orientation.Vertical">
                            <RadzenFormField Text="Vendor" class="align-self-center" Style="width:350px;">
                                <RadzenTextBox Placeholder="Vendor Name" Value="@this.PurchaseOrderDto?.Vendor.Name" ReadOnly="true"/>
                            </RadzenFormField>
                            <RadzenStack Orientation="Orientation.Horizontal"
                                         JustifyContent="JustifyContent.Center">
                                <RadzenFieldset Text="Select Payment">
                                    <RadzenFormField Text="Payment Term">
                                        <RadzenDropDown TValue="PaymentTerm"
                                                        Data="@PaymentTerm.List"
                                                        TextProperty="Name"
                                                        AllowClear="true"
                                                        Value="@this._selectedPaymentTerm"
                                                        ValueChanged="@this.PaymentTermChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Verify Shipping">
                                    <ShippingSelector @bind-ShippingType="@this.PurchaseOrderDto.ShippingMethod"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Verify or Change Ship To">
                                    <RadzenFormField Text="Ship To">
                                        <RadzenTextBox Placeholder="Ship To(Attention)" @bind-Value="@this.PurchaseOrderDto.ShipTo"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                                <RadzenFieldset Text="Purchase Type">
                                    <RadzenFormField Text="Select Purchase Type">
                                        <RadzenDropDown TValue="PurchaseType"
                                                        Data="@PurchaseType.List"
                                                        TextProperty="Value"
                                                        AllowClear="true"
                                                        Value="@this._selectedPurchaseType"
                                                        ValueChanged="@this.PurchaseTypeChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Item Type">
                                    <RadzenFormField Text="Select Item Type">
                                        <RadzenDropDown TValue="ItemType"
                                                        Data="@ItemType.List"
                                                        TextProperty="Value"
                                                        AllowClear="true"
                                                        Value="@this._selectedItemType"
                                                        ValueChanged="@this.ItemTypeChangedHandler"
                                                        class="item-selector"/>
                                    </RadzenFormField>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenStack>
                        <PurchaseItemsTable Mode="EditMode.EDIT"
                                            ShowHeader="false"
                                            @bind-PurchaseItems="@this.PurchaseOrderDto.Items"/>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Internal Email" PreviousText="Order Form" NextText="Vendor">
                <RadzenStack>
                    <RadzenCard class="area-header">
                        <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.H6" class="rz-m-0">
                            <RadzenIcon Icon="mail" class="rz-me-1"/><b>Internal Email Settings</b>
                        </RadzenText>
                        <RadzenText Text="Check recipients and add any additional emails needed"
                                    TextAlign="TextAlign.Center"
                                    TextStyle="TextStyle.Subtitle1"/>
                    </RadzenCard>
                    <RadzenFieldset Text="Email Recipients">
                        <RadzenText TextStyle="TextStyle.H6" Text="Emails will be sent to the following users:"/>
                        <RadzenText Text="@String.Join(" , ", this._emailList)" TextStyle="TextStyle.Subtitle1"/>
                    </RadzenFieldset>
                    <EmailPickList CcList="@this._ccList"
                                   CcListChanged="EmailListChangedHandler"
                                   TextStyle="TextStyle.Body1"
                                   IsCollapsed="true"/>
                </RadzenStack>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Vendor" NextText="Finalize">
                <RadzenStack>
                    <ExternalEmailForm PurchaseOrderDto="@this.PurchaseOrderDto"
                                       ApproverEmail="@this.PurchaseRequest?.Approver.Email"/>
                    <VendorSelector @bind-Vendor="@this.PurchaseOrderDto.Vendor" Mode="EditMode.EDIT"/>
                </RadzenStack>
                
            </RadzenStepsItem>
            <RadzenStepsItem Text="Finalize" PreviousText="Internal Email">
                <RadzenCard Variant="Variant.Outlined" >
                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <RadzenStack>
                                <AlertListView UserActionAlerts="@this._orderAlerts"/>

                                <RadzenFieldset Text="Submit/Cancel">
                                    <RadzenStack Orientation="Orientation.Horizontal"
                                                 AlignItems="AlignItems.Center"
                                                 JustifyContent="JustifyContent.Center">
                                        <RadzenButton Text="Submit"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Click="@this.SubmitHandler"
                                                      Disabled="@(!this._docLoaded || !this._canSave)"
                                                      Style="width: 150px; height: 60px;"/>
                                        <RadzenButton Text="Cancel"
                                                      ButtonStyle="ButtonStyle.Danger"
                                                      Click="@this.Cancel"
                                                      Style="width: 150px; height: 60px;"/>
                                    </RadzenStack>
                                </RadzenFieldset>
                                <DxRichEdit @ref="@this._richEdit"
                                            @bind-DocumentContent="@this._documentContent"
                                            DocumentLoaded="@this.DocumentLoadedHandler"
                                            DocumentFormat="DocumentFormat.OpenXml"
                                            BarMode="BarMode.None"
                                            ViewType="ViewType.Simple"
                                            ReadOnly="false" style="width: 100%;height: 400px;">
                                    <MailMergeSettings>
                                        <DxMailMergeSettings Data="@this.MailMerge"
                                                             ViewMergedData="true"
                                                             ActiveRecord="1"/>
                                    </MailMergeSettings>
                                </DxRichEdit>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenTabs class="rz-w-100" RenderMode="TabRenderMode.Server">
                                <Tabs>
                                    <RadzenTabsItem Text="Email and Po Comments" class="tab-color-1">
                                        <RadzenStack>
                                            <RadzenFormField Text="Email Comments">
                                                <RadzenTextArea Value="@this.PurchaseOrderDto?.EmailComments"
                                                                ValueChanged="@EmailCommentsChangedHandler"
                                                                Rows="5"/>
                                            </RadzenFormField>
                                            <RadzenFormField Text="Po Comments">
                                                <RadzenTextArea Value="@this.PurchaseOrderDto?.PoComments"
                                                                ValueChanged="@PoCommentsChangedHandler"
                                                                Rows="5"/>
                                            </RadzenFormField>
                                        </RadzenStack>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Text="PO Preview" class="tab-color-2">
                                        <PoPdfPreview PurchaseOrderDto="@this.PurchaseOrderDto"/>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem Text="Quotes" class="tab-color-3">
                                        <QuotesView Quotes="@this.PurchaseRequest?.Quotes" Mode="EditMode.VIEW"/>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>
}

@code {
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private IBlazorDownloadFileService _downloadService { get; set; }
    [Inject] private PoNumberService _poNumberService { get; set; }
    [Inject] private AppTimeProvider _timeProvider { get; set; }

    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; } = new();
    [Parameter] public PurchaseOrderDto? PurchaseOrderDto { get; set; }
    [Parameter] public EventCallback<PurchaseOrderDto?> PurchaseOrderDtoChanged { get; set; }
    [Parameter] public UserProfile UserProfile { get; set; }
    
    [Parameter] public EventCallback FinalView { get; set; }
    [Parameter] public EventCallback ResetView { get; set; }
    [Parameter] public EventCallback<byte[]> Submit { get; set; }
    [Parameter] public EventCallback Cancel { get; set; }
    
    private DxRichEdit _richEdit;
    private List<PoMailMerge> MailMerge { get; set; } = [];
    private List<string> _ccList = [];
    private List<string> _emailList = [];
    private bool _docLoaded;
    private int _lastStep = 3;
    private byte[]? _documentContent;
    private int _selectedStep = 0;
    private PaymentTerm? _selectedPaymentTerm;
    private bool _poNumberGenerated = false;
    private List<UserActionAlert> _orderAlerts = [];
    private byte[]? _emailDocument =[];
    private bool _canPerformAction = true;
    private PurchaseType? _selectedPurchaseType;
    private ItemType? _selectedItemType;
    private bool _canSave = false;
    private int _selectedTabIndex = 0;

    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._docLoaded = false; 
        await this.Load();
    }

    protected override Task OnParametersSetAsync() {
        if (this.PurchaseOrderDto != null) {
            this.UpdateMailMerge();
        }
        return base.OnParametersSetAsync();
    }

    private async Task SubmitHandler() {
        this.UpdateMailMerge();
        this._emailDocument=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        this._selectedTabIndex = 0;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
        await this.Submit.InvokeAsync(this._emailDocument);
    }

    private void UpdateMailMerge() {
        this.MailMerge=[new PoMailMerge() {
            PrAction = "Request Ordered",
            Title = this.PurchaseRequest?.Title ?? "",
            Approver = this.PurchaseRequest?.Approver.Name ?? "",
            Requester = this.PurchaseOrderDto?.Requester?.Name ?? "",
            Comments = this.PurchaseOrderDto?.EmailComments ?? "",
            CommentsTitle = "Comments",
        }];
        StateHasChanged();
    }
    
    private Task PaymentTermChangedHandler(PaymentTerm payment) {
        this._selectedPaymentTerm=payment;
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.PaymentTerms = payment;
        return Task.CompletedTask;
    }
    
    private Task PurchaseTypeChangedHandler(PurchaseType purchaseType) {
        this._selectedPurchaseType = purchaseType;
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.PurchaseType = purchaseType;
        return Task.CompletedTask;
    }
    
    private Task ItemTypeChangedHandler(ItemType itemType) {
        this._selectedItemType = itemType;
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.ItemType = itemType;
        return Task.CompletedTask;
    }
    
    private  Task DocumentLoadedHandler(Document obj) {
        this._docLoaded = true;
        return Task.CompletedTask;
    }
    
    private async Task EmailListChangedHandler(List<string> ccList) {
        this._ccList = ccList;
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.EmailCopyList = ccList;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
    }

    private async Task EmailCommentsChangedHandler(string comment) {
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.EmailComments=comment;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task PoCommentsChangedHandler(string comment) {
        this.PurchaseOrderDto ??= new PurchaseOrderDto();
        this.PurchaseOrderDto.PoComments=comment;
        await this.PurchaseOrderDtoChanged.InvokeAsync(this.PurchaseOrderDto);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task Load() {
        this._documentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/PoEmailTemplate.docx");
        this.MailMerge=[new PoMailMerge() {
            PrAction = $"Request Ordered",
            Title = this.PurchaseRequest?.Title ?? "",
            Approver = this.PurchaseRequest?.Approver.Name ?? "",
            Requester = this.PurchaseOrderDto?.Requester?.Name ?? "",
            Comments = this.PurchaseOrderDto?.EmailComments ?? "",
            CommentsTitle = "Order Comments",
        }];

        if (this.PurchaseOrderDto != null) {
            this._emailList.Add(UserProfile.Email);
            this.PurchaseOrderDto.Purchaser = new PrPurchaser() {
                Username = UserProfile._id,
                Name = $"{UserProfile.FirstName} {UserProfile.LastName}",
                Email = UserProfile.Email
            };
            this._emailList.Add(this.PurchaseOrderDto.Requester?.Email ?? "");
            this._emailList.Add(this.PurchaseRequest?.Approver?.Email ?? "");
            this._ccList.AddRange(this.PurchaseOrderDto.EmailCopyList);
            this._canPerformAction = true;
        } else {
            this._canPerformAction = false;
        }
    }

    private Task ToEmailChanged(string toEmails) {
        return Task.CompletedTask;
    }

    private void GenerateOrderAlerts() {
        bool okay = true;
        this._orderAlerts.Clear();

        if (string.IsNullOrWhiteSpace(this.PurchaseOrderDto?.ShippingMethod)) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item = "Shipping Method",
                Message = "Shipping Method must be selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
            okay = false;
        }
        
        if(string.IsNullOrWhiteSpace(this.PurchaseOrderDto?.PurchaseType)) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item = "Purchase Type",
                Message = "Purchase Type must be selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
            okay = false;
        } else {
            if(PurchaseType.TryFromValue(this.PurchaseOrderDto?.PurchaseType, out var purchaseType)) {
                if (purchaseType.Name == PurchaseType.PurchaseOrderType.Name) {
                    if (string.IsNullOrWhiteSpace(this.PurchaseOrderDto?.ShipTo)) {
                        this._orderAlerts.Add(new UserActionAlert() {
                            Item = "Ship To",
                            Message = "Ship To cannot be empter when Purchase Type is Purchase Order",
                            Okay = false,
                            Style = AlertStyle.Danger
                        });
                        okay = false;
                    }
                }
            }
        }
        
        if(string.IsNullOrWhiteSpace(this.PurchaseOrderDto?.ItemType)) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item = "Item Type",
                Message = "Item Type must be selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
            okay = false;
        }

        if (string.IsNullOrWhiteSpace(this.PurchaseOrderDto?.PaymentTerms)) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item="Payment Type",
                Message = "Payment Type must be selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
            okay = false;
        }

        this._canSave = okay;
        if (okay) {
            this._orderAlerts.Add(new UserActionAlert() {
                Item="Purchase Request",
                Message = "Purchase Request is ready for submission",
                Okay = true,
                Style = AlertStyle.Success
            });
        }
    }
    
    private async Task SelectedStepChangedHandler(int step) {
        if (this._selectedStep==0 && step != 0) {
            this._selectedStep=step;
            if(step==this._lastStep) {
                this.GenerateOrderAlerts();
                if (!this._poNumberGenerated && this.PurchaseOrderDto != null && this.PurchaseRequest != null) {
                    var poNumber = await this._poNumberService.GetNextPoNumber(this.PurchaseOrderDto.Requester?.Initials ?? "UN",this._timeProvider.Now().Year, this.PurchaseRequest._id);
                    if (!string.IsNullOrEmpty(poNumber?._id)) {
                        this.PurchaseOrderDto.PoNumber = poNumber._id;
                        this._poNumberGenerated = true;
                    }
                }
                await this.FinalView.InvokeAsync();
            }
        } else {
            if (step == this._lastStep && this._selectedStep != this._lastStep) {
                this.GenerateOrderAlerts();
                if (!this._poNumberGenerated && this.PurchaseOrderDto != null && this.PurchaseRequest != null) {
                    var poNumber = await this._poNumberService.GetNextPoNumber(this.PurchaseOrderDto.Requester?.Initials ?? "UN",this._timeProvider.Now().Year, this.PurchaseRequest._id);
                    if (!string.IsNullOrEmpty(poNumber?._id)) {
                        this.PurchaseOrderDto.PoNumber = poNumber._id;
                        this._poNumberGenerated = true;
                    }
                }
                await this.FinalView.InvokeAsync();
                this._selectedStep = step;
                return;
            }
            if(step!=this._lastStep && this._selectedStep==this._lastStep) {
                await this.ResetView.InvokeAsync();
                this._selectedStep = step;
                return;
            }
            this._selectedStep = step;
        }
    }
}