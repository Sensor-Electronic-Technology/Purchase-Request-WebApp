@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Infrastructure.Services
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@using TimeProvider = Infrastructure.Services.TimeProvider
<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content:left;
    }
</style>
<RadzenSplitter>
    <RadzenSplitterPane Size="50%" Collapsible="false">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard>
                    <NeedsOrderView PurchaseRequest="@this.PurchaseRequest"
                                    @bind-PurchaseOrderDto="@this._purchaseOrderDto"
                                    ResetView="@(()=> { this._isCollapsed = false; })"
                                    FinalView="@(()=> { this._isCollapsed = true; })"
                                    Submit="@this.SubmitHandler"
                                    Cancel="@this.CancelHandler"/>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="50%" Collapsed="@this._isCollapsed">
        <PurchaseRequestView @bind-PurchaseRequest="@this.PurchaseRequest"
                             Mode="EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>


@code {
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private SpinnerService _spinnerService { get; set; }
    [Parameter] public PurchaseRequest PurchaseRequest { get; set; }
    [Parameter] public EventCallback<string> ActionCompleted { get; set; }
    private bool _isCollapsed = false;
    private PurchaseOrderDto _purchaseOrderDto=new();

    protected override Task OnInitializedAsync() {
        this._purchaseOrderDto = this.PurchaseRequest.ToPurchaseOrderDto();
        this._purchaseOrderDto.Date = TimeProvider.Now();
        return base.OnInitializedAsync();
    }

    private async Task SubmitHandler(byte[] emailDocument) {
        this._spinnerService.Show("Submitting Order....");
        var success = await this._purchaseRequestService.OrderPurchaseRequest(this._purchaseOrderDto, emailDocument);
        if (success) {
            this._notificationService.Notify(NotificationSeverity.Success,"Ordered","Purchase request ordered successfully.");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,"Order Error","There was an error ordering the purchase request.");
        }
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
        this._spinnerService.Hide();
    }
    
    private async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
    
}