@using Domain.PurchaseRequests.Model
@using Infrastructure.Services
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication

<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content:left;
    }
</style>
<RadzenSplitter>
    <RadzenSplitterPane Size="45%" Collapsible="false">
        <RadzenCard class="rz-background-color-info-dark">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard class="rz-background-color-series-4">
                    <RadzenText Text="Order/Cancel Form"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.H5"/>
                    <RadzenText Text="Select action then press submit"
                                TextAlign="TextAlign.Center"
                                TextStyle="TextStyle.Subtitle1"/>
                </RadzenCard>
                <RadzenCard>
                    @*<NeedsApprovalView @bind-PurchaseRequest="@PurchaseRequest"
                                       @bind-ApproveRequestInput="@this._approveRequestInput"
                                       Submit="@this.SubmitHandler"
                                       Cancel="@this.CancelHandler"/>*@
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="55%">
        <PurchaseRequestView @bind-PurchaseRequest="@this.PurchaseRequest"
                             Mode="EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>


@code {
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private SpinnerService _spinnerService { get; set; }
    [Parameter] public PurchaseRequest PurchaseRequest { get; set; }
    [Parameter] public EventCallback<string> ActionCompleted { get; set; }
    
    
    private async Task SubmitHandler() {
        /*if(this._approveRequestInput.Action.Name==PurchaseRequestAction.Approve.Name) {
            var message="Submitting Approval...";
            this._spinnerService.Show(message);
            var success = await this._purchaseRequestService.ApproveRejectPurchaseRequest(this._approveRequestInput, this.PurchaseRequest);
            await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
        } else if(this._approveRequestInput.Action.Name==PurchaseRequestAction.Reject.Name) {
            var message="Submitting Rejection...";
            this._spinnerService.Show(message);
            var success = await this._purchaseRequestService.ApproveRejectPurchaseRequest(this._approveRequestInput, this.PurchaseRequest);
            await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
        }
        this._spinnerService.Hide();*/

    }
    
    private async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
    
}