@using Domain.PurchaseRequests.Dto
@using Infrastructure.Services
@using Webapp.Data
@inherits UserActionComponent
<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content:left;
    }
</style>
<RadzenSplitter>
    <RadzenSplitterPane Size="50%" Collapsible="false">
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenCard>
                    <NeedsOrderView PurchaseRequest="@this.PurchaseRequest"
                                    @bind-PurchaseOrderDto="@this._purchaseOrderDto"
                                    ResetView="@(()=> { this._isCollapsed = false; })"
                                    FinalView="@(()=> { this._isCollapsed = true; })"
                                    UserProfile="@this.UserProfile"
                                    Submit="@this.OrderSubmitHandler"
                                    Cancel="@this.CancelHandler"/>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="50%" Collapsed="@this._isCollapsed">
        <PurchaseRequestView @bind-PurchaseRequest="@this.PurchaseRequest"
                             Mode="EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>


@code {
    [Inject] private AppTimeProvider _timeProvider { get; set; }
    private bool _isCollapsed = false;
    private PurchaseOrderDto _purchaseOrderDto=new();
    private byte[]? _emailDocument;

    protected override Task OnInitializedAsync() {
        if (this.PurchaseRequest == null) return base.OnInitializedAsync();
        this._purchaseOrderDto = this.PurchaseRequest.ToPurchaseOrderDto();
        this._purchaseOrderDto.Date = this._timeProvider.Now();
        return base.OnInitializedAsync();
    }

    private async Task OrderSubmitHandler(byte[] emailDocument) {
        this._emailDocument = emailDocument;
        await this.SubmitHandler();
    }

    protected override async Task SubmitHandler() {
        if (this._emailDocument != null && this._emailDocument.Length > 0) {
            this._spinnerService.Show("Submitting Order....");
            var success = await this._purchaseRequestService.OrderPurchaseRequest(this._purchaseOrderDto, this._emailDocument);
            if (success) {
                await this.SendRefresh();
                this.ShowNotification(NotificationSeverity.Success,"Ordered","Purchase request ordered successfully.");
            } else {
                this.ShowNotification(NotificationSeverity.Error,"Order Error","There was an error ordering the purchase request.");
            }
            await this.ActionCompleted.InvokeAsync(this.PurchaseRequest?._id.ToString());
            this._spinnerService.Hide();
        } else {
            this.ShowNotification(NotificationSeverity.Error,
                "Internal Order Error",
                "Internal email byte array was null, please refresh page and try again");
        }
    }
    
    protected override async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
    
}