@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Data
@using TimeProvider = Infrastructure.Services.TimeProvider
@using Webapp.Services
@inherits UserActionComponent

<RadzenCard class="info-area">
    <RadzenSteps SelectedIndexChanged="StepChangedHandler">
        <Steps>
            <RadzenStepsItem Text="Mark Received" NextText="Internal Emails">
                <ItemReceiveStatusView @bind-ItemDelivery="@this._receiveRequestInput.ItemDelivery" 
                                       ReceiveComments="@this._comments" 
                                       @bind-ReceiveAll="@this._receiveAll"
                                       @bind-ApplyLocationToAll="@this._applyLocationToAll"
                                       @bind-LocationAll="@this._locationAll"
                                       ReceiveCommentsChanged="@this.CommentsChangedHandler"/>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Internal Emails" NextText="Finalize" PreviousText="Mark Received">
                <RadzenFieldset Text="Email Recipients">
                    <RadzenText TextStyle="TextStyle.H6" Text="Emails will be sent to the following users:"/>
                    <RadzenText Text="@String.Join(" , ", this._emailList)" TextStyle="TextStyle.Subtitle1"/>
                </RadzenFieldset>
                <EmailPickList CcList="@this._ccList"
                               CcListChanged="EmailListChangedHandler"
                               TextStyle="TextStyle.Body1"
                               IsCollapsed="true"/>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Finalize" PreviousText="Internal Emails">
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenStack>
                            <RadzenCard class="area-header">
                                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">
                                    Check email preview and items received before submitting
                                </RadzenText>
                            </RadzenCard>
                            <RadzenFieldset Text="All Items Checked In?" class="rz-p-1 align-self-center">
                                <RadzenStack Gap="5" Orientation="Orientation.Horizontal">
                                    <RadzenCheckBox TValue="bool"
                                                    @bind-Value="@this._receivedAll"/>
                                    <RadzenText Text="@(this._receivedAll ? "All Items":"Partial Checkin")"/>
                                </RadzenStack>
                            </RadzenFieldset>
                            <RadzenStack Orientation="Orientation.Horizontal"
                                         AlignItems="AlignItems.Center"
                                         JustifyContent="JustifyContent.Center">
                                <RadzenButton Text="Submit Cancellation"
                                              Icon="check_circle"
                                              Click="@this.SubmitHandler"
                                              Disabled="@(!this._canSubmit && !this._docLoaded)"
                                              Style="width: 180px; height: 70px;"/>
                                <RadzenButton Text="Cancel Cancellation"
                                              Icon="delete"
                                              ButtonStyle="ButtonStyle.Danger"
                                              Click="@this.CancelHandler"
                                              Style="width: 180px; height: 70px;"/>
                            </RadzenStack>
                            <AlertListView UserActionAlerts="@this._alerts"></AlertListView>
                            <RadzenDataGrid TItem="ItemDeliveryStatus"
                                            Data="@this._receiveRequestInput.ItemDelivery"
                                            Density="Density.Compact">
                                <Columns>
                                    <RadzenDataGridColumn Property="@nameof(ItemDeliveryStatus.Item)" Title="Item"/>
                                    <RadzenDataGridColumn Property="@nameof(ItemDeliveryStatus.Location)" Title="Location"/>
                                    <RadzenDataGridColumn Property="@nameof(ItemDeliveryStatus.Received)" Title="Received?">
                                        <Template Context="data">
                                            <RadzenText Text="@(data.Received ? "Received" : "Incoming")"></RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenStack>
                            <RadzenCard Variant="Variant.Outlined" class="area-header">
                                <RadzenText Text="Email Preview" TextStyle="TextStyle.H5" TextAlign="TextAlign.Center"/>
                            </RadzenCard>
                            <DxRichEdit @ref="@this._richEdit"
                                        @bind-DocumentContent="@this._documentContent"
                                        DocumentLoaded="@this.DocumentLoadedHandler"
                                        DocumentFormat="DocumentFormat.OpenXml"
                                        BarMode="BarMode.None"
                                        ViewType="ViewType.Simple"
                                        CssClass="rz-w-100"
                                        ReadOnly="true">
                                <MailMergeSettings>
                                    <DxMailMergeSettings Data="@this.MailMerge"
                                                         ViewMergedData="true"
                                                         ActiveRecord="1"/>
                                </MailMergeSettings>
                            </DxRichEdit>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>
</RadzenCard>


@code {
    private DxRichEdit? _richEdit;
    private bool _emailsLoaded = false;
    private bool _docLoaded = false;
    private List<string> _ccList = [];
    private List<string> _emailList = [];
    private byte[] _documentContent;
    private byte[] _mailDocument;
    private string? _comments { get; set; }
    private List<ReceiveMailMerge> MailMerge { get; set; } = [];
    private ReceiveRequestInput _receiveRequestInput = new();
    private bool _receiveAll = false;
    private bool _applyLocationToAll = false;
    private string _locationAll = "";
    private AlertStyle _alertStyle = AlertStyle.Success;
    private string _alertMessage = "";
    private string _alertTitle = "";
    private List<UserActionAlert> _alerts = new();
    private bool _canSubmit = false;
    private bool _receivedAll = false;
    

    protected override async Task OnInitializedAsync() { 
        await base.OnInitializedAsync();
        await Load();
    }
    
    protected override async Task SubmitHandler() {
        if(this.PurchaseRequest==null) {
            return;
        }
        this._spinnerService.Show("Submitting Cancellation Request");
        var merge = new ReceiveMailMerge() {
            PrAction = "Received Items",
            Title = this.PurchaseRequest?.Title ?? "", 
            Requester = this.PurchaseRequest?.Requester.Name ?? "",
            Receiver = this.UserProfile.FirstName + " " + this.UserProfile.LastName,
            ReceiveComments = this._comments ?? "",
        };
        if (this._receiveRequestInput.ItemDelivery.Any()) {
            for(int i=1;i<this._receiveRequestInput.ItemDelivery.Count-1;i++) {
                merge.SetItem(i, this._receiveRequestInput.ItemDelivery[i].Item ?? "", 
                    this._receiveRequestInput.ItemDelivery[i].Location ?? "",
                    this._receiveRequestInput.ItemDelivery[i].Received);
            }
        }
        this.MailMerge = [merge];
        this._mailDocument=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        /*var success=await this._purchaseRequestService.CancelPurchaseRequest(input);
        if (success) {
            this._notificationService.Notify(NotificationSeverity.Success, 
                "Cancellation Request Submitted",
                "The cancellation request has been submitted successfully");
        } else {
            this._notificationService.Notify(NotificationSeverity.Success, 
                "Cancellation Request Error",
                "There was an error submitting the cancellation request");
        }*/
        this._spinnerService.Hide();
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest._id.ToString());
    }
    
    protected override async Task CancelHandler() {
        await this.ActionCompleted.InvokeAsync(this.PurchaseRequest?._id.ToString());
    }
    
    private Task EmailListChangedHandler(List<string> ccList) {
        this._ccList = ccList;
        if(this.PurchaseRequest == null) {
            return Task.CompletedTask;
        }
        this.PurchaseRequest.EmailCopyList = ccList;
        return Task.CompletedTask;
    }
    
    private Task CommentsChangedHandler(string value) {
        this._comments = value;
        this.UpdateMailMerge();
        return Task.CompletedTask;
    }
    
    private void UpdateMailMerge() {
        var merge = new ReceiveMailMerge() { 
            Title = this.PurchaseRequest?.Title ?? "", 
            Requester = this.PurchaseRequest?.Requester.Name ?? "",
            Receiver=this.UserProfile.FirstName ?? "" + " " + this.UserProfile.LastName ?? "",
            ReceiveComments=this._comments ?? "",
            PrAction = "Items Received"
        };
        if (this._receiveRequestInput.ItemDelivery.Any()) {
            for(var i=0;i<this._receiveRequestInput.ItemDelivery.Count;i++) {
                merge.SetItem(i, this._receiveRequestInput.ItemDelivery[i].Item ?? "", 
                    this._receiveRequestInput.ItemDelivery[i].Location ?? "",
                    this._receiveRequestInput.ItemDelivery[i].Received);
            }
        }
        
        this.MailMerge = [merge];
    }
    
    private async Task DocumentLoadedHandler(Document obj) {
        this.UpdateMailMerge();
        this._mailDocument=await this._richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        this._docLoaded = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Load() {
        this._documentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/ReceiveTemplate.docx");
        if (this.PurchaseRequest != null) {
            if (this.PurchaseRequest.Status==PrStatus.Ordered) {
                this._receiveRequestInput.ItemDelivery = this.PurchaseRequest.PurchaseItems.Select(e => 
                        new ItemDeliveryStatus() { Item = e.ProductName, Received = false, Location = "",ReceivedDate = TimeProvider.Now()})
                    .ToList();
            }else if (this.PurchaseRequest.Status == PrStatus.PartialDelivered) {
                this._receiveRequestInput.ItemDelivery = this.PurchaseRequest.ItemDelivery;
            }
            this._receiveRequestInput.RequestId=this.PurchaseRequest._id;
            this._receiveRequestInput.IsPartial = false;
            this._receiveRequestInput.Receiver = new PrReceiver() { 
                Email = this.UserProfile.Email, 
                Name = this.UserProfile.FirstName + " " + this.UserProfile.LastName, 
                Username = this.UserProfile._id
            };
            this.UpdateMailMerge();
            this._emailList.Add(this.PurchaseRequest.Requester?.Email ?? "");
            this._emailList.Add(this.PurchaseRequest.Approver?.Email ?? "");
            this._emailList.Add(this._receiveRequestInput.Receiver?.Email ?? "");
            this._ccList.AddRange(this.PurchaseRequest.EmailCopyList);
        }
        
    }

    private Task StepChangedHandler(int step) {
        if (step == 2) {
            this._alerts.Clear();
            bool error = false;
            bool warning = false;
            this._receivedAll = false;
            
            if (this._receiveRequestInput.ItemDelivery.All(e => !e.Received)) {
                error = true;
                this._alerts.Add(new UserActionAlert() {
                    Item="Received Items",
                    Message="No items have been marked as received",
                    Okay=false,
                    Style = AlertStyle.Danger,
                });
            }
            
            if(this._receiveRequestInput.ItemDelivery.Where(e=>!e.Received).Any(e=>string.IsNullOrEmpty(e.Location))) {
                error = true;
                this._alerts.Add(new UserActionAlert() {
                    Item="Received Items",
                    Message="Please provide a location for all items being received",
                    Okay=false,
                    Style = AlertStyle.Danger,
                });
            }
            
            if (string.IsNullOrEmpty(this._comments)) {
                warning = true;
                this._alerts.Add(new UserActionAlert() {
                    Item="Received Comments",
                    Message="(Optional) Provide comments for the received items",
                    Okay=false,
                    Style = AlertStyle.Info,
                });
            }

            if (this._receiveRequestInput.ItemDelivery.Any(e => !e.Received)) {
                warning = true;
                this._alerts.Add(new UserActionAlert() {
                    Item="Received Items",
                    Message="Some items have not been marked as received, this will mark the receive as partial.",
                    Okay=false,
                    Style = AlertStyle.Warning,
                });
                this._receivedAll = true;
            }
            
            if (error) {
                this._canSubmit = false;
            } else {
                this._canSubmit = true;
                string message = "";
                if (warning) {
                    message = "Okay to submit, but please review any warnings before proceeding";
                } else {
                    message="Okay to submit";
                }
                this._alerts.Add(new UserActionAlert() {
                    Item="No Errors",
                    Message=message,
                    Okay=true,
                    Style = AlertStyle.Success,
                });
            }
        }
        this._alerts.Sort();
        this._alerts.Reverse();
        return InvokeAsync(StateHasChanged);
    }
}