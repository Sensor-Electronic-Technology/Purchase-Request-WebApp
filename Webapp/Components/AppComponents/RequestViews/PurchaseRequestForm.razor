@using System.Net.Http.Headers
@using Domain.PurchaseRequests
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.Users
@using Infrastructure.Services
@using Microsoft.Extensions.Options
@using MongoDB.Bson
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Services.Authentication
<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>
<RadzenCard Variant="Variant.Filled">
    <RadzenStack>
        <RadzenCard class="rz-background-color-secondary">
            <RadzenText TextStyle="TextStyle.DisplayH5" TextAlign="TextAlign.Center">Purchase Request Form</RadzenText>
        </RadzenCard>
        @if (!(this._userAccount != null && this._approvers.Count > 0)) {
            <RadzenText Text="Loading User Profile"/>
        } else {
            <RadzenCard class="rz-background-color-info-lighter">
                <RadzenSteps @ref="@this._steps" ShowStepsButtons="true" @bind-SelectedIndex="@this._selectedStepIndex" Style="min-height: 600px;">
                    <Steps>
                        <RadzenStepsItem Text="Approver & Priority" PreviousText="" NextText="Department & Vendor">
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center">
                                <RadzenFormField Text="Approver">
                                    <RadzenDropDown TValue="string"
                                                    Data="@this._approverSelectList"
                                                    Value="@this._selectedApprover"
                                                    ValueChanged="@SelectedApproverChanged"
                                                    Placeholder="Select an approver"
                                                    Style="width: 300px; height: fit-content; font-size: 22px !important;"
                                                    AllowClear="true"/>
                                </RadzenFormField>
                                <RadzenText TextStyle="TextStyle.Subtitle1" 
                                            Text="Note** Do not mark urgent unless the the order needs to be ordered immediately "/>
                                <RadzenFormField Text="Priority(Click)">
                                    <RadzenToggleButton Text="@(this._isUrgent ? "Urgent" : "Normal")"
                                                        Icon="alarm_off"
                                                        @bind-Value="@this._isUrgent"
                                                        ToggleIcon="alarm"
                                                        ButtonStyle="ButtonStyle.Info"
                                                        Shade="Shade.Light"
                                                        ToggleShade="Shade.Dark"
                                                        ToggleButtonStyle="ButtonStyle.Danger"
                                                        Style="width: 300px; height: 100px; font-size: 22px !important;"/>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Department & Vendor" PreviousText="Approver & Priority" NextText="Purchase Information">
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center"
                                         Gap="5">
                                <RadzenFieldset Text="Department">
                                    <RadzenDropDown TValue="Department"
                                                    Data="@this._departments"
                                                    Value="@this._purchaseReqInput.Department"
                                                    Placeholder="Select a department"
                                                    TextProperty="Name"
                                                    AllowClear="true"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Vendor">
                                    <RadzenStack Orientation="Orientation.Horizontal"
                                                 Gap="5"
                                                 AlignItems="AlignItems.Center">
                                        <RadzenDropDown TValue="Vendor"
                                                        Data="@this._vendors"
                                                        Value="@this._purchaseReqInput.Vendor"
                                                        ValueChanged="@SelectedVendorChanged"
                                                        TextProperty="Name"
                                                        Placeholder="Select an vendor"
                                                        AllowClear="true"/>
                                        <RadzenButton Text="Add Vendor" Click="CreateNewVendor" 
                                                      ButtonStyle="ButtonStyle.Secondary" 
                                                      Shade="Shade.Darker"/>
                                        <VendorView Vendor="@this._purchaseReqInput.Vendor"/>
                                    </RadzenStack>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Information" 
                                         PreviousText="Department & Vendor" 
                                         NextText="Purchase Items">
                            <RadzenStack>
                                <RadzenFormField Text="Requester">
                                    <RadzenTextBox @bind-Value="@this._userAccount.FirstName"/>
                                </RadzenFormField>
                                <RadzenFormField Text="Purchase Request Title">
                                    <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                                   @bind-Value="@this._purchaseReqInput.Title"
                                                   Style="width: 100%"/>
                                </RadzenFormField>
                                <RadzenFormField Text="Purchase Request Reason">
                                    <RadzenTextArea Placeholder="Enter a brief description of the purchase request"
                                                    @bind-Value="@this._purchaseReqInput.Description"
                                                    Style="width: 100%; height:100px;"/>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Items" PreviousText="Purchase Information" NextText="Comments & Quotes">
                            <PurchaseItemsTable @bind-PurchaseItems="@this._purchaseReqInput.PurchaseItems"/>
                            <RadzenButton Text="Next"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Comments & Quotes">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenFormField Text="Additional Comments">
                                    <RadzenTextArea Placeholder="Enter any additional message you would like appended to the email"
                                                    @bind-Value="@this._purchaseReqInput.AdditionalComments"
                                                    Style="width: 200px; height:100px;"/>
                                </RadzenFormField>
                                <RadzenColumn Size="12">
                                    <RadzenCard Variant="Variant.Outlined">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
                                        <RadzenUpload id="ddUpload"
                                                      ChooseText="Drag and drop here or click to choose files"
                                                      Auto="false"
                                                      Multiple="true"
                                                      Change="@this.OnClientChange"
                                                      InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                                                      Style="width: 100%"/>
                                        @*<RadzenButton Text="Upload" Click="UploadClickHandler" class="rz-mt-4"/>*@
                                    </RadzenCard>
                                </RadzenColumn>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Finalize">
                            <RadzenStack Orientation="Orientation.Horizontal"
                                         JustifyContent="JustifyContent.Center">
                                <RadzenButton Text="Submit" ButtonStyle="ButtonStyle.Success"
                                              Icon="save"
                                              Click="@this.SavePurchaseRequestHandler"
                                              Style="width: 180px; height: 80px;"/>
                                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger" Icon="cancel"
                                              Style="width: 180px; height: 80px;"/>
                            </RadzenStack>
                            <PdfViewer PurchaseRequestInput="@this._purchaseReqInput"></PdfViewer>
                        </RadzenStepsItem>
                    </Steps>
                </RadzenSteps>
            </RadzenCard>
        }
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenButton Text="Previous" Image="/images/previous-arrow.svg"
                          Click="@(async Task () => { await this._steps.PrevStep();})"
                          Style="width: 150px; height: 50px;" 
                          Visible="@(this._selectedStepIndex>0)"/>
            <RadzenButton Text="Next" Image="/images/next-arrow.svg"
                          Click="@(async Task () => { await this._steps.NextStep();})"
                          Style="width: 150px; height: 50px;" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private IWebHostEnvironment environment { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private IConfiguration configuration { get; set; }
    [Inject] private FileService _fileService { get; set; }
    private RadzenUpload _upload;
    private RadzenSteps _steps;
    private int _selectedStepIndex = 0;
    private PurchaseRequestInput? _purchaseReqInput;
    private string? _selectedApprover;
    private bool _isUrgent = false;
    private List<UserAccountDto> _approvers = [];
    private List<string> _approverSelectList = [];
    private UserProfile? _userAccount = new();
    private UserAccountDto? _approverAccount = new();
    private List<Department> _departments = new();
    private List<string> _shippingTypes = new();
    private List<Vendor> _vendors = new();
    private List<FileInfo> _quotes = [];
    
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._approvers = await this._authApiService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        this._vendors=await this._purchaseRequestService.GetVendors();
        this._departments = await this._purchaseRequestService.GetDepartments();
        if(this._userAccount!=null) {
            this._purchaseReqInput = new PurchaseRequestInput() {
                RequesterName = this._userAccount?.FirstName + " " + this._userAccount?.LastName,
                RequesterEmail = this._userAccount?.Email,
                RequesterUsername = this._userAccount?._id,
                Id=ObjectId.GenerateNewId(),
                PurchaseItems = new List<PurchaseItem>(),
                Quotes = new List<string>(),
                TempFile = $"{Path.GetFileNameWithoutExtension(Path.GetTempFileName())}.pdf"
            };
        }
    }
    
    bool CanCreatePurchaseRequest() {
        return this._userAccount != null && this._approvers.Count > 0 && this._purchaseReqInput != null;
    }
    
    Task OnClientChange(UploadChangeEventArgs args) {
        //Console.WriteLine($"Client-side upload changed");
        this._quotes = args.Files.ToList();
        foreach (var file in this._quotes) {
            Console.WriteLine(file.Name);
        }
        return Task.CompletedTask;
    }
    
    private async Task UploadClickHandler() {
        await this.UploadFiles();
    }
    
    private async Task UploadFiles() {
        if (this._quotes.Count == 0) {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "No files selected for upload");
            return;
        }
        var result=await this._fileService.UploadMultipleFiles(this._quotes);
        if (result != null) {
            this._purchaseReqInput.Quotes = result.ObjectIds;
            this._purchaseReqInput.Attachments=result.LocalFileInfo;
            this._notificationService.Notify(NotificationSeverity.Success,
                "Success",
                "Files Uploaded");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "Files failed to upload");
        }
    }
    
    private async Task SelectedApproverChanged(string? selected) {
        this._selectedApprover = selected;
        this._approverAccount=this._approvers.FirstOrDefault(a => a.FirstName == selected);
        if (this._purchaseReqInput != null) {
            this._purchaseReqInput.ApproverName=this._approverAccount?.FirstName+" "+this._approverAccount?.LastName;
            this._purchaseReqInput.ApproverEmail=this._approverAccount?.Email;
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SelectedVendorChanged(Vendor? selected) {
        //this._selectedVendor = selected;
        this._purchaseReqInput.Vendor=selected;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SavePurchaseRequestHandler() {
        if(this._purchaseReqInput==null) {
            this._notificationService.Notify(NotificationSeverity.Error, 
                "Internal Error",
                "Purchase Request Input is null");
            return;
        }

        //await this.UploadFiles();
        var success=await this._purchaseRequestService.CreatePurchaseRequest(this._purchaseReqInput);
        if(success) {
            this._notificationService.Notify(NotificationSeverity.Success, 
                "Success",
                "Purchase Request has been submitted successfully");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error, 
                "Error",
                "Purchase Request submission failed");
        }
        this._dialogService.CloseSide();
    }
    

    private Task CancelPurchaseRequestHandler() {
        var enumerable = this._purchaseReqInput?.Quotes;
        if (enumerable != null) {
            foreach (var quote in enumerable) {
                if (File.Exists(quote)) {
                    File.Delete(quote);
                }
            }
        }
        this._dialogService.CloseSide();
        return Task.CompletedTask;
    }
    
    private Task CreateNewVendor() {
        this._notificationService.Notify(NotificationSeverity.Warning, 
            "Feature Not Implemented",
            "Create Vendor feature is not yet implemented yet");
        return Task.CompletedTask;
    }
}