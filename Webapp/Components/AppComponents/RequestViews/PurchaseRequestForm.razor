@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using SetiFileStore.FileClient
@using Infrastructure.Services
@using MongoDB.Bson
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication

<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>
<RadzenCard Variant="Variant.Filled">
    <RadzenStack>
        <RadzenCard class="rz-background-color-secondary">
            <RadzenText TextAlign="TextAlign.Center">Purchase Request Form</RadzenText>
        </RadzenCard>
        @if (!(this._userAccount != null && this._approvers.Count > 0)) {
            <RadzenText Text="Loading User Profile"/>
        } else {
            <RadzenCard class="rz-background-color-info-lighter">
                <RadzenSteps @ref="@this._steps" 
                             ShowStepsButtons="true" 
                             SelectedIndex="@this._selectedStepIndex" 
                             SelectedIndexChanged="SelectedStepChangedHandler"
                             Style="min-height: 600px;">
                    <Steps>
                        <RadzenStepsItem Text="Approver & Priority" PreviousText="" NextText="Department & Vendor">
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center">
                                <RadzenFormField Text="Approver">
                                    <RadzenDropDown TValue="string"
                                                    Data="@this._approverSelectList"
                                                    Value="@this._selectedApprover"
                                                    ValueChanged="@SelectedApproverChanged"
                                                    Placeholder="Select an approver"
                                                    Style="width: 300px; height: fit-content; font-size: 22px !important;"
                                                    AllowClear="true"/>
                                </RadzenFormField>
                                <RadzenText TextStyle="TextStyle.Subtitle1" 
                                            Text="Note** Do not mark urgent unless the the order needs to be ordered immediately "/>
                                <RadzenFormField Text="Priority(Click)">
                                    <RadzenToggleButton Text="@(this._isUrgent ? "Urgent" : "Normal")"
                                                        Icon="alarm_off"
                                                        @bind-Value="@this._isUrgent"
                                                        ToggleIcon="alarm"
                                                        ButtonStyle="ButtonStyle.Info"
                                                        Shade="Shade.Light"
                                                        ToggleShade="Shade.Dark"
                                                        ToggleButtonStyle="ButtonStyle.Danger"
                                                        Style="width: 300px; height:80px; font-size: 22px !important;"/>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Information"  PreviousText="Approver & Priority" NextText="Purchase Items">
                            <RadzenRow>
                                <RadzenColumn Size="6" SizeMD="6">
                                    <RadzenFieldset Text="Title & Reason">
                                        <RadzenStack>
                                            <RadzenFormField Text="Requester">
                                                <RadzenTextBox @bind-Value="@this._userAccount.FirstName"/>
                                            </RadzenFormField>
                                            <RadzenFormField Text="Purchase Request Title">
                                                <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                                               @bind-Value="@this._purchaseReqInput.Title"
                                                               Style="width: 100%"/>
                                            </RadzenFormField>
                                            <RadzenFormField Text="Purchase Request Reason">
                                                <RadzenTextArea Placeholder="Enter a brief description of the purchase request"
                                                                @bind-Value="@this._purchaseReqInput.Description"
                                                                Style="width: 100%; height:100px;"/>
                                            </RadzenFormField>
                                        </RadzenStack>
                                    </RadzenFieldset>
                                </RadzenColumn>
                                <RadzenColumn Size="6" SizeMD="6">
                                    <RadzenFieldset Text="Department & Vendor">
                                        <RadzenStack Orientation="Orientation.Vertical"
                                                     AlignItems="AlignItems.Center"
                                                     Gap="5">
                                            <RadzenFieldset Text="Department" Style="text-align: center">
                                                <RadzenDropDown TValue="Department"
                                                                Data="@this._departments"
                                                                Value="@this._purchaseReqInput.Department"
                                                                Placeholder="Select a department"
                                                                TextProperty="Name"
                                                                AllowClear="true"/>
                                            </RadzenFieldset>
                                            <RadzenFieldset Style="text-align: center;">
                                                <HeaderTemplate>
                                                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center">Vendor</RadzenText>
                                                </HeaderTemplate>
                                                <ChildContent>
                                                    <VendorSelector @bind-Vendor="@this._purchaseReqInput.Vendor"/>
                                                </ChildContent>
                                            </RadzenFieldset>
                                        </RadzenStack>
                                    </RadzenFieldset>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Items" PreviousText="Purchase Information" NextText="Comments & Quotes">
                            <PurchaseItemsTable @bind-PurchaseItems="@this._purchaseReqInput.PurchaseItems"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Comments & Quotes">
                            <RadzenStack Orientation="Orientation.Vertical">
                                <RadzenFormField Text="Additional Comments">
                                    <RadzenTextArea Placeholder="Enter any additional message you would like appended to the email"
                                                    @bind-Value="@this._purchaseReqInput.AdditionalComments"
                                                    Style="width: 200px; height:100px;"/>
                                </RadzenFormField>
                                <RadzenFormField Text="Shipping">
                                    <RadzenDropDown TValue="string"
                                                    Data="@ShippingType.List"
                                                    Value="@this._purchaseReqInput.ShippingType"
                                                    Placeholder="Select an Shipping Method"
                                                    ValueProperty="Value"
                                                    Style="width: 300px; height: fit-content; font-size: 18px !important;"
                                                    AllowClear="true"/>
                                </RadzenFormField>
                                <RadzenColumn Size="12">
                                    <RadzenCard Variant="Variant.Outlined">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Drag and drop files to upload</RadzenText>
                                        <RadzenUpload id="ddUpload"
                                                      ChooseText="Drag and drop here or click to choose files"
                                                      Auto="false"
                                                      Multiple="true"
                                                      Change="@this.OnClientChange"
                                                      InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                                                      Style="width: 100%"/>
                                    </RadzenCard>
                                </RadzenColumn>
                            </RadzenStack>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Finalize">
                            <RadzenStack Gap="20">
                                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenRow>
                                        <RadzenStack Orientation="Orientation.Horizontal"
                                                     JustifyContent="JustifyContent.Center" Gap="20">
                                            <RadzenButton Text="Submit"
                                                          ButtonStyle="ButtonStyle.Success"
                                                          Icon="save"
                                                          Click="@this.SavePurchaseRequestHandler"
                                                          Style="width: 180px; height: 80px;"/>
                                            <RadzenButton Text="Cancel"
                                                          ButtonStyle="ButtonStyle.Danger"
                                                          Click="@this.CancelPurchaseRequestHandler"
                                                          Icon="cancel"
                                                          Style="width: 180px; height: 80px;"/>
                                        </RadzenStack>
                                    </RadzenRow>
                                </RadzenRow>
                                <RadzenRow RowGap="5">
                                    <RadzenColumn Size="6" SizeMD="6">
                                        <RadzenStack Orientation="Orientation.Vertical" class="text-center">
                                            <RadzenText Text="Request Preview" TextStyle="TextStyle.H5"/>
                                            <PdfViewer PurchaseRequestInput="@this._purchaseReqInput"></PdfViewer>
                                        </RadzenStack>
                                    </RadzenColumn>
                                    <RadzenColumn Size="6" SizeMD="6">
                                        <RadzenStack>
                                            <RadzenText Text="Email Preview" TextStyle="TextStyle.H5"/>
                                            <DxRichEdit @ref="@this._richEdit"
                                                        @bind-DocumentContent="@this._documentContent"
                                                        DocumentLoaded="@this.DocumentLoadedHandler"
                                                        DocumentFormat="DocumentFormat.OpenXml"
                                                        ViewType="ViewType.Simple"
                                                        BarMode="BarMode.None"
                                                        ReadOnly="true">
                                                <MailMergeSettings>
                                                    <DxMailMergeSettings Data="@this._mailMerge"
                                                                         ViewMergedData="true"
                                                                         ActiveRecord="1"/>
                                                </MailMergeSettings>
                                            </DxRichEdit>
                                        </RadzenStack>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenStepsItem>
                    </Steps>
                </RadzenSteps>
            </RadzenCard>
        }
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenButton Text="Previous" Image="/images/previous-arrow.svg"
                          Click="@(async Task () => { await this._steps.PrevStep();})"
                          Style="width: 150px; height: 50px;" 
                          Visible="@(this._selectedStepIndex>0)"
                          Disabled="@(!this._canSave)"/>
            <RadzenButton Text="Next" Image="/images/next-arrow.svg"
                          Click="@(async Task () => { await this._steps.NextStep();})"
                          Style="width: 150px; height: 50px;" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private IConfiguration configuration { get; set; }
    [Inject] private FileService _fileService { get; set; }
    [Inject] private SpinnerService _spinnerService { get; set; }
    
    [Parameter] public EventCallback CancelCallback { get; set; }
    [Parameter] public EventCallback SaveCallback { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    [Parameter] public EditMode Mode { get; set; }

    private RadzenUpload _upload;
    private RadzenSteps _steps;
    private DxRichEdit _richEdit=new DxRichEdit();
    private int _selectedStepIndex = 0;
    private PurchaseRequestInput _purchaseReqInput = new PurchaseRequestInput();
    private string? _selectedApprover;
    private string? _selectedShippingType;
    private bool _isUrgent = false;
    private List<UserAccountDto> _approvers = [];
    private List<string> _approverSelectList = [];
    private UserProfile? _userAccount = new();
    private UserAccountDto? _approverAccount = new();
    private List<Department> _departments = new();
    private List<FileData> _quotes = [];
    private byte[]? _documentContent;
    private bool _canSave = false;
    private PurchaseRequestInput? _pdfDataInput = null;
    
    private List<RequestMailMerge> _mailMerge;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._documentContent=await File.ReadAllBytesAsync($"{this._environment.WebRootPath}/MailTemplateFiles/RequestTemplate.docx");
        this._approvers = await this._purchaseRequestService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        this._departments = await this._purchaseRequestService.GetDepartments();
        if(this._userAccount!=null) {
            await this.GeneratePurchaseRequest();
        }
    }

    protected override Task OnParametersSetAsync() {
        if (this.PurchaseRequest != null && this.Mode == EditMode.EDIT) {
            this._purchaseReqInput = this.PurchaseRequest.ToInput();
        }
        return base.OnParametersSetAsync();
    }
    
    bool CanCreatePurchaseRequest() {
        return this._userAccount != null && this._approvers.Count > 0;
    }
    
    async Task OnClientChange(UploadChangeEventArgs args) {
        foreach (var file in args.Files.ToList()) {
            await using var stream=file.OpenReadStream();
            using var streamContent = new StreamContent(stream);
            this._quotes.Add(new FileData(file.Name,await streamContent.ReadAsByteArrayAsync()));
        }
    }
    
    private async Task UploadClickHandler() {
        await this.UploadFiles();
    }
    
    private async Task UploadFiles() {
        if (this._quotes.Count == 0) {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "No files selected for upload");
            return;
        }
        var result=await this._fileService.UploadMultipleFiles(this._quotes);
        if (result.Any()) {
            this._purchaseReqInput.Quotes = result;
            this._purchaseReqInput.Attachments=this._quotes.Select(e=>new FileInput(e.Name,e.Data)).ToList();
            this._notificationService.Notify(NotificationSeverity.Success,
                "Success",
                "Files Uploaded");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "Files failed to upload");
        }
    }
    
    private async Task SelectedApproverChanged(string? selected) {
        this._selectedApprover = selected;
        this._approverAccount=this._approvers.FirstOrDefault(a => a.FirstName == selected);
        this._purchaseReqInput.ApproverName=this._approverAccount?.FirstName+" "+this._approverAccount?.LastName;
        this._purchaseReqInput.ApproverEmail=this._approverAccount?.Email;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ShippingTypeChangedHandler(string shippingType) {
        this._selectedShippingType = shippingType;
        this._purchaseReqInput.ShippingType = shippingType;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SelectedVendorChanged(Vendor? selected) {
        //this._selectedVendor = selected;
        this._purchaseReqInput.Vendor=selected;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SavePurchaseRequestHandler() {
        if (this._quotes.Count> 0) {
            this._spinnerService.Show("Uploading Quotes....");
            await this.UploadFiles();
        }
        this._spinnerService.Show("Submitting Purchase Request....");
        byte[] messageBody=[];
        
        byte[] result = await _richEdit.DocumentAPI.MailMergeAsync(DocumentFormat.Html);
        await _richEdit.LoadDocumentAsync(result, DocumentFormat.OpenXml);
        //this._purchaseReqInput.EmailTemplate = (byte[])result.Clone();
        messageBody=(byte[])result.Clone();
        var success=await this._purchaseRequestService.CreatePurchaseRequest(this._purchaseReqInput,messageBody);
        this._spinnerService.Hide();
        if(success) {
            this._notificationService.Notify(NotificationSeverity.Success, 
                "Success",
                "Purchase Request has been submitted successfully");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error, 
                "Error",
                "Purchase Request submission failed");
        }
        this._spinnerService.Hide();
        await Task.Delay(200);
        await this.SaveCallback.InvokeAsync();
    }
    
    private async Task CancelPurchaseRequestHandler() {
        this._quotes.Clear();
        await this.CancelCallback.InvokeAsync();
    }
    

    private async Task LoadData() {
        this._approvers = await this._purchaseRequestService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        this._departments = await this._purchaseRequestService.GetDepartments();
    }

    Task GeneratePurchaseRequest() {
        this._purchaseReqInput = new PurchaseRequestInput() {
            RequesterName = this._userAccount?.FirstName + " " + this._userAccount?.LastName,
            RequesterEmail = this._userAccount?.Email,
            RequesterUsername = this._userAccount?._id,
            Id=ObjectId.GenerateNewId(),
            PurchaseItems = new List<PurchaseItem>(),
            Quotes = new List<string>(),
        };
        List<PurchaseItem> items = new();
        items.Add(new PurchaseItem() {
            ProductName = "Star tech 4 port video splitter/546287str", Quantity = 1, UnitCost = 45.69m
        });
        items.Add(new PurchaseItem() {
            ProductName = "Logitech Mouse/Keyboard Combo/mk432", Quantity = 1, UnitCost = 24.65m
        });
        items.Add(new PurchaseItem() {
            ProductName = "Intel I7 546214 mini pc", Quantity = 3, UnitCost = 459.45m
        });
        items.ForEach(e=>e.TotalCost=e.Quantity * e.UnitCost);
        this._purchaseReqInput.PurchaseItems = items;
        this._purchaseReqInput.Department = new Department(){Name = "Epi"};
        this._purchaseReqInput.Description = "Consultant Computers";
        this._purchaseReqInput.ShippingType = ShippingType.Ground.Value;
        this._purchaseReqInput.Urgent = true;
        this._purchaseReqInput.Title = "Consultant Computers";
        this._purchaseReqInput.Description = "The consultant computers are for the HQ consultants. " +
                                             "One computer with windows 11 and a display. Another computer with windows 11 and a display. " +
                                             " Also two keyboards and a mouse for each computers.  " +
                                             "Another filler line to increase the Reason For Purchase. " +
                                             " I want to make sure the wrapping works when writing to a single cell";
        this._approverAccount=this._approvers.FirstOrDefault(a => a.FirstName == "Rakesh");
        this._purchaseReqInput.ApproverName=this._approverAccount?.FirstName+" "+this._approverAccount?.LastName;
        this._purchaseReqInput.ApproverEmail=this._approverAccount?.Email;

        return Task.CompletedTask;
    }

    private async Task SelectedStepChangedHandler(int obj) {
        this._selectedStepIndex = obj;
        if (obj == 4) {
            _mailMerge = [new RequestMailMerge() {
                Title = this._purchaseReqInput.Title ?? "",
                Approver = this._selectedApprover ?? "",
                Requester = this._userAccount?.FirstName ?? "",
                PrLink = "http://setihome.seti.com",
                Description = this._purchaseReqInput.Description ?? "",
                AdditionalComments = this._purchaseReqInput.AdditionalComments ?? "",
            }];
            this._pdfDataInput = this._purchaseReqInput;
            
        } else {
            this._pdfDataInput = null;
        }
        this._canSave = false;
    }

    private Task DocumentLoadedHandler(Document obj) {
        this._canSave = true;
        return Task.CompletedTask;
    }

}