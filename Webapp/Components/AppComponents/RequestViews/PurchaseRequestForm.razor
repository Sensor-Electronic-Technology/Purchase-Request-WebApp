@using Domain.PurchaseRequests
@using Domain.Users
@using Infrastructure.Services
@using Microsoft.Extensions.Options
@using MongoDB.Bson
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Services.Authentication

@if (!this.CanCreatePurchaseRequest()) {
    <RadzenText Text="Loading User Profile"/>
} else {
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenCard Style="width: 100%;">
            <RadzenStack>
                <RadzenCard class="rz-background-color-series-4">
                    <RadzenText Text="Purchase Request Form" TextStyle="TextStyle.H6"/>
                    <RadzenText Text="Please fill out the form below to submit a purchase request."
                                TextStyle="TextStyle.Body1"/>
                </RadzenCard>
                <RadzenCard class="rz-background-color-info">
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            <RadzenFormField Text="Approver">
                                <RadzenDropDown TValue="string"
                                                Data="@this._approverSelectList"
                                                Value="@this._selectedApprover"
                                                ValueChanged="@SelectedApproverChanged"
                                                Placeholder="Select an approver" AllowClear="true"/>
                            </RadzenFormField>
                            <div class="rz-p-12 rz-text-align-center">
                                <RadzenCheckBox TriState=false @bind-Value="@this._isUrgent" Name="IsUrgent"/>
                                <RadzenLabel Text="Urgent" Component="IsUrgent" class="rz-ms-2"/>
                            </div>
                        </RadzenStack>
                        <RadzenFormField Text="Requester">
                            <RadzenTextBox @bind-Value="@this._userAccount.FirstName"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Purchase Request Title" Style="width: fit-content">
                            <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                           @bind-Value="@this._purchaseReqInput.Title"
                                           Style="width: 100%"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Purchase Request Description">
                            <RadzenTextArea Placeholder="Enter a brief description of the purchase request" @bind-Value="@this._purchaseReqInput.Description"
                                            Style="width: 100%; height:100px;"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Additional Comments">
                            <RadzenTextArea Placeholder="Enter any additional message you would like appended to the email"
                                            @bind-Value="@this._purchaseReqInput.AdditionalComments"
                                            Style="width: 200px; height:100px;"/>
                        </RadzenFormField>
                        <RadzenFormField Text="Upload Purchase Request">
                            <RadzenUpload Multiple="false"
                                          ChooseText="Select File"
                                          Change="@this.OnClientChange"/>
                        </RadzenFormField>
                        <RadzenFieldset Text="Save/Cancel">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success" Shade="Shade.Darker"
                                              Click="@SavePurchaseRequestHandler"
                                              Style="width: 180px;height: 50px;"/>
                                <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Danger"
                                              Click="@CancelPurchaseRequestHandler"
                                              Style="width: 180px;height: 50px;"/>
                            </RadzenStack>

                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
}

@code {
    [Inject] private AuthApiService _authApiService { get; set; }
    [Inject] private IWebHostEnvironment environment { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    private RadzenUpload _upload;
    private PurchaseRequestInput? _purchaseReqInput;
    private string? _selectedApprover;
    private bool _isUrgent = false;
    private List<UserAccountDto> _approvers = [];
    private List<string> _approverSelectList = [];
    private UserProfile? _userAccount = new();
    private UserAccountDto? _approverAccount = new();
    
    

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._approvers = await this._authApiService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        if(this._userAccount!=null) {
            this._purchaseReqInput = new PurchaseRequestInput() {
                RequesterName = this._userAccount?.FirstName + " " + this._userAccount?.LastName,
                RequesterEmail = this._userAccount?.Email,
                RequesterUsername = this._userAccount?.Email,
                Id=ObjectId.GenerateNewId(),
            };
        }
    }
    
    bool CanCreatePurchaseRequest() {
        return this._userAccount != null && this._approvers.Count > 0 && this._purchaseReqInput != null;
    }
    
    void OnProgress(UploadProgressArgs args, string name) {
        Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");
        if (args.Progress == 100) {
            
            foreach (var file in args.Files) {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }
    
    async Task OnClientChange(UploadChangeEventArgs args) {
        Console.WriteLine($"Client-side upload changed");
        foreach (var file in args.Files) {
            /*Console.WriteLine($"File: {file.Name} / {file.Size} bytes");*/
            try {
                long maxFileSize = 10 * 1024 * 1024;
                // read file
                var stream = file.OpenReadStream(maxFileSize);
                this._userAccount = this._userService.GetSessionUserProfile();
                string filePath = Path.Combine(environment.WebRootPath,this._userAccount?._id ?? "Unknown");
                DirectoryInfo info = new DirectoryInfo(filePath);
                if (!info.Exists) {
                    info.Create();
                }
                file.Name=file.Name.Replace(".",$"_{this._purchaseReqInput.Id.ToString()}.");
                string path = Path.Combine(filePath, file.Name);
                await using FileStream outputFileStream = new FileStream(path, FileMode.Create);
                await stream.CopyToAsync(outputFileStream);
                stream.Close();
                this._purchaseReqInput.FilePath=path;
            } catch (Exception ex) {
                Console.WriteLine($"Client-side file read error: {ex.Message}");
            }
        }
    }

    /*private async Task LoadEmailTemplate() {
        using StreamReader reader = new StreamReader(@"wwwroot\EmailTemplateV2\EmailTemplateV2.htm");
        emailTemplate = await reader.ReadToEndAsync();
    }*/
    
    private async Task SelectedApproverChanged(string? selected) {
        this._selectedApprover = selected;
        this._approverAccount=this._approvers.FirstOrDefault(a => a.FirstName == selected);
        this._purchaseReqInput.ApproverName=this._approverAccount?.FirstName+" "+this._approverAccount?.LastName;
        this._purchaseReqInput.ApproverEmail=this._approverAccount?.Email;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SavePurchaseRequestHandler() {
        await this._purchaseRequestService.CreatePurchaseRequest(this._purchaseReqInput);
        this._dialogService.CloseSide();
    }

    private Task CancelPurchaseRequestHandler() {
        if (File.Exists(this._purchaseReqInput?.FilePath)) {
            File.Delete(this._purchaseReqInput.FilePath);
        }
        this._dialogService.CloseSide();
        return Task.CompletedTask;
    }

}