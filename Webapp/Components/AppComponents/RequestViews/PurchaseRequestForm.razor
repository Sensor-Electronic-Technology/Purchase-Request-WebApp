@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using SetiFileStore.FileClient
@using Infrastructure.Services
@using MongoDB.Bson
@using SETiAuth.Domain.Shared.Authentication
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication


<RadzenCard Variant="Variant.Filled">
    <RadzenStack>
        <RadzenCard class="rz-background-color-secondary">
            <RadzenText TextAlign="TextAlign.Center">Purchase Request Form</RadzenText>
        </RadzenCard>
        @if (!(this._userAccount != null && this._approvers.Count > 0)) {
            <RadzenText Text="Loading User Profile"/>
        } else {
            <RadzenCard class="rz-background-color-info-lighter">
                <RadzenSteps @ref="@this._steps" 
                             ShowStepsButtons="true" 
                             SelectedIndex="@this._selectedStepIndex" 
                             SelectedIndexChanged="SelectedStepChangedHandler"
                             Style="min-height: 600px;">
                    <Steps>
                        <RadzenStepsItem Text="Request Information" PreviousText="" NextText="Department & Vendor">
                            <RequestInformationView ApproverSelectList="@this._approverSelectList"
                                                    FirstName="@(this._userAccount.FirstName+" "+this._userAccount.LastName)"
                                                    SelectedApprover="@this._selectedApprover"
                                                    SelectedApproverChanged="SelectedApproverChangedHandler"
                                                    @bind-Title="@this._purchaseReqInput.Title"
                                                    @bind-Description="@this._purchaseReqInput.Description"
                                                    @bind-IsUrgent="@this._purchaseReqInput.Urgent"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Information"  PreviousText="Approver & Priority" NextText="Purchase Items">
                            <PurchaseInformationView Departments="@this._departments"
                                                     @bind-Department="@this._purchaseReqInput.Department"
                                                     @bind-Vendor="@this._purchaseReqInput.Vendor"
                                                     @bind-ShippingType="@this._purchaseReqInput.ShippingType"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Purchase Items" PreviousText="Purchase Information" NextText="Comments & Quotes">
                            <PurchaseItemsTable @bind-PurchaseItems="@this._purchaseReqInput.PurchaseItems"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Comments & Quotes">
                            <CommentsQuotesView @bind-Quotes="@this._quotes"
                                                @bind-AdditionalComments="@this._purchaseReqInput.AdditionalComments"/>
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Finalize">
                            <FinalizeView PurchaseRequestInput="@this._finalizeDataInput" 
                                          CanSave="@this._canSave"
                                          RequestAlerts="@this._requestAlerts"
                                          SaveClicked="@this.SavePurchaseRequestHandler"
                                          CancelClicked="@this.CancelPurchaseRequestHandler"
                                          @bind-MailDocument="@this._purchaseReqInput.EmailTemplate"
                                          @bind-DocLoaded="@this._docLoaded"/>
                        </RadzenStepsItem>
                    </Steps>
                </RadzenSteps>
            </RadzenCard>
        }
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
            <RadzenButton Text="Previous" Image="/images/previous-arrow.svg"
                          Click="@(async Task () => { await this._steps.PrevStep();})"
                          Style="width: 150px; height: 50px;" 
                          Visible="@(this._selectedStepIndex>0)"/>
            <RadzenButton Text="Next" Image="/images/next-arrow.svg"
                          Click="@(async Task () => { await this._steps.NextStep();})"
                          Style="width: 150px; height: 50px;" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] private IWebHostEnvironment _environment { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private IConfiguration configuration { get; set; }
    [Inject] private FileService _fileService { get; set; }
    [Inject] private SpinnerService _spinnerService { get; set; }
    
    [Parameter] public EventCallback CancelCallback { get; set; }
    [Parameter] public EventCallback SaveCallback { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    [Parameter] public EditMode Mode { get; set; }

    private RadzenUpload _upload;
    private RadzenSteps _steps;
    private DxRichEdit _richEdit;
    private int _selectedStepIndex = 0;
    private PurchaseRequestInput _purchaseReqInput = new PurchaseRequestInput();
    private string? _selectedApprover;
    private bool _isUrgent = false;
    private List<UserAccountDto> _approvers = [];
    private List<string> _approverSelectList = [];
    private UserProfile? _userAccount = new();
    private List<Department> _departments = new();
    private List<FileData> _quotes = [];
    private PurchaseRequestInput? _finalizeDataInput = null;
    private List<RequestAlert> _requestAlerts = [];
    private bool _canSave = false;
    private bool _docLoaded = false;

    
    private List<RequestMailMerge> _mailMerge;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        
        this._approvers = await this._purchaseRequestService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        this._departments = await this._purchaseRequestService.GetDepartments();
        if(this._userAccount!=null) {
            await this.GeneratePurchaseRequest();
        }
    }
    
    protected override Task OnParametersSetAsync() {
        if (this.PurchaseRequest != null && this.Mode == EditMode.EDIT) {
            this._purchaseReqInput = this.PurchaseRequest.ToInput();
        }
        return base.OnParametersSetAsync();
    }
    
    private async Task UploadFiles() {
        if (this._quotes.Count == 0) {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "No files selected for upload");
            return;
        }
        var result=await this._fileService.UploadMultipleFiles(this._quotes);
        if (result.Any()) {
            this._purchaseReqInput.Quotes = result;
            this._purchaseReqInput.Attachments=this._quotes.Select(e=>new FileInput(e.Name,e.Data)).ToList();
            this._notificationService.Notify(NotificationSeverity.Success,
                "Success",
                "Files Uploaded");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error,
                "Error",
                "Files failed to upload");
        }
    }
    private async Task SavePurchaseRequestHandler() {
        if (this._quotes.Count> 0) {
            this._spinnerService.Show("Uploading Quotes....");
            await this.UploadFiles();
        }
        this._spinnerService.UpdateMessage("Submitting Purchase Request....");
        var success=await this._purchaseRequestService.CreatePurchaseRequest(this._purchaseReqInput);
        this._spinnerService.Hide();
        await InvokeAsync(StateHasChanged);
        if(success) {
            this._notificationService.Notify(NotificationSeverity.Success, 
                "Success",
                "Purchase Request has been submitted successfully");
        } else {
            this._notificationService.Notify(NotificationSeverity.Error, 
                "Error",
                "Purchase Request submission failed");
        }
        await Task.Delay(200);
        await this.SaveCallback.InvokeAsync();
    }
    
    private async Task CancelPurchaseRequestHandler() {
        this._quotes.Clear();
        await this.CancelCallback.InvokeAsync();
    }
    

    private async Task LoadData() {
        this._approvers = await this._purchaseRequestService.GetApprovers();
        this._userAccount = this._userService.GetSessionUserProfile();
        this._approverSelectList = this._approvers.Select(e => e.FirstName).ToList();
        this._departments = await this._purchaseRequestService.GetDepartments();
    }
    
    private async Task SelectedStepChangedHandler(int obj) {
        this._selectedStepIndex = obj;
        if (obj == 4) {
            this._finalizeDataInput = this._purchaseReqInput;
            await this.VerifyPurchaseRequest();
        } else {
            this._finalizeDataInput = null;
            this._docLoaded = false;
            this._canSave = false;
        }

    }
    
    private Task VerifyPurchaseRequest() {
        bool okay = true;
        this._requestAlerts.Clear();
        if (string.IsNullOrEmpty(this._selectedApprover)) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Approver",
                Message = "Approver not selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }
        
        if(this._purchaseReqInput.Vendor==null) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Vendor",
                Message = "Vendor not selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }
        
        if (this._purchaseReqInput.PurchaseItems.Count == 0) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Vendor",
                Message = "Vendor not selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }

        if (string.IsNullOrEmpty(this._purchaseReqInput.ShippingType)) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Shipping",
                Message = "Shipping type not selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }

        if (this._purchaseReqInput.Department == null) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Department",
                Message = "Department not selected",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }

        if (string.IsNullOrEmpty(this._purchaseReqInput.Description)) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Purchase Request Reason",
                Message = "Reason not provided",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }
        
        if (string.IsNullOrEmpty(this._purchaseReqInput.Title)) {
            okay = false;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Title",
                Message = "Title not provided",
                Okay = false,
                Style = AlertStyle.Danger
            });
        }

        if (okay) {
            this._canSave = true;
            this._requestAlerts.Add(new RequestAlert() {
                Item="Purchase Request",
                Message = "Purchase Request is ready for submission",
                Okay = true,
                Style = AlertStyle.Success
            });
        }
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    Task GeneratePurchaseRequest() {
        this._purchaseReqInput=this._purchaseRequestService.CreatePrInput(
            this._userAccount?.FirstName + " " + this._userAccount?.LastName,
            this._userAccount.Email,this._userAccount._id);

        List<PurchaseItem> items = new();
        items.Add(new PurchaseItem() {
            ProductName = "Star tech 4 port video splitter/546287str", Quantity = 1, UnitCost = 45.69m
        });
        items.Add(new PurchaseItem() {
            ProductName = "Logitech Mouse/Keyboard Combo/mk432", Quantity = 1, UnitCost = 24.65m
        });
        items.Add(new PurchaseItem() {
            ProductName = "Intel I7 546214 mini pc", Quantity = 3, UnitCost = 459.45m
        });
        items.ForEach(e=>e.TotalCost=e.Quantity * e.UnitCost);
        this._purchaseReqInput.PurchaseItems = items;
        this._purchaseReqInput.Department = new Department(){Name = "Epi"};
        this._purchaseReqInput.ShippingType = ShippingTypes.Ground.Value;
        this._purchaseReqInput.Urgent = true;
        /*this._purchaseReqInput.Title = "Consultant Computers";
        this._purchaseReqInput.Description = "The consultant computers are for the HQ consultants. " +
                                             "One computer with windows 11 and a display. Another computer with windows 11 and a display. " +
                                             " Also two keyboards and a mouse for each computers.  " +
                                             "Another filler line to increase the Reason For Purchase. " +
                                             " I want to make sure the wrapping works when writing to a single cell";*/
        var approverAccount=this._approvers.FirstOrDefault(a => a.FirstName == "Rakesh");
        this._selectedApprover = approverAccount?.FirstName;
        this._purchaseReqInput.ApproverName=approverAccount?.FirstName+" "+approverAccount?.LastName;
        this._purchaseReqInput.ApproverEmail=approverAccount?.Email;

        return Task.CompletedTask;
    }

    private void SelectedApproverChangedHandler(string approver) {
        var approverAccount=this._approvers.FirstOrDefault(a => a.FirstName ==approver);
        this._selectedApprover = approverAccount?.FirstName;
        this._purchaseReqInput.ApproverName=approverAccount?.FirstName+" "+approverAccount?.LastName;
        this._purchaseReqInput.ApproverEmail=approverAccount?.Email;
    }

}