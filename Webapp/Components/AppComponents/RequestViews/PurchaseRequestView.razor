@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using Webapp.Data
@if (this.PurchaseRequest == null) {
    <p class="text-center">No purchase request selected</p>
} else {

    <RadzenStack Orientation="Orientation.Horizontal">
        @if (this.Mode != EditMode.VIEW) {
            <RadzenCard class="text-center" Style="@this._columnWidth">
                <RadzenStack>
                    <AuthorizeView Roles="@PurchaseRequestRole.Approver.Name">
                        <Authorized>
                            <PrApproverActionView PurchaseRequest="@this.PurchaseRequest"/>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@PurchaseRequestRole.Requester.Name">
                        <Authorized>
                            <PrApproverActionView PurchaseRequest="@this.PurchaseRequest"/>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="@PurchaseRequestRole.Purchaser.Name">
                        <Authorized>
                            <PrApproverActionView PurchaseRequest="@this.PurchaseRequest"/>
                        </Authorized>
                    </AuthorizeView>
                </RadzenStack>
            </RadzenCard>
        }
        <RadzenCard Style="@this._columnWidth">
            <RadzenCard>
                <RadzenFieldset Text="Purchase Request">
                    <RadzenText Text="@(this.PurchaseRequest.Title)"
                                TextStyle="TextStyle.H6"
                                TextAlign="TextAlign.Center"/>
                </RadzenFieldset>
            </RadzenCard>
            <RadzenCard>
                <RadzenFieldset Text="Status">
                    <RadzenAlert Text="@this.GetAlertText()"
                                 AlertStyle="@this.GetAlertStyle()"
                                 Size="AlertSize.Small"
                                 AllowClose="false"/>
                </RadzenFieldset>
            </RadzenCard>
            <RadzenCard>
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Request Information">
                            <RequestInformationView Description="@this.PurchaseRequest.Description"
                                                    Title="@this.PurchaseRequest.Title"
                                                    IsUrgent="@this.PurchaseRequest.Urgent"
                                                    SelectedApprover="@this.PurchaseRequest.Approver.Name"
                                                    Mode="EditMode.VIEW"/>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Purchase Information">
                            <AuthorizeView Roles="@PurchaseRequestRole.Approver">
                                <Authorized>
                                    <PurchaseInformationView Department="@this.PurchaseRequest.Department"
                                                             Vendor="@this.PurchaseRequest.Vendor"
                                                             ShippingType="@this.PurchaseRequest.ShippingType"/>
                                </Authorized>
                            </AuthorizeView>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Request Info">
                            <RadzenStack>
                                <RadzenFormField Text="Requester">
                                    <RadzenTextBox @bind-Value="@this.PurchaseRequest.Requester.Name"/>
                                </RadzenFormField>
                                <RadzenFormField Text="Purchase Request Title">
                                    <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                                   @bind-Value="@this.PurchaseRequest.Title"
                                                   Style="width: 100%"/>
                                </RadzenFormField>
                                <RadzenFormField Text="Purchase Request Reason">
                                    <RadzenTextArea Placeholder="Enter a brief description of the purchase request"
                                                    @bind-Value="@this.PurchaseRequest.Description"
                                                    Style="width: 100%; height:100px;"/>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Items">
                            <PurchaseItemsTable @bind-PurchaseItems="@this.PurchaseRequest.PurchaseItems"/>
                        </RadzenTabsItem>
                        <RadzenTabsItem Text="Comments/Quotes">
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>
            </RadzenCard>
            
        </RadzenCard>
    </RadzenStack>
}

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }
    [Parameter] public EditMode Mode { get; set; }=EditMode.VIEW;
    private List<Department> _departments = [];
    private string _columnWidth = "width: 100%";

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._departments = await this._purchaseRequestService.GetDepartments();
    }

    protected override Task OnParametersSetAsync() {
        this._columnWidth=(this.Mode == EditMode.VIEW) ? "width: 100%" : "width: 50%";
        return base.OnParametersSetAsync();
    }
    
    private string GetAlertText() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return "Approved,Pending Order";
            }
            case PrStatus.NeedsApproval: {
                return "Pending Approval";
            }
            case PrStatus.Ordered: {
                return "Ordered";
            }
            case PrStatus.Delivered: {
                return "Delivered";
            }
            default: {
                return "Unknown";
            }
        }
    }
    
    private AlertStyle GetAlertStyle() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return AlertStyle.Info;
            }
            case PrStatus.NeedsApproval: {
                return AlertStyle.Warning;
            }
            case PrStatus.Ordered: {
                return AlertStyle.Secondary;
            }
            case PrStatus.Delivered: {
                return AlertStyle.Success;
            }
            default: {
                return AlertStyle.Primary;
            }
        }
    }

}