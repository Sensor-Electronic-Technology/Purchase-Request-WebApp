@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using Webapp.Data
@if (this.PurchaseRequest == null) {
    <p>No purchase request selected</p>
} else {
    <RadzenCard>
        <RadzenCard class="text-center">
            <RadzenStack>
                <RadzenFieldset Text="Purchase Request">
                    <RadzenText Text="@(this.PurchaseRequest.Title)"
                                TextStyle="TextStyle.H6"/>
                </RadzenFieldset>
                <AuthorizeView Roles="@($"{PurchaseRequestRole.Approver.Name},{PurchaseRequestRole.Requester.Name}")">
                    <Authorized>
                        @if(this.PurchaseRequest.Status == PrStatus.NeedsApproval) {
                            <RadzenFieldset>
                                <RadzenButton Text="Approve" Icon="check" ButtonStyle="ButtonStyle.Success"/>
                                <RadzenButton Text="Reject" Icon="close" ButtonStyle="ButtonStyle.Danger"/>
                            </RadzenFieldset>
                        }
                    </Authorized>
                </AuthorizeView>
                    <RadzenAlert Text="@this.GetAlertText()"
                                 AlertStyle="@this.GetAlertStyle()"
                                 Size="AlertSize.Small"
                                 AllowClose="false"/>
            </RadzenStack>


        </RadzenCard>
        <RadzenCard>
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Status">
                        <RadzenStack Orientation="Orientation.Horizontal"
                                     JustifyContent="JustifyContent.Center"
                                     AlignItems="AlignItems.Center">
                            <RadzenFieldset Text="Approver">
                                <RadzenText Text="@this.PurchaseRequest.Approver"
                                            TextStyle="TextStyle.H6"/>
                            </RadzenFieldset>
                            <RadzenFieldset Text="Priority">
                                <RadzenAlert Text="@(this.PurchaseRequest.Urgent ? "Urgent" : "Normal")"
                                             AlertStyle="@(this.PurchaseRequest.Urgent ? AlertStyle.Danger : AlertStyle.Info)"
                                             Size="AlertSize.Small"
                                             AllowClose="false"/>
                            </RadzenFieldset>
                        </RadzenStack>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Vendor/Department">
                        <RadzenStack Orientation="Orientation.Vertical"
                                     AlignItems="AlignItems.Center"
                                     Gap="5">
                            <RadzenFieldset Text="Department" Style="text-align: center">
                                <RadzenDropDown TValue="Department"
                                                Data="@this._departments"
                                                Value="@this.PurchaseRequest.Department"
                                                Placeholder="Select a department"
                                                TextProperty="Name"
                                                AllowClear="true"/>
                            </RadzenFieldset>
                            <RadzenFieldset Style="text-align: center;">
                                <HeaderTemplate>
                                    <RadzenText TextStyle="TextStyle.H5" TextAlign="TextAlign.Center">Vendor</RadzenText>
                                </HeaderTemplate>
                                <ChildContent>
                                    <VendorView Vendor="@this.PurchaseRequest.Vendor" Mode="EditMode.VIEW"/>
                                </ChildContent>
                            </RadzenFieldset>
                        </RadzenStack>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Request Info">
                        <RadzenStack>
                            <RadzenFormField Text="Requester">
                                <RadzenTextBox @bind-Value="@this.PurchaseRequest.Requester"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Purchase Request Title">
                                <RadzenTextBox Placeholder="Enter the title of the purchase request"
                                               @bind-Value="@this.PurchaseRequest.Title"
                                               Style="width: 100%"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Purchase Request Reason">
                                <RadzenTextArea Placeholder="Enter a brief description of the purchase request"
                                                @bind-Value="@this.PurchaseRequest.Description"
                                                Style="width: 100%; height:100px;"/>
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Items">
                        <PurchaseItemsTable @bind-PurchaseItems="@this.PurchaseRequest.PurchaseItems"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Comments/Quotes">
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenCard>
    </RadzenCard>
}


@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Parameter] public PurchaseRequest? PurchaseRequest { get; set; }

    private List<Department> _departments = [];

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._departments = await this._purchaseRequestService.GetDepartments();
    }

    private string GetAlertText() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return "Approved,Pending Order";
            }
            case PrStatus.NeedsApproval: {
                return "Pending Approval";
            }
            case PrStatus.Ordered: {
                return "Ordered";
            }
            case PrStatus.Delivered: {
                return "Delivered";
            }
            default: {
                return "Unknown";
            }
        }
    }
    
    private AlertStyle GetAlertStyle() {
        switch (this.PurchaseRequest.Status) {
            case PrStatus.Approved: {
                return AlertStyle.Info;
            }
            case PrStatus.NeedsApproval: {
                return AlertStyle.Warning;
            }
            case PrStatus.Ordered: {
                return AlertStyle.Secondary;
            }
            case PrStatus.Delivered: {
                return AlertStyle.Success;
            }
            default: {
                return AlertStyle.Primary;
            }
        }
    }
}