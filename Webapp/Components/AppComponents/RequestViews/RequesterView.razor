@page "/RequesterView"
@using System.Text.Json
@using Domain.Authentication
@using Domain.PurchaseRequests
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@rendermode InteractiveServer
@attribute [Authorize(Roles = $"{nameof(PurchaseRequestRole.Requester)}, {nameof(PurchaseRequestRole.Admin)}")]

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Icon="add_shopping_cart" Text="Overview" Style="background:#4a764a">
            <PurchaseRequestsTable PurchaseRequests="@this._purchaseRequests" @bind-SelectedPurchaseRequest="@this._selectedRequest"/>
            <RequestQueueView PurchaseReqStatuses="@this._purchaseReqStatuses"/>

        </RadzenTabsItem>
        <RadzenTabsItem Icon="add_shopping_cart" Text="Create New" Style="background: #0a53be">
            <PurchaseRequestForm CancelCallback="@this.CancelHandler" SaveCallback="@this.SaveHandler"/>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private UserService _userService { get; set; }
    
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private List<PurchaseRequest> _purchaseRequests = [];
    private List<PurchaseRequestStatus> _purchaseReqStatuses = [];
    private PurchaseRequest? _selectedRequest;
    private UserProfile? _userAccount = new();
    private bool _formVisible = false;
    private EditMode _requestFormMode = EditMode.NEW;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._userAccount = this._userService.GetSessionUserProfile();
        if(this._userAccount != null) {
            this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(pr=>pr.Requester == this._userAccount._id);
            this._purchaseReqStatuses=this._purchaseRequests.Select(pr=>new PurchaseRequestStatus(pr._id.ToString(),pr.Title ?? "No Title", pr.Status)).ToList();
            Console.WriteLine("Done Fetching Purchase Requests");
            foreach (var request in this._purchaseRequests) {
                Console.WriteLine(request.Title);
            }
        }
    }
    
    private async Task CancelHandler() {
        this._formVisible = false;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task EditHandler() {
        this._formVisible = true;
        this._requestFormMode = EditMode.EDIT;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveHandler() {
        this._formVisible = false;
        await this.Reload();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelRequestHandler(PurchaseRequest request) {
        Console.WriteLine(JsonSerializer.Serialize(request, new JsonSerializerOptions { WriteIndented = true }));
    }
    
    private async Task Reload() {
        this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(pr=>pr.Requester == this._userAccount._id);
        Console.WriteLine("Reloading Purchase Requests");
    }

    private Task ShowRequestFormHandler() {
        this._formVisible = !this._formVisible;
        this._requestFormMode=EditMode.NEW;
        return Task.CompletedTask;
    }
    

}