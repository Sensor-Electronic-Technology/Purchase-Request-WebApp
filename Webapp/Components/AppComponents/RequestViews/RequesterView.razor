@page "/RequesterView"
@using Domain.Authentication
@using Domain.PurchaseRequests
@using Domain.PurchaseRequests.Model
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Services.Authentication
@attribute [Authorize(Roles = $"{nameof(PurchaseRequestRole.Requester)}, {nameof(PurchaseRequestRole.Admin)}")]


    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
        <RadzenButton Text="Create Purchase Request"
                      ButtonStyle="ButtonStyle.Info"
                      Click="CreatePurchaseRequestHandler"
                      Icon="add_shopping_cart"
                      Style="width: 500px; height: 70px;"/>
        <RadzenCard Style="width: 100%">
            <RadzenStack>
                <RadzenCard>
                    <RadzenText Text="Purchase Requests"/>
                </RadzenCard>
                <RadzenCard>
                    <RadzenDataGrid TItem="PurchaseRequest" Data="@this._purchaseRequests" SelectionMode="DataGridSelectionMode.Single" @bind-Value="@this._selectedPurchaseRequests">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Approver)" Title="Approver"/>
                            <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Title)" Title="Title"/>
                            <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Description)" Title="Description"/>
                            <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Created)" Title="Created At"/>
                            <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Requester)" Title="Requester"/>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private UserService _userService { get; set; }
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private List<PurchaseRequest> _purchaseRequests = [];
    private IList<PurchaseRequest> _selectedPurchaseRequests = [];
    private UserProfile? _userAccount = new();
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._userAccount = this._userService.GetSessionUserProfile();
        if(this._userAccount != null) {
            this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(pr=>pr.Requester == this._userAccount._id);
            Console.WriteLine("Done Fetching Purchase Requests");
            foreach (var request in this._purchaseRequests) {
                Console.WriteLine(request.Title);
            }
        }
        /*if(this._userAccount != null) {

            //await this._dataGrid.Reload();

        }*/
        
    }

    private async Task CreatePurchaseRequestHandler() {
        /*this._dialogService.Open<PurchaseRequestForm>("Create Purchase Request",options: new DialogOptions() {
            Draggable = true,
            CloseDialogOnOverlayClick = false,
            ShowClose = true,
            Width = "50%",
            Height = "fit-content"
        });*/
        await this._dialogService.OpenSideAsync<PurchaseRequestForm>("Create Purchase Request",options: new SideDialogOptions() {
            CloseDialogOnOverlayClick = false,
            ShowClose = true,
            Width = "80%",
            Position = DialogPosition.Right
        });
        await this.Reload();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task Reload() {
        this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(pr=>pr.Requester == this._userAccount._id);
        Console.WriteLine("Reloading Purchase Requests");
    }
    

}