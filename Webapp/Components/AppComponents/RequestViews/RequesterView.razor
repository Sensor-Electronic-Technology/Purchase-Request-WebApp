@page "/RequesterView"
@using Domain.Authentication
@using Domain.PurchaseRequests.Dto
@using Domain.PurchaseRequests.Model
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Data
@using Webapp.Services
@using Webapp.Services.Authentication
@implements IAsyncDisposable
@rendermode InteractiveServer
@attribute [Authorize(Roles = $"{nameof(PurchaseRequestRole.Requester)}, {nameof(PurchaseRequestRole.Admin)}")]

<RadzenTabs SelectedIndex="@this._selectedIndex" SelectedIndexChanged="TabIndexChangedHandler">
    <Tabs>
        <RadzenTabsItem Icon="dashboard" Text="Overview" Style="background:#4a764a">
            <PurchaseRequestsTable PurchaseRequests="@this._purchaseRequests" 
                                   ModifyRequest="@this.ModifyHandler"
                                   @bind-SelectedPurchaseRequest="@this._selectedRequest"/>
            <RequestQueueView PurchaseReqStatuses="@this._purchaseReqStatuses"/>
        </RadzenTabsItem>
        <RadzenTabsItem Icon="add_shopping_cart" Text="Create New" Style="background: #0a53be">
            <PurchaseRequestForm CancelCallback="@this.CancelHandler" SaveCallback="@this.SaveHandler"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@this._templateTabText" Visible="@this._templateTabVisible" Icon="@this._tabIcon"
                        Style="background: #cc7119">
            @if(this._userAction==PrUserAction.MODIFY) {
                <PurchaseRequestForm PurchaseRequest="@this._actionRequest"
                                     Mode="@EditMode.EDIT"
                                     SaveCallback="@this.SaveHandler"
                                     CancelCallback="@this.CancelHandler"/>
            } else {

            }

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Inject] private PurchaseRequestService _purchaseRequestService { get; set; }
    [Inject] private NotificationService _notificationService { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private PrEditStatus _editStatus { get; set; }
    
    private RadzenDataGrid<PurchaseRequest> _dataGrid;
    private List<PurchaseRequest> _purchaseRequests = [];
    private List<PurchaseRequestStatus> _purchaseReqStatuses = [];
    private PurchaseRequest? _selectedRequest;
    private PurchaseRequest? _actionRequest;
    private UserProfile? _userAccount = new();
    private bool _templateTabVisible = false;
    private string _templateTabText="Template";
    private string _tabIcon="autorenew";
    
    private int _selectedIndex = 0;
    private EditMode _requestFormMode = EditMode.NEW;
    private PrUserAction _userAction = PrUserAction.MODIFY;
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._editStatus.OnTimeout += this.PrEditTimeout;
        await this.Load();
    }
    
    private void PrEditTimeout(string Id) {
        if(this._actionRequest != null && this._actionRequest._id.ToString() == Id) {
            this._actionRequest = null;
            this._templateTabVisible = false;
            this._selectedIndex = 0;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task CancelHandler() {
        if (this._selectedRequest != null) {
            this._editStatus.FinishEditing(this._selectedRequest._id.ToString());
        }
        await this.Load();
    }
    
    private async Task ModifyHandler() {
        if (this._selectedRequest != null) {
            if (this._editStatus.IsAvailable(this._selectedRequest._id.ToString())) {
                this._actionRequest = this._selectedRequest;
                this._templateTabVisible = true;
                this._templateTabText = "Modify Request";
                this._selectedIndex = 2;
                this._userAction=PrUserAction.MODIFY;
                this._editStatus.StartEditing(this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }
    
    private async Task CancelRequestHandler() {
        if (this._selectedRequest != null) {
            if (this._editStatus.IsAvailable(this._selectedRequest._id.ToString())) {
                this._actionRequest = this._selectedRequest;
                this._templateTabVisible = true;
                this._templateTabText = "Cancel Request";
                this._selectedIndex = 2;
                this._userAction=PrUserAction.CANCEL;
                this._editStatus.StartEditing(this._selectedRequest._id.ToString());
                await InvokeAsync(StateHasChanged);
            } else {
                this._notificationService.Notify(NotificationSeverity.Error,"Error","Another user is currently" +
                                                                                    " editing this request. " +
                                                                                    "Please try again later.");
            }
        }
    }

    private async Task SaveHandler() {
        if (this._selectedRequest != null) {
            this._editStatus.FinishEditing(this._selectedRequest._id.ToString());
        }
        await this.Load();
    }


    
    public async Task Load() {
        this._selectedIndex = 0;
        this._templateTabVisible = false;
        this._selectedRequest = null;
        this._selectedRequest = null;
        this._userAccount = this._userService.GetSessionUserProfile();
        if(this._userAccount != null) {
            this._purchaseRequests = await this._purchaseRequestService.GetUserPurchaseRequests(pr=>pr.Requester.Username == this._userAccount._id);
            this._purchaseReqStatuses=this._purchaseRequests.Select(pr=>new PurchaseRequestStatus(pr._id.ToString(),pr.Title ?? "No Title", pr.Status)).ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    private Task ShowRequestFormHandler() {
        this._templateTabVisible = !this._templateTabVisible;
        this._requestFormMode=EditMode.NEW;
        return Task.CompletedTask;
    }
    
    private void TabIndexChangedHandler(int tabIndex) {

        this._selectedIndex = tabIndex;
        if(tabIndex == 0 || tabIndex == 1) {
            this._templateTabVisible = false;
            this._selectedRequest = null;
            this._selectedRequest = null;
            if(this._selectedRequest != null) {
                this._editStatus.FinishEditing(this._selectedRequest._id.ToString());
            }
        }
    }
    
    public ValueTask DisposeAsync() {
        this._editStatus.OnTimeout -= this.PrEditTimeout;
        return ValueTask.CompletedTask;
    }

}