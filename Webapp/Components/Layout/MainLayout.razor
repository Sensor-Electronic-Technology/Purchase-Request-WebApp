@using Infrastructure.Services
@using Webapp.Services
@using Webapp.Services.Authentication
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject AuthApiService AuthApiService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

<RadzenComponents @rendermode="@InteractiveServer" />
<SpinnerOverlay />
<RadzenLayout Style="position: relative">
    <RadzenHeader>
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="5">
                    <RadzenSidebarToggle Click="@SidebarToggleClick"/>
                    <RadzenImage Path="images/seti_logo.png" style="width: 100px; height: 48px;" AlternateText="Application logo"></RadzenImage>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenStack AlignItems="AlignItems.End"
                             Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.End"
                             Style="padding: 0.5rem">
                    <RadzenProfileMenu Click="@this.MenuClickHandler">
                        <Template>
                            <AuthorizeView>
                                <Authorized>
                                    <RadzenGravatar Email="@context.User.Identity?.Name"/>
                                </Authorized>
                                <NotAuthorized>
                                    <RadzenGravatar Email="guest"/>
                                </NotAuthorized>
                            </AuthorizeView>
                        </Template>
                        <ChildContent>
                            <AuthorizeView>
                                <Authorized>
                                    <RadzenProfileMenuItem Text="Logout" Icon="exit_to_app"/>
                                </Authorized>
                                <NotAuthorized>
                                    <RadzenProfileMenuItem Text="Login" Path="login" Icon="account_circle"></RadzenProfileMenuItem>
                                </NotAuthorized>
                            </AuthorizeView>
                            <RadzenProfileMenuItem Text="Profile" Path="user_profile" Icon="account_box"></RadzenProfileMenuItem>
                        </ChildContent>
                    </RadzenProfileMenu>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody Expanded="@sidebarExpanded">
        @Body
    </RadzenBody>
    <RadzenSidebar style="z-index: 2; width:max-content;">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
            <RadzenPanelMenuItem Text="Dashboard" Image="images/seti_logo.png" Path="/"/>
            <AuthorizeView Roles="Administrator, User">
                <Authorized>
                    <RadzenPanelMenuItem Text="Purchase Requests" Icon="event_seat" Path="/purchase-requests"/>
                </Authorized>
            </AuthorizeView>
        </RadzenPanelMenu>
    </RadzenSidebar>
</RadzenLayout>

@code {
   bool sidebarExpanded = false;

   void SidebarToggleClick() {
       sidebarExpanded = !sidebarExpanded;
   }

   private async Task MenuClickHandler(RadzenProfileMenuItem item) {
       if (item.Text == "Logout") {
           await Logout();
       }
   }
   
   private async Task Logout() {
       var authProvider = (SetiAuthStateProvider)authStateProvider;
       var state=await authProvider.GetAuthenticationStateAsync();
       var token=state.User.Claims.FirstOrDefault(e => e.Type == "Token")?.Value;
       await AuthApiService.Logout(token);
       await authProvider.UpdateAuthenticationState(null);
       navManager.NavigateTo("/", true);
   }
}