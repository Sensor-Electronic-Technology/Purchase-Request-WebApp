@page "/login"
@using Webapp.Authentication
@using Webapp.Services
@inject AuthService _authService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="model.UserName" class="form-control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    private Model model = new Model(); 

    private async Task Authenticate() {
        
        var session =await this._authService.Login(model.UserName, model.Password, false);
        var customAuthStateProvider = (SetiAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(session);
        // true, indicates that the navigation should be done with a full page refresh.
        navManager.NavigateTo("/", true);
    }
}