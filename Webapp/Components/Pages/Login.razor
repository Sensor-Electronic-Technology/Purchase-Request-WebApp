@page "/login"
@using Infrastructure.Services
@using Webapp.Components.AppComponents
@using Webapp.Components.AppComponents.AuthViews
@using Webapp.Services
@using Webapp.Services.Authentication
@inject AuthApiService AuthApiService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserService UserService
@inject DialogService DialogService

<RadzenStack Gap="0" class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 400px; overflow: hidden;">
    <RadzenCard class="rz-shadow-0 rz-border-radius-0 rz-background-color-info rz-p-12" style="text-align: center;">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" class="rz-color-white rz-mb-0">Login</RadzenText>
    </RadzenCard>
    <RadzenCard class="rz-shadow-0 rz-p-12">
        <RadzenTemplateForm Data=@("SimpleLogin")>
            <RadzenLogin Login="@OnLogin"
                         AllowRegister="false" 
                         AllowResetPassword="false" 
                         AllowRememberMe="true"
                         RememberMe="true"
                         RememberMeText="SETi Domain User" />
        </RadzenTemplateForm>
    </RadzenCard>
</RadzenStack>

@code {
    private async Task OnLogin(LoginArgs args) {
        var session =await this.AuthApiService.Login(args.Username, args.Password, args.RememberMe);
        if(session==null) {
            return;
        }
        var exists = await this.UserService.ProfileExists(session.UserAccount.Username);
        var customAuthStateProvider = (SetiAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(session);
        if (exists) {
            navManager.NavigateTo("/", true);
        }else {
            await this.DialogService.OpenAsync<RegisterView>("Register", new Dictionary<string, object> { { "UserSession", session } });
            navManager.NavigateTo("/");
        }
    }
}