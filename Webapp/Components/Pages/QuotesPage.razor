@page "/quotes"
@using Domain.PurchaseRequests.Dto
@using Infrastructure.Services
@using SetiFileStore.FileClient


<RadzenCard Style="width: 100%;" class="rz-max-h-75 rz-overflow-scroll">
    <RadzenStack Gap="1">
        <RadzenCard Variant="Variant.Outlined" class="area-header">
            <RadzenStack>
                <RadzenText Text="Quotes"
                            TextStyle="TextStyle.H6"
                            TextAlign="TextAlign.Center"/>
                <RadzenText TextStyle="TextStyle.Body1"
                            TextAlign="TextAlign.Center"
                            Text="Right click quote row to view context menu"/>
            </RadzenStack>
        </RadzenCard>
        <RadzenCard>
            <RadzenDataGrid @ref="@this._quotesGrid"
                            TItem="QuotesDto"
                            Data="@this._quotes"
                            CellContextMenu="@this.ContextMenuHandle"
                            IsLoading="@this._isLoading"
                            AllowFiltering="true"
                            AllowSorting="true"
                            AllowGrouping="true"
                            Render="@this.OnRender"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.And"
                            SelectionMode="DataGridSelectionMode.Single"
                            Value="@this._selectedQuotes"
                            ValueChanged="@this.SelectedQuoteChangedHandler"
                            AllowRowSelectOnRowClick="true">
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(QuotesDto.FileId)" Title="Id"/>
                    <RadzenDataGridColumn Property="@nameof(QuotesDto.Filename)" Title="Filename"/>
                    <RadzenDataGridColumn Property="@nameof(QuotesDto.Username)" Title="Username"/>
                    <RadzenDataGridColumn Property="@nameof(QuotesDto.PrTitle)" Title="Pr Title"/>
                    <RadzenDataGridColumn Property="@nameof(QuotesDto.PrDescription)" Title="Description"/>
                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@code {
    [Inject] private PurchaseRequestService _dataService { get; set; }
    [Inject] private FileService _fileService { get; set; }
    [Inject] private ContextMenuService _contextMenuService { get; set; }
    [Inject] private IJSRuntime _jsRuntime { get; set; }
    [Inject] private DialogService _dialogService { get; set; }
    
    IEnumerable<QuotesDto> _quotes;
    RadzenDataGrid<QuotesDto> _quotesGrid;
    private IList<QuotesDto>? _selectedQuotes;
    private QuotesDto? _selectedQuote;
    private FileData? _selectedFileData;
    private bool _quoteLoading = false;
    private bool _isLoading = false;
    private int _count;
    private bool _quoteViewCollapsed = true;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._isLoading = true;
        this._quotes = await _dataService.GetQuotes();
        this._isLoading = false;
    }

    private async Task SelectedQuoteChangedHandler(IList<QuotesDto> selectedQuotes) {
        this._quoteViewCollapsed = false;
        if (selectedQuotes.Any()) {
            this._selectedQuotes = selectedQuotes;
            this._selectedQuote = selectedQuotes[0];
        }
    }
    
    void OnRender(DataGridRenderEventArgs<QuotesDto> args) {
        if (args.FirstRender) {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "Username", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }
    
    private async Task ContextMenuHandle(DataGridCellMouseEventArgs<QuotesDto> args) {
        List<ContextMenuItem> menuList = [
            new() { Text = "Download", Value = "Download", Icon = "autorenew" },
            new (){Text="View", Value="View", Icon="visibility"}
        ];
        this._contextMenuService.Open(args, menuList, (e) => {
                InvokeAsync(()=>this.ContextActionHandler(args, e));
                this._contextMenuService.Close();
            }
        );
    }
    
    private async Task ContextActionHandler(DataGridCellMouseEventArgs<QuotesDto> args, MenuItemEventArgs e) {
        if ((string)e.Value == "Download") {
            await this._quotesGrid.SelectRow(args.Data);
            await this._jsRuntime.InvokeAsync<object>("open", args.Data.Url, "_blank");
        }else if ((string)e.Value == "View") {
            await this._quotesGrid.SelectRow(args.Data);
            await this._dialogService.OpenSideAsync<QuoteSidePanePreview>("Quote Preview", new Dictionary<string, object>() {
                { "QuoteId", args.Data.FileId },
            },new SideDialogOptions() {
                Width = "50%",
                ShowClose = true,
                ShowTitle = true,
                Position = DialogPosition.Right
            });
        }
    }
}