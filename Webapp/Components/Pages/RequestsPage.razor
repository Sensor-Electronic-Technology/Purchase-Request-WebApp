@page "/requests"
@using System.Linq.Dynamic.Core
@using Domain.Authentication
@using Domain.PurchaseRequests.Model
@using Domain.PurchaseRequests.TypeConstants
@using Infrastructure.Services
@using Webapp.Services.Authentication
@using Webapp.Data

<RadzenSplitter>
    <RadzenSplitterPane Size="50%">
        <RadzenStack>
            <RadzenCard>
                <RadzenCard class="area-header">
                    <RadzenText Text="Purchase Requests"
                                TextStyle="TextStyle.H6"
                                TextAlign="TextAlign.Center"/>
                </RadzenCard>

                <RadzenDataGrid @ref="@this._requestGrid" TItem="PurchaseRequest"
                                Data="@this._requests"
                                AllowRowSelectOnRowClick="true"
                                CellContextMenu="@this.ContextMenuHandle"
                                SelectionMode="DataGridSelectionMode.Single"
                                Value="@this._selectedRequests"
                                CellRender="@this.CellRender"
                                Render="@this.OnRender"
                                Density="Density.Compact"
                                AllowColumnResize="true"
                                AllowFiltering="true"
                                FilterMode="FilterMode.Advanced"
                                AllowColumnPicking="true"
                                AllowSorting="true"
                                AllowColumnReorder="true"
                                IsLoading="@this._isLoading"
                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                GridLines="DataGridGridLines.Both"
                                ValueChanged="@this.SelectionChangedHandler">
                    <GroupHeaderTemplate>
                        <RadzenAlert Text="@(context.GroupDescriptor.GetTitle() + ":" + context.Data.Key)"
                                     AlertStyle="@(this.GetAlertStyle((PrStatus)Enum.Parse(typeof(PrStatus), context.Data.Key.ToString())))"
                                     AllowClose="false"
                                     Size="AlertSize.ExtraSmall"/>
                    </GroupHeaderTemplate>
                    <HeaderTemplate>
                        <RadzenButton Click="@this.ClearSelectionHandler" Text="Clear Selection"/>
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Title)" Title="Title"/>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Description)" Title="Description" Visible="false"/>
                        <RadzenDataGridColumn Property="Requester" FilterProperty="Requester.Name" Type="@typeof(string)" Title="Requester">
                            <Template Context="request">
                                @request.Requester.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="Approver" FilterProperty="Approver.Name" Type="@typeof(string)" Visible="true" Title="Approver">
                            <Template Context="request">
                                @request.Approver.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="Department" FilterProperty="Department.Name" Type="@typeof(string)" Title="Department" Visible="false">
                            <Template Context="request">
                                @request.Department?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="Vendor" FilterProperty="Vendor.Name" Type="@typeof(string)" Title="Vendor" Visible="false">
                            <Template Context="request">
                                @request.Vendor?.Name
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.AdditionalComments)" Title="Comments" Visible="false"/>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Created)" Title="Created Date" Visible="true">
                            <Template Context="request">
                                @request.Created.ToString("MM/dd/yy")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.ApprovedDate)" Title="Approved Date" Visible="true">
                            <Template Context="request">
                                @if (request.Status >= PrStatus.Approved && request.Status != PrStatus.Rejected) {
                                    @request.Created.ToString("MM/dd/yy")
                                } else {
                                    <span></span>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.OrderedDate)" Title="Ordered Date" Visible="true">
                            <Template Context="request">
                                @if (request.Status >= PrStatus.Ordered && request.Status != PrStatus.Rejected) {
                                    @request.OrderedDate.ToString("MM/dd/yy")
                                } else {
                                    <span></span>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.ReceivedDate)" Title="Received Date" Visible="true">
                            <Template Context="request">
                                @if (request.Status == PrStatus.Delivered) {
                                    @request.ReceivedDate.ToString("MM/dd/yy")
                                } else {
                                    <span></span>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.RejectedDate)" Title="Rejected Date" Visible="true">
                            <Template Context="request">
                                @if (request.Status == PrStatus.Rejected) {
                                    @request.RejectedDate.ToString("MM/dd/yy")
                                } else {
                                    <span></span>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.ShippingType)" Title="Freight" Visible="false"/>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Urgent)" Title="Urgent?" Visible="false"/>
                        <RadzenDataGridColumn Property="@nameof(PurchaseRequest.Status)" Title="Status">
                            <Template Context="request">
                                @switch (request.Status) {
                                    case PrStatus.NeedsApproval:
                                        <span style='color: var(--rz-text-contrast-color)'>Pending</span>
                                        break;
                                    case PrStatus.Approved:
                                        <span style='color: var(--rz-text-contrast-color)'>Approved</span>
                                        break;
                                    case PrStatus.Ordered:
                                        <span style='color: var(--rz-text-contrast-color)'>Ordered</span>
                                        break;
                                    case PrStatus.Delivered:
                                        <span style='color: var(--rz-text-contrast-color)'>Delivered</span>
                                        break;
                                    case PrStatus.Rejected:
                                        <span style='color: var(--rz-text-contrast-color)'>Rejected</span>
                                        break;
                                    default:
                                        <span style='color: var(--rz-text-contrast-color)'>Unknown</span>
                                        break;
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenStack>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="50%" Collapsed="@this._collapsed">
        <PurchaseRequestView PurchaseRequest="@this._selectedRequest"
                             Mode="@EditMode.VIEW"/>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    [Inject] private PurchaseRequestDataService _dataService { get; set; }
    [Inject] private ContextMenuService _contextMenuService { get; set; }
    [Inject] private UserService _userService { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }
    
    RadzenDataFilter<PurchaseRequest> dataFilter;
    IEnumerable<PurchaseRequest> _filteredRequests;
    IEnumerable<PurchaseRequest> _requests;
    RadzenDataGrid<PurchaseRequest> _requestGrid;
    bool auto = true;
    private bool _isLoading = false;
    private int _count;
    private PurchaseRequest? _selectedRequest;
    private IList<PurchaseRequest>? _selectedRequests;
    private bool _collapsed = true;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _isLoading = true;
        /*await Task.Yield();*/
        this._requests= await _dataService.GetPurchaseRequests();
        /*var query = this._requests.AsQueryable();
        query = query.Where(dataFilter);
        this._count = query.Count();
        this._filteredRequests = query.ToList();*/
        _isLoading = false;
    }
    
    /*protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender) {
            await dataFilter.AddFilter(new CompositeFilterDescriptor() { 
                Property = "Requester.Name", 
                FilterValue = "Andrew", 
                FilterOperator = FilterOperator.Contains 
            });
        }
    }*/

    async Task LoadData(LoadDataArgs args) {
        _isLoading = true;
        /*await Task.Yield();*/
        this._requests= await _dataService.GetPurchaseRequests();
        /*var query = this._requests.AsQueryable();
        query = query.Where(dataFilter);
        this._count = query.Count();
        this._filteredRequests = query.ToList();*/
        _isLoading = false;
    }
    

    private Task SelectionChangedHandler(IList<PurchaseRequest> selected) {
        if(selected.Count > 0) {
            this._collapsed = false;
            this._selectedRequest = selected[0];
        } else {
            this._collapsed = true;
            this._selectedRequest = null;
        }
        return Task.CompletedTask;
    }

    private Task ClearSelectionHandler() {
        this._selectedRequests = null;
        this._collapsed = true;
        this._selectedRequest = null;
        return Task.CompletedTask;
    }
    
    AlertStyle GetAlertStyle(PrStatus status) {
        switch (status) {
            case PrStatus.NeedsApproval:
                return AlertStyle.Primary;
            case PrStatus.Approved:
                return AlertStyle.Secondary;
            case PrStatus.Ordered:
                return AlertStyle.Info;
            case PrStatus.Delivered:
                return AlertStyle.Success;
            case PrStatus.Rejected:
                return AlertStyle.Danger;
            default:
                return AlertStyle.Info;
        }
    }

    private void ContextMenuHandle(DataGridCellMouseEventArgs<PurchaseRequest> args) {
        List<ContextMenuItem> menuList = [
            new ContextMenuItem() { Text = "Repeat Request", Value = PrUserAction.MODIFY, Icon = "autorenew" },
        ];
        this._contextMenuService.Open(args, menuList, (e) => {
            this._navigationManager.NavigateTo($"/action/{args.Data._id}/{(int)PrUserAction.REPEAT}", true);
        });
    }
    
    void CellRender(DataGridCellRenderEventArgs<PurchaseRequest> args) {
        if (args.Column.Property == nameof(PurchaseRequest.Status)) {
            switch (args.Data.Status) {
                case PrStatus.Approved:
                    args.Attributes.Add("style", "background-color: var(--rz-series-1)");
                    break;
                case PrStatus.Delivered:
                    args.Attributes.Add("style", "background-color: var(--rz-success)");
                    break;
                case PrStatus.Ordered:
                    args.Attributes.Add("style", "background-color: var(--rz-series-4)");
                    break;
                case PrStatus.NeedsApproval:
                    args.Attributes.Add("style", "background-color: var(--rz-info)");
                    break;
                case PrStatus.Rejected:
                    args.Attributes.Add("style", "background-color: var(--rz-danger)");
                    break;
            }
        }
    }
    
    void OnRender(DataGridRenderEventArgs<PurchaseRequest> args) {
        if(args.FirstRender) {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "Status", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }
    
}