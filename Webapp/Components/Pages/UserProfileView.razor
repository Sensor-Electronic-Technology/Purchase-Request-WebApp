@page "/user_profile"
@using Domain.Users
@using Infrastructure.Services
@using Webapp.Services.Authentication
@using Webapp.Components.AppComponents.AuthViews
@inject UserService UserService
<PageTitle>User Profile</PageTitle>
<AuthorizeView>
    <Authorized>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            @if (this._userProfile == null) {
                <RadzenText Text="Internal Error: No Profile Available"
                            TextStyle="TextStyle.H5"/>
            } else {
                <RadzenStack Orientation="Orientation.Vertical"
                             AlignItems="AlignItems.Center">
                    <RadzenFieldset Text="Edit?">
                        <RadzenSwitch @bind-Value="@_switchValue"
                                      Change="@(args => OnChange(args, "Switch"))"
                                      Name="EditEnable"/>
                        
                        <RadzenLabel Text="@this._label" 
                                     Component="EditEnable" 
                                     class="rz-ms-2"/>
                    </RadzenFieldset>
                    <ProfileView @bind-UserProfile="@this._userProfile"
                                 OnSubmit="@this.Submit" IsEditMode="@this._switchValue"/>
                </RadzenStack>
            }
        </RadzenRow>
    </Authorized>
    <NotAuthorized>
        <h1>Guest Accounts Have No Profile</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] private AvatarDataService _avatarDataService { get; set; }
    
    private UserProfile? _userProfile;
    private bool _switchValue=false;
    private string _label="Enable";
    
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        this._userProfile = this.UserService.GetSessionUserProfile();
        if (this._userProfile != null) {
            if (string.IsNullOrEmpty(this._userProfile.AvatarPath)) {
                this._userProfile.AvatarPath=this._avatarDataService.GetRandomAvatar();
                await this.UserService.UpdateProfile(this._userProfile);
            }   
        }
    }
    
    private async Task Submit() {
        await this.UserService.UpdateProfile(this._userProfile);
        this._switchValue=!this._switchValue;
        await InvokeAsync(StateHasChanged);
    }
    
    void OnChange(bool? value, string name) {
        if (value.HasValue) {
            this._switchValue = value.Value;
            this._label = value.Value ? "Disable" : "Enable";
        }
    }

}